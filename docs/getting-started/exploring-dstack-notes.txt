

## Exploring the dStack Repository

The dstack repository is a comprehensive collection of tools, libraries, and services that support the platform’s mission of secure application deployment.

Below, we’ll explore the various directories and their purposes, each linked to its location in the repository for easy reference.

This structure represents the full scope of the dstack TEE platform.

The [vmm/](https://github.com/Dstack-TEE/dstack/tree/master/vmm) directory houses the service that manages Confidential VMs on a bare TDX host, as described earlier.

Complementing this, the [gateway/](https://github.com/Dstack-TEE/dstack/tree/master/gateway) directory contains the reverse proxy that secures TLS connections to CVMs.

The [kms/](https://github.com/Dstack-TEE/dstack/tree/master/kms) directory provides the KMS server for key generation and management.

[guest-agent/](https://github.com/Dstack-TEE/dstack/tree/master/guest-agent) includes the service running inside CVMs to support container operations.

For system setup and security tasks, [dstack-util/](https://github.com/Dstack-TEE/dstack/tree/master/dstack-util) offers a CLI tool used within the guest environment for tasks like TDX quote generation, Runtime Measurement Register (RTMR) extension, and RA-TLS certificate generation.

Remote attestation is a big part of dstack’s security model, supported by libraries like [ra-rpc/](https://github.com/Dstack-TEE/dstack/tree/master/ra-rpc) for Protocol Buffers RPC (pRPC).

[ra-tls/](https://github.com/Dstack-TEE/dstack/tree/master/ra-tls) is for secure communication.

Attestation-specific functionality is further enhanced by [tdx-attest/](https://github.com/Dstack-TEE/dstack/tree/master/tdx-attest), a guest library for obtaining TDX quotes and extending RTMR.

[tdx-attest-sys/](https://github.com/Dstack-TEE/dstack/tree/master/tdx-attest-sys) provides low-level Rust bindings for Intel TDX attestation.

Certificate management is handled through [cert-client/](https://github.com/Dstack-TEE/dstack/tree/master/cert-client) for requesting and verifying certificates in a TEE environment.

[certbot/](https://github.com/Dstack-TEE/dstack/tree/master/certbot) is for automatic TLS certificate acquisition and renewal, specifically for the dstack-gateway.

The [ct_monitor/](https://github.com/Dstack-TEE/dstack/tree/master/ct_monitor) directory ensures certificate issuance security by monitoring Certificate Transparency logs.

Configuration and API support come from [load_config/](https://github.com/Dstack-TEE/dstack/tree/master/load_config), a utility for loading configurations across dstack components.

[guest-api/](https://github.com/Dstack-TEE/dstack/tree/master/guest-api) is for guest-to-host interactions.

[host-api/](https://github.com/Dstack-TEE/dstack/tree/master/host-api) is for managing guest environments from the host.

Secure data handling is supported by [iohash/](https://github.com/Dstack-TEE/dstack/tree/master/iohash), an I/O hashing library.

Key provisioning is managed through [key-provider-client/](https://github.com/Dstack-TEE/dstack/tree/master/key-provider-client).

Its build utilities are in [key-provider-build/](https://github.com/Dstack-TEE/dstack/tree/master/key-provider-build).

Shared resources across the ecosystem are defined in [dstack-types/](https://github.com/Dstack-TEE/dstack/tree/master/dstack-types), which contains type definitions and data structures.

Communication needs are met by [http-client/](https://github.com/Dstack-TEE/dstack/tree/master/http-client), a secure HTTP client library.

[sodiumbox/](https://github.com/Dstack-TEE/dstack/tree/master/sodiumbox) is a Rust implementation of libsodium’s sealed box encryption.

Auditing and verification are supported by [cc-eventlog/](https://github.com/Dstack-TEE/dstack/tree/master/cc-eventlog) for handling Confidential Computing event logs.

Service management within dstack is overseen by [supervisor/](https://github.com/Dstack-TEE/dstack/tree/master/supervisor), which monitors and controls running services.

Utilities like [serde-duration/](https://github.com/Dstack-TEE/dstack/tree/master/serde-duration) provide serialization and deserialization for time durations in configurations.

[mod-tdx-guest/](https://github.com/Dstack-TEE/dstack/tree/master/mod-tdx-guest) offers a TDX guest module for secure VM operations.

For web framework integration, [rocket-vsock-listener/](https://github.com/Dstack-TEE/dstack/tree/master/rocket-vsock-listener) implements a VSOCK listener for Rocket.

Developers can integrate with dstack using [python/](https://github.com/Dstack-TEE/dstack/tree/master/python) for Python bindings and utilities.

The [sdk/](https://github.com/Dstack-TEE/dstack/tree/master/sdk) directory includes Software Development Kits for multiple languages.

Within the SDK, you’ll find [go/](https://github.com/Dstack-TEE/dstack/tree/master/sdk/go) for Go integration.

[js/](https://github.com/Dstack-TEE/dstack/tree/master/sdk/js) is for JavaScript and web applications.

[python/](https://github.com/Dstack-TEE/dstack/tree/master/sdk/python) is for data science and machine learning.

[rust/](https://github.com/Dstack-TEE/dstack/tree/master/sdk/rust) is for systems programming.

Additional resources include [docs/](https://github.com/Dstack-TEE/dstack/tree/master/docs) for platform documentation.

[basefiles/](https://github.com/Dstack-TEE/dstack/tree/master/basefiles) is for base file templates used in system initialization.

[.github/](https://github.com/Dstack-TEE/dstack/tree/master/.github) is for GitHub configuration files managing CI/CD pipelines.

Hardware-related utilities are found in [lspci/](https://github.com/Dstack-TEE/dstack/tree/master/lspci) for PCI device inspection.

Testing is supported by [test-scripts/](https://github.com/Dstack-TEE/dstack/tree/master/test-scripts) for validating dstack functionality.

This comprehensive structure represents the full dstack TEE platform, providing everything needed to deploy containerized applications securely, from core services to developer tools, all backed by hardware-level security guarantees.