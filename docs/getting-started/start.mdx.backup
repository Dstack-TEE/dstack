---
title: "Starting with dStack"
description: "Configure your dstack environment and prepare for secure application deployment"
---

## Core Components of dstack

The dstack platform is composed of several key components, each playing a distinct role in enabling secure, hardware-backed application deployment:

**dstack-vmm**: Runs on the bare-metal TDX host. Responsible for managing Confidential Virtual Machines (CVMs), orchestrating their lifecycle, and providing the foundational layer for secure workload execution.
**dstack-gateway**: Acts as a secure reverse proxy. It forwards incoming TLS connections from external clients to the appropriate CVMs, ensuring encrypted communication and controlled access.
**dstack-kms**: The Key Management Service (KMS) for dstack. It generates, stores, and manages cryptographic keys for CVMs, and is integral to the attestation and key provisioning process.
**dstack-guest-agent**: Runs inside each CVM. Handles key derivation requests from containers, facilitates attestation, and acts as the bridge between the guest environment and the dstack security infrastructure.
**meta-dstack**: A Yocto meta layer used to build custom CVM guest images. It provides recipes and configurations to create minimal, secure operating system images tailored for confidential workloads.

These components work together to deliver end-to-end security, from hardware root of trust to application-level attestation and key management.

## Directory Structure

```
dstack/
    ├── dstack-vmm/                A service running in bare TDX host to manage CVMs
    ├── dstack-gateway/            A reverse proxy to forward TLS connections to CVMs
    ├── dstack-kms/                A KMS server to generate keys for CVMs
    ├── dstack-guest-agent/        A service running in CVM to serve containers' key derivation and attestation requests
    ├── meta-dstack/               A Yocto meta layer to build CVM guest images
    ├── tdxctl/                    A CLI tool getting TDX quote, extending RTMR, generating cert for RA-TLS, etc.
    ├── ra-rpc/                    RA-TLS support for pRPC
    └── ra-tls/                    RA-TLS support library
```

