{"version":3,"file":"static/chunks/2401-b7fec07a399c8648.js","mappings":"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ACA,OACA,KACA,SACA,QACA,SACA,OACA,KACA,SACA,SACA,QACA,SACA,SACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,SACA,OACA,SACA,SACA,QACA,QACA,QACA,SACA,MACA,QACA,SACA,OACA,SACA,SACA,QACA,OACA,OACA,SACA,MACA,SACA,SACA,QACA,SACA,MACA,OACA,SACA,SACA,SACA,KACA,SACA,QACA,QACA,SACA,SACA,OACA,QACA,KACA,OACA,QACA,SACA,OACA,MACA,SACA,SACA,QACA,SACA,OACA,OACA,SACA,SACA,OACA,OACA,SACA,QACA,OACA,QACA,MACA,OACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,MACA,OACA,CC3GOC,GAAA,CACPC,KAAA,OACAC,MAAA,OACAC,KAAA,OACAC,MAAA,OACAC,OAAA,OACAC,IAAA,OACAC,OAAA,OACAC,KAAA,OACAC,IAAA,OACAC,KAAA,OACAC,KAAA,OACAC,MAAA,OACAC,IAAA,OACAC,IAAA,OACAC,IAAA,OACAC,KAAA,OACAC,IAAA,OACAC,OAAA,OACAC,KAAA,OACAC,KAAA,OACAC,MAAA,OACAC,MAAA,OACAC,KAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,KAAA,OACAC,MAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,OAAA,OACAC,KAAA,OACAC,MAAA,OACAC,MAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,IAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,OAAA,OACAC,KAAA,OACAC,MAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,OAAA,OACAC,MAAA,OACAC,MAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,OAAA,OACAC,KAAA,OACAC,MAAA,OACAC,MAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,IAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,OAAA,OACAC,KAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,KAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA,IACAC,QAAA,IACAC,KAAA,IACAC,IAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,OAAA,IACAC,GAAA,IACAC,GAAA,IACAC,GAAA,IACAC,QAAA,IACAC,GAAA,IACAC,IAAA,IACAC,MAAA,IACAC,IAAA,IACAC,QAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,MAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA,IACAC,QAAA,IACAC,KAAA,IACAC,IAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,OAAA,IACAC,GAAA,IACAC,GAAA,IACAC,GAAA,IACAC,QAAA,IACAC,GAAA,IACAC,IAAA,IACAC,OAAA,IACAC,MAAA,IACAC,IAAA,IACAC,QAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,MAAA,IACAC,SAAA,IACAC,MAAA,IACAC,IAAA,IACAC,KAAA,IACAC,OAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,OAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,QAAA,IACAC,KAAA,IACAC,KAAA,IACAC,KAAA,IACAC,KAAA,IACAC,KAAA,IACAC,MAAA,IACAC,KAAA,IACAC,KAAA,IACAC,KAAA,IACAC,KAAA,IACAC,KAAA,IACAC,OAAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA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","sources":["webpack://_N_E/../../node_modules/base64-js/index.js","webpack://_N_E/../../node_modules/ieee754/index.js","webpack://_N_E/../../node_modules/@shikijs/types/dist/index.mjs","webpack://_N_E/../../node_modules/@shikijs/vscode-textmate/dist/index.js","webpack://_N_E/../../node_modules/html-void-elements/index.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/util/schema.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/util/merge.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/normalize.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/util/info.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/util/types.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/util/defined-info.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/util/create.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/aria.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/html.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/svg.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/xlink.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/xmlns.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/xml.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/index.js","webpack://_N_E/../../node_modules/zwitch/index.js","webpack://_N_E/../../node_modules/stringify-entities/lib/core.js","webpack://_N_E/../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","webpack://_N_E/../../node_modules/stringify-entities/lib/util/to-decimal.js","webpack://_N_E/../../node_modules/character-entities-legacy/index.js","webpack://_N_E/../../node_modules/character-entities-html4/index.js","webpack://_N_E/../../node_modules/stringify-entities/lib/constant/dangerous.js","webpack://_N_E/../../node_modules/stringify-entities/lib/util/to-named.js","webpack://_N_E/../../node_modules/stringify-entities/lib/util/format-smart.js","webpack://_N_E/../../node_modules/stringify-entities/lib/index.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/handle/comment.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/handle/doctype.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/property-information/lib/find.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/omission/util/siblings.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/omission/omission.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/omission/closing.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/omission/opening.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/handle/element.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/handle/text.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/handle/raw.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/handle/root.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/handle/index.js","webpack://_N_E/../../node_modules/@shikijs/core/node_modules/hast-util-to-html/lib/index.js","webpack://_N_E/../../node_modules/@shikijs/core/dist/index.mjs","webpack://_N_E/../../node_modules/oniguruma-parser/dist/utils.js","webpack://_N_E/../../node_modules/oniguruma-parser/dist/tokenizer/tokenize.js","webpack://_N_E/../../node_modules/oniguruma-parser/dist/parser/node-utils.js","webpack://_N_E/../../node_modules/oniguruma-parser/dist/parser/parse.js","webpack://_N_E/../../node_modules/oniguruma-parser/dist/traverser/traverse.js","webpack://_N_E/../../node_modules/regex/src/utils-internals.js","webpack://_N_E/../../node_modules/regex-utilities/src/index.js","webpack://_N_E/../../node_modules/regex/src/atomic.js","webpack://_N_E/../../node_modules/regex/src/subclass.js","webpack://_N_E/../../node_modules/regex/src/internals.js","webpack://_N_E/../../node_modules/regex-recursion/src/index.js","webpack://_N_E/../../node_modules/oniguruma-to-es/dist/esm/index.js","webpack://_N_E/../../node_modules/@shikijs/engine-javascript/dist/shared/engine-javascript.hzpS1_41.mjs","webpack://_N_E/../../node_modules/@shikijs/engine-javascript/dist/engine-compile.mjs","webpack://_N_E/../../node_modules/ccount/index.js","webpack://_N_E/../../node_modules/comma-separated-tokens/index.js","webpack://_N_E/../../node_modules/hast-util-whitespace/lib/index.js","webpack://_N_E/../../node_modules/shiki/dist/langs.mjs","webpack://_N_E/../../node_modules/shiki/dist/themes.mjs","webpack://_N_E/../../node_modules/@shikijs/engine-oniguruma/dist/index.mjs","webpack://_N_E/../../node_modules/shiki/dist/bundle-full.mjs","webpack://_N_E/../../node_modules/space-separated-tokens/index.js"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","class ShikiError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ShikiError\";\n  }\n}\n\nexport { ShikiError };\n","// src/utils.ts\nfunction clone(something) {\n  return doClone(something);\n}\nfunction doClone(something) {\n  if (Array.isArray(something)) {\n    return cloneArray(something);\n  }\n  if (something instanceof RegExp) {\n    return something;\n  }\n  if (typeof something === \"object\") {\n    return cloneObj(something);\n  }\n  return something;\n}\nfunction cloneArray(arr) {\n  let r = [];\n  for (let i = 0, len = arr.length; i < len; i++) {\n    r[i] = doClone(arr[i]);\n  }\n  return r;\n}\nfunction cloneObj(obj) {\n  let r = {};\n  for (let key in obj) {\n    r[key] = doClone(obj[key]);\n  }\n  return r;\n}\nfunction mergeObjects(target, ...sources) {\n  sources.forEach((source) => {\n    for (let key in source) {\n      target[key] = source[key];\n    }\n  });\n  return target;\n}\nfunction basename(path) {\n  const idx = ~path.lastIndexOf(\"/\") || ~path.lastIndexOf(\"\\\\\");\n  if (idx === 0) {\n    return path;\n  } else if (~idx === path.length - 1) {\n    return basename(path.substring(0, path.length - 1));\n  } else {\n    return path.substr(~idx + 1);\n  }\n}\nvar CAPTURING_REGEX_SOURCE = /\\$(\\d+)|\\${(\\d+):\\/(downcase|upcase)}/g;\nvar RegexSource = class {\n  static hasCaptures(regexSource) {\n    if (regexSource === null) {\n      return false;\n    }\n    CAPTURING_REGEX_SOURCE.lastIndex = 0;\n    return CAPTURING_REGEX_SOURCE.test(regexSource);\n  }\n  static replaceCaptures(regexSource, captureSource, captureIndices) {\n    return regexSource.replace(CAPTURING_REGEX_SOURCE, (match, index, commandIndex, command) => {\n      let capture = captureIndices[parseInt(index || commandIndex, 10)];\n      if (capture) {\n        let result = captureSource.substring(capture.start, capture.end);\n        while (result[0] === \".\") {\n          result = result.substring(1);\n        }\n        switch (command) {\n          case \"downcase\":\n            return result.toLowerCase();\n          case \"upcase\":\n            return result.toUpperCase();\n          default:\n            return result;\n        }\n      } else {\n        return match;\n      }\n    });\n  }\n};\nfunction strcmp(a, b) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\nfunction strArrCmp(a, b) {\n  if (a === null && b === null) {\n    return 0;\n  }\n  if (!a) {\n    return -1;\n  }\n  if (!b) {\n    return 1;\n  }\n  let len1 = a.length;\n  let len2 = b.length;\n  if (len1 === len2) {\n    for (let i = 0; i < len1; i++) {\n      let res = strcmp(a[i], b[i]);\n      if (res !== 0) {\n        return res;\n      }\n    }\n    return 0;\n  }\n  return len1 - len2;\n}\nfunction isValidHexColor(hex) {\n  if (/^#[0-9a-f]{6}$/i.test(hex)) {\n    return true;\n  }\n  if (/^#[0-9a-f]{8}$/i.test(hex)) {\n    return true;\n  }\n  if (/^#[0-9a-f]{3}$/i.test(hex)) {\n    return true;\n  }\n  if (/^#[0-9a-f]{4}$/i.test(hex)) {\n    return true;\n  }\n  return false;\n}\nfunction escapeRegExpCharacters(value) {\n  return value.replace(/[\\-\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, \"\\\\$&\");\n}\nvar CachedFn = class {\n  constructor(fn) {\n    this.fn = fn;\n  }\n  cache = /* @__PURE__ */ new Map();\n  get(key) {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n    const value = this.fn(key);\n    this.cache.set(key, value);\n    return value;\n  }\n};\n\n// src/theme.ts\nvar Theme = class {\n  constructor(_colorMap, _defaults, _root) {\n    this._colorMap = _colorMap;\n    this._defaults = _defaults;\n    this._root = _root;\n  }\n  static createFromRawTheme(source, colorMap) {\n    return this.createFromParsedTheme(parseTheme(source), colorMap);\n  }\n  static createFromParsedTheme(source, colorMap) {\n    return resolveParsedThemeRules(source, colorMap);\n  }\n  _cachedMatchRoot = new CachedFn(\n    (scopeName) => this._root.match(scopeName)\n  );\n  getColorMap() {\n    return this._colorMap.getColorMap();\n  }\n  getDefaults() {\n    return this._defaults;\n  }\n  match(scopePath) {\n    if (scopePath === null) {\n      return this._defaults;\n    }\n    const scopeName = scopePath.scopeName;\n    const matchingTrieElements = this._cachedMatchRoot.get(scopeName);\n    const effectiveRule = matchingTrieElements.find(\n      (v) => _scopePathMatchesParentScopes(scopePath.parent, v.parentScopes)\n    );\n    if (!effectiveRule) {\n      return null;\n    }\n    return new StyleAttributes(\n      effectiveRule.fontStyle,\n      effectiveRule.foreground,\n      effectiveRule.background\n    );\n  }\n};\nvar ScopeStack = class _ScopeStack {\n  constructor(parent, scopeName) {\n    this.parent = parent;\n    this.scopeName = scopeName;\n  }\n  static push(path, scopeNames) {\n    for (const name of scopeNames) {\n      path = new _ScopeStack(path, name);\n    }\n    return path;\n  }\n  static from(...segments) {\n    let result = null;\n    for (let i = 0; i < segments.length; i++) {\n      result = new _ScopeStack(result, segments[i]);\n    }\n    return result;\n  }\n  push(scopeName) {\n    return new _ScopeStack(this, scopeName);\n  }\n  getSegments() {\n    let item = this;\n    const result = [];\n    while (item) {\n      result.push(item.scopeName);\n      item = item.parent;\n    }\n    result.reverse();\n    return result;\n  }\n  toString() {\n    return this.getSegments().join(\" \");\n  }\n  extends(other) {\n    if (this === other) {\n      return true;\n    }\n    if (this.parent === null) {\n      return false;\n    }\n    return this.parent.extends(other);\n  }\n  getExtensionIfDefined(base) {\n    const result = [];\n    let item = this;\n    while (item && item !== base) {\n      result.push(item.scopeName);\n      item = item.parent;\n    }\n    return item === base ? result.reverse() : void 0;\n  }\n};\nfunction _scopePathMatchesParentScopes(scopePath, parentScopes) {\n  if (parentScopes.length === 0) {\n    return true;\n  }\n  for (let index = 0; index < parentScopes.length; index++) {\n    let scopePattern = parentScopes[index];\n    let scopeMustMatch = false;\n    if (scopePattern === \">\") {\n      if (index === parentScopes.length - 1) {\n        return false;\n      }\n      scopePattern = parentScopes[++index];\n      scopeMustMatch = true;\n    }\n    while (scopePath) {\n      if (_matchesScope(scopePath.scopeName, scopePattern)) {\n        break;\n      }\n      if (scopeMustMatch) {\n        return false;\n      }\n      scopePath = scopePath.parent;\n    }\n    if (!scopePath) {\n      return false;\n    }\n    scopePath = scopePath.parent;\n  }\n  return true;\n}\nfunction _matchesScope(scopeName, scopePattern) {\n  return scopePattern === scopeName || scopeName.startsWith(scopePattern) && scopeName[scopePattern.length] === \".\";\n}\nvar StyleAttributes = class {\n  constructor(fontStyle, foregroundId, backgroundId) {\n    this.fontStyle = fontStyle;\n    this.foregroundId = foregroundId;\n    this.backgroundId = backgroundId;\n  }\n};\nfunction parseTheme(source) {\n  if (!source) {\n    return [];\n  }\n  if (!source.settings || !Array.isArray(source.settings)) {\n    return [];\n  }\n  let settings = source.settings;\n  let result = [], resultLen = 0;\n  for (let i = 0, len = settings.length; i < len; i++) {\n    let entry = settings[i];\n    if (!entry.settings) {\n      continue;\n    }\n    let scopes;\n    if (typeof entry.scope === \"string\") {\n      let _scope = entry.scope;\n      _scope = _scope.replace(/^[,]+/, \"\");\n      _scope = _scope.replace(/[,]+$/, \"\");\n      scopes = _scope.split(\",\");\n    } else if (Array.isArray(entry.scope)) {\n      scopes = entry.scope;\n    } else {\n      scopes = [\"\"];\n    }\n    let fontStyle = -1 /* NotSet */;\n    if (typeof entry.settings.fontStyle === \"string\") {\n      fontStyle = 0 /* None */;\n      let segments = entry.settings.fontStyle.split(\" \");\n      for (let j = 0, lenJ = segments.length; j < lenJ; j++) {\n        let segment = segments[j];\n        switch (segment) {\n          case \"italic\":\n            fontStyle = fontStyle | 1 /* Italic */;\n            break;\n          case \"bold\":\n            fontStyle = fontStyle | 2 /* Bold */;\n            break;\n          case \"underline\":\n            fontStyle = fontStyle | 4 /* Underline */;\n            break;\n          case \"strikethrough\":\n            fontStyle = fontStyle | 8 /* Strikethrough */;\n            break;\n        }\n      }\n    }\n    let foreground = null;\n    if (typeof entry.settings.foreground === \"string\" && isValidHexColor(entry.settings.foreground)) {\n      foreground = entry.settings.foreground;\n    }\n    let background = null;\n    if (typeof entry.settings.background === \"string\" && isValidHexColor(entry.settings.background)) {\n      background = entry.settings.background;\n    }\n    for (let j = 0, lenJ = scopes.length; j < lenJ; j++) {\n      let _scope = scopes[j].trim();\n      let segments = _scope.split(\" \");\n      let scope = segments[segments.length - 1];\n      let parentScopes = null;\n      if (segments.length > 1) {\n        parentScopes = segments.slice(0, segments.length - 1);\n        parentScopes.reverse();\n      }\n      result[resultLen++] = new ParsedThemeRule(\n        scope,\n        parentScopes,\n        i,\n        fontStyle,\n        foreground,\n        background\n      );\n    }\n  }\n  return result;\n}\nvar ParsedThemeRule = class {\n  constructor(scope, parentScopes, index, fontStyle, foreground, background) {\n    this.scope = scope;\n    this.parentScopes = parentScopes;\n    this.index = index;\n    this.fontStyle = fontStyle;\n    this.foreground = foreground;\n    this.background = background;\n  }\n};\nvar FontStyle = /* @__PURE__ */ ((FontStyle2) => {\n  FontStyle2[FontStyle2[\"NotSet\"] = -1] = \"NotSet\";\n  FontStyle2[FontStyle2[\"None\"] = 0] = \"None\";\n  FontStyle2[FontStyle2[\"Italic\"] = 1] = \"Italic\";\n  FontStyle2[FontStyle2[\"Bold\"] = 2] = \"Bold\";\n  FontStyle2[FontStyle2[\"Underline\"] = 4] = \"Underline\";\n  FontStyle2[FontStyle2[\"Strikethrough\"] = 8] = \"Strikethrough\";\n  return FontStyle2;\n})(FontStyle || {});\nfunction resolveParsedThemeRules(parsedThemeRules, _colorMap) {\n  parsedThemeRules.sort((a, b) => {\n    let r = strcmp(a.scope, b.scope);\n    if (r !== 0) {\n      return r;\n    }\n    r = strArrCmp(a.parentScopes, b.parentScopes);\n    if (r !== 0) {\n      return r;\n    }\n    return a.index - b.index;\n  });\n  let defaultFontStyle = 0 /* None */;\n  let defaultForeground = \"#000000\";\n  let defaultBackground = \"#ffffff\";\n  while (parsedThemeRules.length >= 1 && parsedThemeRules[0].scope === \"\") {\n    let incomingDefaults = parsedThemeRules.shift();\n    if (incomingDefaults.fontStyle !== -1 /* NotSet */) {\n      defaultFontStyle = incomingDefaults.fontStyle;\n    }\n    if (incomingDefaults.foreground !== null) {\n      defaultForeground = incomingDefaults.foreground;\n    }\n    if (incomingDefaults.background !== null) {\n      defaultBackground = incomingDefaults.background;\n    }\n  }\n  let colorMap = new ColorMap(_colorMap);\n  let defaults = new StyleAttributes(defaultFontStyle, colorMap.getId(defaultForeground), colorMap.getId(defaultBackground));\n  let root = new ThemeTrieElement(new ThemeTrieElementRule(0, null, -1 /* NotSet */, 0, 0), []);\n  for (let i = 0, len = parsedThemeRules.length; i < len; i++) {\n    let rule = parsedThemeRules[i];\n    root.insert(0, rule.scope, rule.parentScopes, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n  }\n  return new Theme(colorMap, defaults, root);\n}\nvar ColorMap = class {\n  _isFrozen;\n  _lastColorId;\n  _id2color;\n  _color2id;\n  constructor(_colorMap) {\n    this._lastColorId = 0;\n    this._id2color = [];\n    this._color2id = /* @__PURE__ */ Object.create(null);\n    if (Array.isArray(_colorMap)) {\n      this._isFrozen = true;\n      for (let i = 0, len = _colorMap.length; i < len; i++) {\n        this._color2id[_colorMap[i]] = i;\n        this._id2color[i] = _colorMap[i];\n      }\n    } else {\n      this._isFrozen = false;\n    }\n  }\n  getId(color) {\n    if (color === null) {\n      return 0;\n    }\n    color = color.toUpperCase();\n    let value = this._color2id[color];\n    if (value) {\n      return value;\n    }\n    if (this._isFrozen) {\n      throw new Error(`Missing color in color map - ${color}`);\n    }\n    value = ++this._lastColorId;\n    this._color2id[color] = value;\n    this._id2color[value] = color;\n    return value;\n  }\n  getColorMap() {\n    return this._id2color.slice(0);\n  }\n};\nvar emptyParentScopes = Object.freeze([]);\nvar ThemeTrieElementRule = class _ThemeTrieElementRule {\n  scopeDepth;\n  parentScopes;\n  fontStyle;\n  foreground;\n  background;\n  constructor(scopeDepth, parentScopes, fontStyle, foreground, background) {\n    this.scopeDepth = scopeDepth;\n    this.parentScopes = parentScopes || emptyParentScopes;\n    this.fontStyle = fontStyle;\n    this.foreground = foreground;\n    this.background = background;\n  }\n  clone() {\n    return new _ThemeTrieElementRule(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);\n  }\n  static cloneArr(arr) {\n    let r = [];\n    for (let i = 0, len = arr.length; i < len; i++) {\n      r[i] = arr[i].clone();\n    }\n    return r;\n  }\n  acceptOverwrite(scopeDepth, fontStyle, foreground, background) {\n    if (this.scopeDepth > scopeDepth) {\n      console.log(\"how did this happen?\");\n    } else {\n      this.scopeDepth = scopeDepth;\n    }\n    if (fontStyle !== -1 /* NotSet */) {\n      this.fontStyle = fontStyle;\n    }\n    if (foreground !== 0) {\n      this.foreground = foreground;\n    }\n    if (background !== 0) {\n      this.background = background;\n    }\n  }\n};\nvar ThemeTrieElement = class _ThemeTrieElement {\n  constructor(_mainRule, rulesWithParentScopes = [], _children = {}) {\n    this._mainRule = _mainRule;\n    this._children = _children;\n    this._rulesWithParentScopes = rulesWithParentScopes;\n  }\n  _rulesWithParentScopes;\n  static _cmpBySpecificity(a, b) {\n    if (a.scopeDepth !== b.scopeDepth) {\n      return b.scopeDepth - a.scopeDepth;\n    }\n    let aParentIndex = 0;\n    let bParentIndex = 0;\n    while (true) {\n      if (a.parentScopes[aParentIndex] === \">\") {\n        aParentIndex++;\n      }\n      if (b.parentScopes[bParentIndex] === \">\") {\n        bParentIndex++;\n      }\n      if (aParentIndex >= a.parentScopes.length || bParentIndex >= b.parentScopes.length) {\n        break;\n      }\n      const parentScopeLengthDiff = b.parentScopes[bParentIndex].length - a.parentScopes[aParentIndex].length;\n      if (parentScopeLengthDiff !== 0) {\n        return parentScopeLengthDiff;\n      }\n      aParentIndex++;\n      bParentIndex++;\n    }\n    return b.parentScopes.length - a.parentScopes.length;\n  }\n  match(scope) {\n    if (scope !== \"\") {\n      let dotIndex = scope.indexOf(\".\");\n      let head;\n      let tail;\n      if (dotIndex === -1) {\n        head = scope;\n        tail = \"\";\n      } else {\n        head = scope.substring(0, dotIndex);\n        tail = scope.substring(dotIndex + 1);\n      }\n      if (this._children.hasOwnProperty(head)) {\n        return this._children[head].match(tail);\n      }\n    }\n    const rules = this._rulesWithParentScopes.concat(this._mainRule);\n    rules.sort(_ThemeTrieElement._cmpBySpecificity);\n    return rules;\n  }\n  insert(scopeDepth, scope, parentScopes, fontStyle, foreground, background) {\n    if (scope === \"\") {\n      this._doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background);\n      return;\n    }\n    let dotIndex = scope.indexOf(\".\");\n    let head;\n    let tail;\n    if (dotIndex === -1) {\n      head = scope;\n      tail = \"\";\n    } else {\n      head = scope.substring(0, dotIndex);\n      tail = scope.substring(dotIndex + 1);\n    }\n    let child;\n    if (this._children.hasOwnProperty(head)) {\n      child = this._children[head];\n    } else {\n      child = new _ThemeTrieElement(this._mainRule.clone(), ThemeTrieElementRule.cloneArr(this._rulesWithParentScopes));\n      this._children[head] = child;\n    }\n    child.insert(scopeDepth + 1, tail, parentScopes, fontStyle, foreground, background);\n  }\n  _doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background) {\n    if (parentScopes === null) {\n      this._mainRule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);\n      return;\n    }\n    for (let i = 0, len = this._rulesWithParentScopes.length; i < len; i++) {\n      let rule = this._rulesWithParentScopes[i];\n      if (strArrCmp(rule.parentScopes, parentScopes) === 0) {\n        rule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);\n        return;\n      }\n    }\n    if (fontStyle === -1 /* NotSet */) {\n      fontStyle = this._mainRule.fontStyle;\n    }\n    if (foreground === 0) {\n      foreground = this._mainRule.foreground;\n    }\n    if (background === 0) {\n      background = this._mainRule.background;\n    }\n    this._rulesWithParentScopes.push(new ThemeTrieElementRule(scopeDepth, parentScopes, fontStyle, foreground, background));\n  }\n};\n\n// src/encodedTokenAttributes.ts\nvar EncodedTokenMetadata = class _EncodedTokenMetadata {\n  static toBinaryStr(encodedTokenAttributes) {\n    return encodedTokenAttributes.toString(2).padStart(32, \"0\");\n  }\n  static print(encodedTokenAttributes) {\n    const languageId = _EncodedTokenMetadata.getLanguageId(encodedTokenAttributes);\n    const tokenType = _EncodedTokenMetadata.getTokenType(encodedTokenAttributes);\n    const fontStyle = _EncodedTokenMetadata.getFontStyle(encodedTokenAttributes);\n    const foreground = _EncodedTokenMetadata.getForeground(encodedTokenAttributes);\n    const background = _EncodedTokenMetadata.getBackground(encodedTokenAttributes);\n    console.log({\n      languageId,\n      tokenType,\n      fontStyle,\n      foreground,\n      background\n    });\n  }\n  static getLanguageId(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 255 /* LANGUAGEID_MASK */) >>> 0 /* LANGUAGEID_OFFSET */;\n  }\n  static getTokenType(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 768 /* TOKEN_TYPE_MASK */) >>> 8 /* TOKEN_TYPE_OFFSET */;\n  }\n  static containsBalancedBrackets(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 1024 /* BALANCED_BRACKETS_MASK */) !== 0;\n  }\n  static getFontStyle(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 30720 /* FONT_STYLE_MASK */) >>> 11 /* FONT_STYLE_OFFSET */;\n  }\n  static getForeground(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 16744448 /* FOREGROUND_MASK */) >>> 15 /* FOREGROUND_OFFSET */;\n  }\n  static getBackground(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 4278190080 /* BACKGROUND_MASK */) >>> 24 /* BACKGROUND_OFFSET */;\n  }\n  /**\n   * Updates the fields in `metadata`.\n   * A value of `0`, `NotSet` or `null` indicates that the corresponding field should be left as is.\n   */\n  static set(encodedTokenAttributes, languageId, tokenType, containsBalancedBrackets, fontStyle, foreground, background) {\n    let _languageId = _EncodedTokenMetadata.getLanguageId(encodedTokenAttributes);\n    let _tokenType = _EncodedTokenMetadata.getTokenType(encodedTokenAttributes);\n    let _containsBalancedBracketsBit = _EncodedTokenMetadata.containsBalancedBrackets(encodedTokenAttributes) ? 1 : 0;\n    let _fontStyle = _EncodedTokenMetadata.getFontStyle(encodedTokenAttributes);\n    let _foreground = _EncodedTokenMetadata.getForeground(encodedTokenAttributes);\n    let _background = _EncodedTokenMetadata.getBackground(encodedTokenAttributes);\n    if (languageId !== 0) {\n      _languageId = languageId;\n    }\n    if (tokenType !== 8 /* NotSet */) {\n      _tokenType = fromOptionalTokenType(tokenType);\n    }\n    if (containsBalancedBrackets !== null) {\n      _containsBalancedBracketsBit = containsBalancedBrackets ? 1 : 0;\n    }\n    if (fontStyle !== -1 /* NotSet */) {\n      _fontStyle = fontStyle;\n    }\n    if (foreground !== 0) {\n      _foreground = foreground;\n    }\n    if (background !== 0) {\n      _background = background;\n    }\n    return (_languageId << 0 /* LANGUAGEID_OFFSET */ | _tokenType << 8 /* TOKEN_TYPE_OFFSET */ | _containsBalancedBracketsBit << 10 /* BALANCED_BRACKETS_OFFSET */ | _fontStyle << 11 /* FONT_STYLE_OFFSET */ | _foreground << 15 /* FOREGROUND_OFFSET */ | _background << 24 /* BACKGROUND_OFFSET */) >>> 0;\n  }\n};\nfunction toOptionalTokenType(standardType) {\n  return standardType;\n}\nfunction fromOptionalTokenType(standardType) {\n  return standardType;\n}\n\n// src/matcher.ts\nfunction createMatchers(selector, matchesName) {\n  const results = [];\n  const tokenizer = newTokenizer(selector);\n  let token = tokenizer.next();\n  while (token !== null) {\n    let priority = 0;\n    if (token.length === 2 && token.charAt(1) === \":\") {\n      switch (token.charAt(0)) {\n        case \"R\":\n          priority = 1;\n          break;\n        case \"L\":\n          priority = -1;\n          break;\n        default:\n          console.log(`Unknown priority ${token} in scope selector`);\n      }\n      token = tokenizer.next();\n    }\n    let matcher = parseConjunction();\n    results.push({ matcher, priority });\n    if (token !== \",\") {\n      break;\n    }\n    token = tokenizer.next();\n  }\n  return results;\n  function parseOperand() {\n    if (token === \"-\") {\n      token = tokenizer.next();\n      const expressionToNegate = parseOperand();\n      return (matcherInput) => !!expressionToNegate && !expressionToNegate(matcherInput);\n    }\n    if (token === \"(\") {\n      token = tokenizer.next();\n      const expressionInParents = parseInnerExpression();\n      if (token === \")\") {\n        token = tokenizer.next();\n      }\n      return expressionInParents;\n    }\n    if (isIdentifier(token)) {\n      const identifiers = [];\n      do {\n        identifiers.push(token);\n        token = tokenizer.next();\n      } while (isIdentifier(token));\n      return (matcherInput) => matchesName(identifiers, matcherInput);\n    }\n    return null;\n  }\n  function parseConjunction() {\n    const matchers = [];\n    let matcher = parseOperand();\n    while (matcher) {\n      matchers.push(matcher);\n      matcher = parseOperand();\n    }\n    return (matcherInput) => matchers.every((matcher2) => matcher2(matcherInput));\n  }\n  function parseInnerExpression() {\n    const matchers = [];\n    let matcher = parseConjunction();\n    while (matcher) {\n      matchers.push(matcher);\n      if (token === \"|\" || token === \",\") {\n        do {\n          token = tokenizer.next();\n        } while (token === \"|\" || token === \",\");\n      } else {\n        break;\n      }\n      matcher = parseConjunction();\n    }\n    return (matcherInput) => matchers.some((matcher2) => matcher2(matcherInput));\n  }\n}\nfunction isIdentifier(token) {\n  return !!token && !!token.match(/[\\w\\.:]+/);\n}\nfunction newTokenizer(input) {\n  let regex = /([LR]:|[\\w\\.:][\\w\\.:\\-]*|[\\,\\|\\-\\(\\)])/g;\n  let match = regex.exec(input);\n  return {\n    next: () => {\n      if (!match) {\n        return null;\n      }\n      const res = match[0];\n      match = regex.exec(input);\n      return res;\n    }\n  };\n}\n\n// src/onigLib.ts\nvar FindOption = /* @__PURE__ */ ((FindOption2) => {\n  FindOption2[FindOption2[\"None\"] = 0] = \"None\";\n  FindOption2[FindOption2[\"NotBeginString\"] = 1] = \"NotBeginString\";\n  FindOption2[FindOption2[\"NotEndString\"] = 2] = \"NotEndString\";\n  FindOption2[FindOption2[\"NotBeginPosition\"] = 4] = \"NotBeginPosition\";\n  FindOption2[FindOption2[\"DebugCall\"] = 8] = \"DebugCall\";\n  return FindOption2;\n})(FindOption || {});\nfunction disposeOnigString(str) {\n  if (typeof str.dispose === \"function\") {\n    str.dispose();\n  }\n}\n\n// src/grammar/grammarDependencies.ts\nvar TopLevelRuleReference = class {\n  constructor(scopeName) {\n    this.scopeName = scopeName;\n  }\n  toKey() {\n    return this.scopeName;\n  }\n};\nvar TopLevelRepositoryRuleReference = class {\n  constructor(scopeName, ruleName) {\n    this.scopeName = scopeName;\n    this.ruleName = ruleName;\n  }\n  toKey() {\n    return `${this.scopeName}#${this.ruleName}`;\n  }\n};\nvar ExternalReferenceCollector = class {\n  _references = [];\n  _seenReferenceKeys = /* @__PURE__ */ new Set();\n  get references() {\n    return this._references;\n  }\n  visitedRule = /* @__PURE__ */ new Set();\n  add(reference) {\n    const key = reference.toKey();\n    if (this._seenReferenceKeys.has(key)) {\n      return;\n    }\n    this._seenReferenceKeys.add(key);\n    this._references.push(reference);\n  }\n};\nvar ScopeDependencyProcessor = class {\n  constructor(repo, initialScopeName) {\n    this.repo = repo;\n    this.initialScopeName = initialScopeName;\n    this.seenFullScopeRequests.add(this.initialScopeName);\n    this.Q = [new TopLevelRuleReference(this.initialScopeName)];\n  }\n  seenFullScopeRequests = /* @__PURE__ */ new Set();\n  seenPartialScopeRequests = /* @__PURE__ */ new Set();\n  Q;\n  processQueue() {\n    const q = this.Q;\n    this.Q = [];\n    const deps = new ExternalReferenceCollector();\n    for (const dep of q) {\n      collectReferencesOfReference(dep, this.initialScopeName, this.repo, deps);\n    }\n    for (const dep of deps.references) {\n      if (dep instanceof TopLevelRuleReference) {\n        if (this.seenFullScopeRequests.has(dep.scopeName)) {\n          continue;\n        }\n        this.seenFullScopeRequests.add(dep.scopeName);\n        this.Q.push(dep);\n      } else {\n        if (this.seenFullScopeRequests.has(dep.scopeName)) {\n          continue;\n        }\n        if (this.seenPartialScopeRequests.has(dep.toKey())) {\n          continue;\n        }\n        this.seenPartialScopeRequests.add(dep.toKey());\n        this.Q.push(dep);\n      }\n    }\n  }\n};\nfunction collectReferencesOfReference(reference, baseGrammarScopeName, repo, result) {\n  const selfGrammar = repo.lookup(reference.scopeName);\n  if (!selfGrammar) {\n    if (reference.scopeName === baseGrammarScopeName) {\n      throw new Error(`No grammar provided for <${baseGrammarScopeName}>`);\n    }\n    return;\n  }\n  const baseGrammar = repo.lookup(baseGrammarScopeName);\n  if (reference instanceof TopLevelRuleReference) {\n    collectExternalReferencesInTopLevelRule({ baseGrammar, selfGrammar }, result);\n  } else {\n    collectExternalReferencesInTopLevelRepositoryRule(\n      reference.ruleName,\n      { baseGrammar, selfGrammar, repository: selfGrammar.repository },\n      result\n    );\n  }\n  const injections = repo.injections(reference.scopeName);\n  if (injections) {\n    for (const injection of injections) {\n      result.add(new TopLevelRuleReference(injection));\n    }\n  }\n}\nfunction collectExternalReferencesInTopLevelRepositoryRule(ruleName, context, result) {\n  if (context.repository && context.repository[ruleName]) {\n    const rule = context.repository[ruleName];\n    collectExternalReferencesInRules([rule], context, result);\n  }\n}\nfunction collectExternalReferencesInTopLevelRule(context, result) {\n  if (context.selfGrammar.patterns && Array.isArray(context.selfGrammar.patterns)) {\n    collectExternalReferencesInRules(\n      context.selfGrammar.patterns,\n      { ...context, repository: context.selfGrammar.repository },\n      result\n    );\n  }\n  if (context.selfGrammar.injections) {\n    collectExternalReferencesInRules(\n      Object.values(context.selfGrammar.injections),\n      { ...context, repository: context.selfGrammar.repository },\n      result\n    );\n  }\n}\nfunction collectExternalReferencesInRules(rules, context, result) {\n  for (const rule of rules) {\n    if (result.visitedRule.has(rule)) {\n      continue;\n    }\n    result.visitedRule.add(rule);\n    const patternRepository = rule.repository ? mergeObjects({}, context.repository, rule.repository) : context.repository;\n    if (Array.isArray(rule.patterns)) {\n      collectExternalReferencesInRules(rule.patterns, { ...context, repository: patternRepository }, result);\n    }\n    const include = rule.include;\n    if (!include) {\n      continue;\n    }\n    const reference = parseInclude(include);\n    switch (reference.kind) {\n      case 0 /* Base */:\n        collectExternalReferencesInTopLevelRule({ ...context, selfGrammar: context.baseGrammar }, result);\n        break;\n      case 1 /* Self */:\n        collectExternalReferencesInTopLevelRule(context, result);\n        break;\n      case 2 /* RelativeReference */:\n        collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, { ...context, repository: patternRepository }, result);\n        break;\n      case 3 /* TopLevelReference */:\n      case 4 /* TopLevelRepositoryReference */:\n        const selfGrammar = reference.scopeName === context.selfGrammar.scopeName ? context.selfGrammar : reference.scopeName === context.baseGrammar.scopeName ? context.baseGrammar : void 0;\n        if (selfGrammar) {\n          const newContext = { baseGrammar: context.baseGrammar, selfGrammar, repository: patternRepository };\n          if (reference.kind === 4 /* TopLevelRepositoryReference */) {\n            collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, newContext, result);\n          } else {\n            collectExternalReferencesInTopLevelRule(newContext, result);\n          }\n        } else {\n          if (reference.kind === 4 /* TopLevelRepositoryReference */) {\n            result.add(new TopLevelRepositoryRuleReference(reference.scopeName, reference.ruleName));\n          } else {\n            result.add(new TopLevelRuleReference(reference.scopeName));\n          }\n        }\n        break;\n    }\n  }\n}\nvar BaseReference = class {\n  kind = 0 /* Base */;\n};\nvar SelfReference = class {\n  kind = 1 /* Self */;\n};\nvar RelativeReference = class {\n  constructor(ruleName) {\n    this.ruleName = ruleName;\n  }\n  kind = 2 /* RelativeReference */;\n};\nvar TopLevelReference = class {\n  constructor(scopeName) {\n    this.scopeName = scopeName;\n  }\n  kind = 3 /* TopLevelReference */;\n};\nvar TopLevelRepositoryReference = class {\n  constructor(scopeName, ruleName) {\n    this.scopeName = scopeName;\n    this.ruleName = ruleName;\n  }\n  kind = 4 /* TopLevelRepositoryReference */;\n};\nfunction parseInclude(include) {\n  if (include === \"$base\") {\n    return new BaseReference();\n  } else if (include === \"$self\") {\n    return new SelfReference();\n  }\n  const indexOfSharp = include.indexOf(\"#\");\n  if (indexOfSharp === -1) {\n    return new TopLevelReference(include);\n  } else if (indexOfSharp === 0) {\n    return new RelativeReference(include.substring(1));\n  } else {\n    const scopeName = include.substring(0, indexOfSharp);\n    const ruleName = include.substring(indexOfSharp + 1);\n    return new TopLevelRepositoryReference(scopeName, ruleName);\n  }\n}\n\n// src/rule.ts\nvar HAS_BACK_REFERENCES = /\\\\(\\d+)/;\nvar BACK_REFERENCING_END = /\\\\(\\d+)/g;\nvar ruleIdSymbol = Symbol(\"RuleId\");\nvar endRuleId = -1;\nvar whileRuleId = -2;\nfunction ruleIdFromNumber(id) {\n  return id;\n}\nfunction ruleIdToNumber(id) {\n  return id;\n}\nvar Rule = class {\n  $location;\n  id;\n  _nameIsCapturing;\n  _name;\n  _contentNameIsCapturing;\n  _contentName;\n  constructor($location, id, name, contentName) {\n    this.$location = $location;\n    this.id = id;\n    this._name = name || null;\n    this._nameIsCapturing = RegexSource.hasCaptures(this._name);\n    this._contentName = contentName || null;\n    this._contentNameIsCapturing = RegexSource.hasCaptures(this._contentName);\n  }\n  get debugName() {\n    const location = this.$location ? `${basename(this.$location.filename)}:${this.$location.line}` : \"unknown\";\n    return `${this.constructor.name}#${this.id} @ ${location}`;\n  }\n  getName(lineText, captureIndices) {\n    if (!this._nameIsCapturing || this._name === null || lineText === null || captureIndices === null) {\n      return this._name;\n    }\n    return RegexSource.replaceCaptures(this._name, lineText, captureIndices);\n  }\n  getContentName(lineText, captureIndices) {\n    if (!this._contentNameIsCapturing || this._contentName === null) {\n      return this._contentName;\n    }\n    return RegexSource.replaceCaptures(this._contentName, lineText, captureIndices);\n  }\n};\nvar CaptureRule = class extends Rule {\n  retokenizeCapturedWithRuleId;\n  constructor($location, id, name, contentName, retokenizeCapturedWithRuleId) {\n    super($location, id, name, contentName);\n    this.retokenizeCapturedWithRuleId = retokenizeCapturedWithRuleId;\n  }\n  dispose() {\n  }\n  collectPatterns(grammar, out) {\n    throw new Error(\"Not supported!\");\n  }\n  compile(grammar, endRegexSource) {\n    throw new Error(\"Not supported!\");\n  }\n  compileAG(grammar, endRegexSource, allowA, allowG) {\n    throw new Error(\"Not supported!\");\n  }\n};\nvar MatchRule = class extends Rule {\n  _match;\n  captures;\n  _cachedCompiledPatterns;\n  constructor($location, id, name, match, captures) {\n    super($location, id, name, null);\n    this._match = new RegExpSource(match, this.id);\n    this.captures = captures;\n    this._cachedCompiledPatterns = null;\n  }\n  dispose() {\n    if (this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns.dispose();\n      this._cachedCompiledPatterns = null;\n    }\n  }\n  get debugMatchRegExp() {\n    return `${this._match.source}`;\n  }\n  collectPatterns(grammar, out) {\n    out.push(this._match);\n  }\n  compile(grammar, endRegexSource) {\n    return this._getCachedCompiledPatterns(grammar).compile(grammar);\n  }\n  compileAG(grammar, endRegexSource, allowA, allowG) {\n    return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n  }\n  _getCachedCompiledPatterns(grammar) {\n    if (!this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns = new RegExpSourceList();\n      this.collectPatterns(grammar, this._cachedCompiledPatterns);\n    }\n    return this._cachedCompiledPatterns;\n  }\n};\nvar IncludeOnlyRule = class extends Rule {\n  hasMissingPatterns;\n  patterns;\n  _cachedCompiledPatterns;\n  constructor($location, id, name, contentName, patterns) {\n    super($location, id, name, contentName);\n    this.patterns = patterns.patterns;\n    this.hasMissingPatterns = patterns.hasMissingPatterns;\n    this._cachedCompiledPatterns = null;\n  }\n  dispose() {\n    if (this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns.dispose();\n      this._cachedCompiledPatterns = null;\n    }\n  }\n  collectPatterns(grammar, out) {\n    for (const pattern of this.patterns) {\n      const rule = grammar.getRule(pattern);\n      rule.collectPatterns(grammar, out);\n    }\n  }\n  compile(grammar, endRegexSource) {\n    return this._getCachedCompiledPatterns(grammar).compile(grammar);\n  }\n  compileAG(grammar, endRegexSource, allowA, allowG) {\n    return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n  }\n  _getCachedCompiledPatterns(grammar) {\n    if (!this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns = new RegExpSourceList();\n      this.collectPatterns(grammar, this._cachedCompiledPatterns);\n    }\n    return this._cachedCompiledPatterns;\n  }\n};\nvar BeginEndRule = class extends Rule {\n  _begin;\n  beginCaptures;\n  _end;\n  endHasBackReferences;\n  endCaptures;\n  applyEndPatternLast;\n  hasMissingPatterns;\n  patterns;\n  _cachedCompiledPatterns;\n  constructor($location, id, name, contentName, begin, beginCaptures, end, endCaptures, applyEndPatternLast, patterns) {\n    super($location, id, name, contentName);\n    this._begin = new RegExpSource(begin, this.id);\n    this.beginCaptures = beginCaptures;\n    this._end = new RegExpSource(end ? end : \"\\uFFFF\", -1);\n    this.endHasBackReferences = this._end.hasBackReferences;\n    this.endCaptures = endCaptures;\n    this.applyEndPatternLast = applyEndPatternLast || false;\n    this.patterns = patterns.patterns;\n    this.hasMissingPatterns = patterns.hasMissingPatterns;\n    this._cachedCompiledPatterns = null;\n  }\n  dispose() {\n    if (this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns.dispose();\n      this._cachedCompiledPatterns = null;\n    }\n  }\n  get debugBeginRegExp() {\n    return `${this._begin.source}`;\n  }\n  get debugEndRegExp() {\n    return `${this._end.source}`;\n  }\n  getEndWithResolvedBackReferences(lineText, captureIndices) {\n    return this._end.resolveBackReferences(lineText, captureIndices);\n  }\n  collectPatterns(grammar, out) {\n    out.push(this._begin);\n  }\n  compile(grammar, endRegexSource) {\n    return this._getCachedCompiledPatterns(grammar, endRegexSource).compile(grammar);\n  }\n  compileAG(grammar, endRegexSource, allowA, allowG) {\n    return this._getCachedCompiledPatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);\n  }\n  _getCachedCompiledPatterns(grammar, endRegexSource) {\n    if (!this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns = new RegExpSourceList();\n      for (const pattern of this.patterns) {\n        const rule = grammar.getRule(pattern);\n        rule.collectPatterns(grammar, this._cachedCompiledPatterns);\n      }\n      if (this.applyEndPatternLast) {\n        this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end);\n      } else {\n        this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);\n      }\n    }\n    if (this._end.hasBackReferences) {\n      if (this.applyEndPatternLast) {\n        this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, endRegexSource);\n      } else {\n        this._cachedCompiledPatterns.setSource(0, endRegexSource);\n      }\n    }\n    return this._cachedCompiledPatterns;\n  }\n};\nvar BeginWhileRule = class extends Rule {\n  _begin;\n  beginCaptures;\n  whileCaptures;\n  _while;\n  whileHasBackReferences;\n  hasMissingPatterns;\n  patterns;\n  _cachedCompiledPatterns;\n  _cachedCompiledWhilePatterns;\n  constructor($location, id, name, contentName, begin, beginCaptures, _while, whileCaptures, patterns) {\n    super($location, id, name, contentName);\n    this._begin = new RegExpSource(begin, this.id);\n    this.beginCaptures = beginCaptures;\n    this.whileCaptures = whileCaptures;\n    this._while = new RegExpSource(_while, whileRuleId);\n    this.whileHasBackReferences = this._while.hasBackReferences;\n    this.patterns = patterns.patterns;\n    this.hasMissingPatterns = patterns.hasMissingPatterns;\n    this._cachedCompiledPatterns = null;\n    this._cachedCompiledWhilePatterns = null;\n  }\n  dispose() {\n    if (this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns.dispose();\n      this._cachedCompiledPatterns = null;\n    }\n    if (this._cachedCompiledWhilePatterns) {\n      this._cachedCompiledWhilePatterns.dispose();\n      this._cachedCompiledWhilePatterns = null;\n    }\n  }\n  get debugBeginRegExp() {\n    return `${this._begin.source}`;\n  }\n  get debugWhileRegExp() {\n    return `${this._while.source}`;\n  }\n  getWhileWithResolvedBackReferences(lineText, captureIndices) {\n    return this._while.resolveBackReferences(lineText, captureIndices);\n  }\n  collectPatterns(grammar, out) {\n    out.push(this._begin);\n  }\n  compile(grammar, endRegexSource) {\n    return this._getCachedCompiledPatterns(grammar).compile(grammar);\n  }\n  compileAG(grammar, endRegexSource, allowA, allowG) {\n    return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n  }\n  _getCachedCompiledPatterns(grammar) {\n    if (!this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns = new RegExpSourceList();\n      for (const pattern of this.patterns) {\n        const rule = grammar.getRule(pattern);\n        rule.collectPatterns(grammar, this._cachedCompiledPatterns);\n      }\n    }\n    return this._cachedCompiledPatterns;\n  }\n  compileWhile(grammar, endRegexSource) {\n    return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compile(grammar);\n  }\n  compileWhileAG(grammar, endRegexSource, allowA, allowG) {\n    return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);\n  }\n  _getCachedCompiledWhilePatterns(grammar, endRegexSource) {\n    if (!this._cachedCompiledWhilePatterns) {\n      this._cachedCompiledWhilePatterns = new RegExpSourceList();\n      this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while);\n    }\n    if (this._while.hasBackReferences) {\n      this._cachedCompiledWhilePatterns.setSource(0, endRegexSource ? endRegexSource : \"\\uFFFF\");\n    }\n    return this._cachedCompiledWhilePatterns;\n  }\n};\nvar RuleFactory = class _RuleFactory {\n  static createCaptureRule(helper, $location, name, contentName, retokenizeCapturedWithRuleId) {\n    return helper.registerRule((id) => {\n      return new CaptureRule($location, id, name, contentName, retokenizeCapturedWithRuleId);\n    });\n  }\n  static getCompiledRuleId(desc, helper, repository) {\n    if (!desc.id) {\n      helper.registerRule((id) => {\n        desc.id = id;\n        if (desc.match) {\n          return new MatchRule(\n            desc.$vscodeTextmateLocation,\n            desc.id,\n            desc.name,\n            desc.match,\n            _RuleFactory._compileCaptures(desc.captures, helper, repository)\n          );\n        }\n        if (typeof desc.begin === \"undefined\") {\n          if (desc.repository) {\n            repository = mergeObjects({}, repository, desc.repository);\n          }\n          let patterns = desc.patterns;\n          if (typeof patterns === \"undefined\" && desc.include) {\n            patterns = [{ include: desc.include }];\n          }\n          return new IncludeOnlyRule(\n            desc.$vscodeTextmateLocation,\n            desc.id,\n            desc.name,\n            desc.contentName,\n            _RuleFactory._compilePatterns(patterns, helper, repository)\n          );\n        }\n        if (desc.while) {\n          return new BeginWhileRule(\n            desc.$vscodeTextmateLocation,\n            desc.id,\n            desc.name,\n            desc.contentName,\n            desc.begin,\n            _RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository),\n            desc.while,\n            _RuleFactory._compileCaptures(desc.whileCaptures || desc.captures, helper, repository),\n            _RuleFactory._compilePatterns(desc.patterns, helper, repository)\n          );\n        }\n        return new BeginEndRule(\n          desc.$vscodeTextmateLocation,\n          desc.id,\n          desc.name,\n          desc.contentName,\n          desc.begin,\n          _RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository),\n          desc.end,\n          _RuleFactory._compileCaptures(desc.endCaptures || desc.captures, helper, repository),\n          desc.applyEndPatternLast,\n          _RuleFactory._compilePatterns(desc.patterns, helper, repository)\n        );\n      });\n    }\n    return desc.id;\n  }\n  static _compileCaptures(captures, helper, repository) {\n    let r = [];\n    if (captures) {\n      let maximumCaptureId = 0;\n      for (const captureId in captures) {\n        if (captureId === \"$vscodeTextmateLocation\") {\n          continue;\n        }\n        const numericCaptureId = parseInt(captureId, 10);\n        if (numericCaptureId > maximumCaptureId) {\n          maximumCaptureId = numericCaptureId;\n        }\n      }\n      for (let i = 0; i <= maximumCaptureId; i++) {\n        r[i] = null;\n      }\n      for (const captureId in captures) {\n        if (captureId === \"$vscodeTextmateLocation\") {\n          continue;\n        }\n        const numericCaptureId = parseInt(captureId, 10);\n        let retokenizeCapturedWithRuleId = 0;\n        if (captures[captureId].patterns) {\n          retokenizeCapturedWithRuleId = _RuleFactory.getCompiledRuleId(captures[captureId], helper, repository);\n        }\n        r[numericCaptureId] = _RuleFactory.createCaptureRule(helper, captures[captureId].$vscodeTextmateLocation, captures[captureId].name, captures[captureId].contentName, retokenizeCapturedWithRuleId);\n      }\n    }\n    return r;\n  }\n  static _compilePatterns(patterns, helper, repository) {\n    let r = [];\n    if (patterns) {\n      for (let i = 0, len = patterns.length; i < len; i++) {\n        const pattern = patterns[i];\n        let ruleId = -1;\n        if (pattern.include) {\n          const reference = parseInclude(pattern.include);\n          switch (reference.kind) {\n            case 0 /* Base */:\n            case 1 /* Self */:\n              ruleId = _RuleFactory.getCompiledRuleId(repository[pattern.include], helper, repository);\n              break;\n            case 2 /* RelativeReference */:\n              let localIncludedRule = repository[reference.ruleName];\n              if (localIncludedRule) {\n                ruleId = _RuleFactory.getCompiledRuleId(localIncludedRule, helper, repository);\n              } else {\n              }\n              break;\n            case 3 /* TopLevelReference */:\n            case 4 /* TopLevelRepositoryReference */:\n              const externalGrammarName = reference.scopeName;\n              const externalGrammarInclude = reference.kind === 4 /* TopLevelRepositoryReference */ ? reference.ruleName : null;\n              const externalGrammar = helper.getExternalGrammar(externalGrammarName, repository);\n              if (externalGrammar) {\n                if (externalGrammarInclude) {\n                  let externalIncludedRule = externalGrammar.repository[externalGrammarInclude];\n                  if (externalIncludedRule) {\n                    ruleId = _RuleFactory.getCompiledRuleId(externalIncludedRule, helper, externalGrammar.repository);\n                  } else {\n                  }\n                } else {\n                  ruleId = _RuleFactory.getCompiledRuleId(externalGrammar.repository.$self, helper, externalGrammar.repository);\n                }\n              } else {\n              }\n              break;\n          }\n        } else {\n          ruleId = _RuleFactory.getCompiledRuleId(pattern, helper, repository);\n        }\n        if (ruleId !== -1) {\n          const rule = helper.getRule(ruleId);\n          let skipRule = false;\n          if (rule instanceof IncludeOnlyRule || rule instanceof BeginEndRule || rule instanceof BeginWhileRule) {\n            if (rule.hasMissingPatterns && rule.patterns.length === 0) {\n              skipRule = true;\n            }\n          }\n          if (skipRule) {\n            continue;\n          }\n          r.push(ruleId);\n        }\n      }\n    }\n    return {\n      patterns: r,\n      hasMissingPatterns: (patterns ? patterns.length : 0) !== r.length\n    };\n  }\n};\nvar RegExpSource = class _RegExpSource {\n  source;\n  ruleId;\n  hasAnchor;\n  hasBackReferences;\n  _anchorCache;\n  constructor(regExpSource, ruleId) {\n    if (regExpSource && typeof regExpSource === \"string\") {\n      const len = regExpSource.length;\n      let lastPushedPos = 0;\n      let output = [];\n      let hasAnchor = false;\n      for (let pos = 0; pos < len; pos++) {\n        const ch = regExpSource.charAt(pos);\n        if (ch === \"\\\\\") {\n          if (pos + 1 < len) {\n            const nextCh = regExpSource.charAt(pos + 1);\n            if (nextCh === \"z\") {\n              output.push(regExpSource.substring(lastPushedPos, pos));\n              output.push(\"$(?!\\\\n)(?<!\\\\n)\");\n              lastPushedPos = pos + 2;\n            } else if (nextCh === \"A\" || nextCh === \"G\") {\n              hasAnchor = true;\n            }\n            pos++;\n          }\n        }\n      }\n      this.hasAnchor = hasAnchor;\n      if (lastPushedPos === 0) {\n        this.source = regExpSource;\n      } else {\n        output.push(regExpSource.substring(lastPushedPos, len));\n        this.source = output.join(\"\");\n      }\n    } else {\n      this.hasAnchor = false;\n      this.source = regExpSource;\n    }\n    if (this.hasAnchor) {\n      this._anchorCache = this._buildAnchorCache();\n    } else {\n      this._anchorCache = null;\n    }\n    this.ruleId = ruleId;\n    if (typeof this.source === \"string\") {\n      this.hasBackReferences = HAS_BACK_REFERENCES.test(this.source);\n    } else {\n      this.hasBackReferences = false;\n    }\n  }\n  clone() {\n    return new _RegExpSource(this.source, this.ruleId);\n  }\n  setSource(newSource) {\n    if (this.source === newSource) {\n      return;\n    }\n    this.source = newSource;\n    if (this.hasAnchor) {\n      this._anchorCache = this._buildAnchorCache();\n    }\n  }\n  resolveBackReferences(lineText, captureIndices) {\n    if (typeof this.source !== \"string\") {\n      throw new Error(\"This method should only be called if the source is a string\");\n    }\n    let capturedValues = captureIndices.map((capture) => {\n      return lineText.substring(capture.start, capture.end);\n    });\n    BACK_REFERENCING_END.lastIndex = 0;\n    return this.source.replace(BACK_REFERENCING_END, (match, g1) => {\n      return escapeRegExpCharacters(capturedValues[parseInt(g1, 10)] || \"\");\n    });\n  }\n  _buildAnchorCache() {\n    if (typeof this.source !== \"string\") {\n      throw new Error(\"This method should only be called if the source is a string\");\n    }\n    let A0_G0_result = [];\n    let A0_G1_result = [];\n    let A1_G0_result = [];\n    let A1_G1_result = [];\n    let pos, len, ch, nextCh;\n    for (pos = 0, len = this.source.length; pos < len; pos++) {\n      ch = this.source.charAt(pos);\n      A0_G0_result[pos] = ch;\n      A0_G1_result[pos] = ch;\n      A1_G0_result[pos] = ch;\n      A1_G1_result[pos] = ch;\n      if (ch === \"\\\\\") {\n        if (pos + 1 < len) {\n          nextCh = this.source.charAt(pos + 1);\n          if (nextCh === \"A\") {\n            A0_G0_result[pos + 1] = \"\\uFFFF\";\n            A0_G1_result[pos + 1] = \"\\uFFFF\";\n            A1_G0_result[pos + 1] = \"A\";\n            A1_G1_result[pos + 1] = \"A\";\n          } else if (nextCh === \"G\") {\n            A0_G0_result[pos + 1] = \"\\uFFFF\";\n            A0_G1_result[pos + 1] = \"G\";\n            A1_G0_result[pos + 1] = \"\\uFFFF\";\n            A1_G1_result[pos + 1] = \"G\";\n          } else {\n            A0_G0_result[pos + 1] = nextCh;\n            A0_G1_result[pos + 1] = nextCh;\n            A1_G0_result[pos + 1] = nextCh;\n            A1_G1_result[pos + 1] = nextCh;\n          }\n          pos++;\n        }\n      }\n    }\n    return {\n      A0_G0: A0_G0_result.join(\"\"),\n      A0_G1: A0_G1_result.join(\"\"),\n      A1_G0: A1_G0_result.join(\"\"),\n      A1_G1: A1_G1_result.join(\"\")\n    };\n  }\n  resolveAnchors(allowA, allowG) {\n    if (!this.hasAnchor || !this._anchorCache || typeof this.source !== \"string\") {\n      return this.source;\n    }\n    if (allowA) {\n      if (allowG) {\n        return this._anchorCache.A1_G1;\n      } else {\n        return this._anchorCache.A1_G0;\n      }\n    } else {\n      if (allowG) {\n        return this._anchorCache.A0_G1;\n      } else {\n        return this._anchorCache.A0_G0;\n      }\n    }\n  }\n};\nvar RegExpSourceList = class {\n  _items;\n  _hasAnchors;\n  _cached;\n  _anchorCache;\n  constructor() {\n    this._items = [];\n    this._hasAnchors = false;\n    this._cached = null;\n    this._anchorCache = {\n      A0_G0: null,\n      A0_G1: null,\n      A1_G0: null,\n      A1_G1: null\n    };\n  }\n  dispose() {\n    this._disposeCaches();\n  }\n  _disposeCaches() {\n    if (this._cached) {\n      this._cached.dispose();\n      this._cached = null;\n    }\n    if (this._anchorCache.A0_G0) {\n      this._anchorCache.A0_G0.dispose();\n      this._anchorCache.A0_G0 = null;\n    }\n    if (this._anchorCache.A0_G1) {\n      this._anchorCache.A0_G1.dispose();\n      this._anchorCache.A0_G1 = null;\n    }\n    if (this._anchorCache.A1_G0) {\n      this._anchorCache.A1_G0.dispose();\n      this._anchorCache.A1_G0 = null;\n    }\n    if (this._anchorCache.A1_G1) {\n      this._anchorCache.A1_G1.dispose();\n      this._anchorCache.A1_G1 = null;\n    }\n  }\n  push(item) {\n    this._items.push(item);\n    this._hasAnchors = this._hasAnchors || item.hasAnchor;\n  }\n  unshift(item) {\n    this._items.unshift(item);\n    this._hasAnchors = this._hasAnchors || item.hasAnchor;\n  }\n  length() {\n    return this._items.length;\n  }\n  setSource(index, newSource) {\n    if (this._items[index].source !== newSource) {\n      this._disposeCaches();\n      this._items[index].setSource(newSource);\n    }\n  }\n  compile(onigLib) {\n    if (!this._cached) {\n      let regExps = this._items.map((e) => e.source);\n      this._cached = new CompiledRule(onigLib, regExps, this._items.map((e) => e.ruleId));\n    }\n    return this._cached;\n  }\n  compileAG(onigLib, allowA, allowG) {\n    if (!this._hasAnchors) {\n      return this.compile(onigLib);\n    } else {\n      if (allowA) {\n        if (allowG) {\n          if (!this._anchorCache.A1_G1) {\n            this._anchorCache.A1_G1 = this._resolveAnchors(onigLib, allowA, allowG);\n          }\n          return this._anchorCache.A1_G1;\n        } else {\n          if (!this._anchorCache.A1_G0) {\n            this._anchorCache.A1_G0 = this._resolveAnchors(onigLib, allowA, allowG);\n          }\n          return this._anchorCache.A1_G0;\n        }\n      } else {\n        if (allowG) {\n          if (!this._anchorCache.A0_G1) {\n            this._anchorCache.A0_G1 = this._resolveAnchors(onigLib, allowA, allowG);\n          }\n          return this._anchorCache.A0_G1;\n        } else {\n          if (!this._anchorCache.A0_G0) {\n            this._anchorCache.A0_G0 = this._resolveAnchors(onigLib, allowA, allowG);\n          }\n          return this._anchorCache.A0_G0;\n        }\n      }\n    }\n  }\n  _resolveAnchors(onigLib, allowA, allowG) {\n    let regExps = this._items.map((e) => e.resolveAnchors(allowA, allowG));\n    return new CompiledRule(onigLib, regExps, this._items.map((e) => e.ruleId));\n  }\n};\nvar CompiledRule = class {\n  constructor(onigLib, regExps, rules) {\n    this.regExps = regExps;\n    this.rules = rules;\n    this.scanner = onigLib.createOnigScanner(regExps);\n  }\n  scanner;\n  dispose() {\n    if (typeof this.scanner.dispose === \"function\") {\n      this.scanner.dispose();\n    }\n  }\n  toString() {\n    const r = [];\n    for (let i = 0, len = this.rules.length; i < len; i++) {\n      r.push(\"   - \" + this.rules[i] + \": \" + this.regExps[i]);\n    }\n    return r.join(\"\\n\");\n  }\n  findNextMatchSync(string, startPosition, options) {\n    const result = this.scanner.findNextMatchSync(string, startPosition, options);\n    if (!result) {\n      return null;\n    }\n    return {\n      ruleId: this.rules[result.index],\n      captureIndices: result.captureIndices\n    };\n  }\n};\n\n// src/grammar/basicScopesAttributeProvider.ts\nvar BasicScopeAttributes = class {\n  constructor(languageId, tokenType) {\n    this.languageId = languageId;\n    this.tokenType = tokenType;\n  }\n};\nvar BasicScopeAttributesProvider = class _BasicScopeAttributesProvider {\n  _defaultAttributes;\n  _embeddedLanguagesMatcher;\n  constructor(initialLanguageId, embeddedLanguages) {\n    this._defaultAttributes = new BasicScopeAttributes(initialLanguageId, 8 /* NotSet */);\n    this._embeddedLanguagesMatcher = new ScopeMatcher(Object.entries(embeddedLanguages || {}));\n  }\n  getDefaultAttributes() {\n    return this._defaultAttributes;\n  }\n  getBasicScopeAttributes(scopeName) {\n    if (scopeName === null) {\n      return _BasicScopeAttributesProvider._NULL_SCOPE_METADATA;\n    }\n    return this._getBasicScopeAttributes.get(scopeName);\n  }\n  static _NULL_SCOPE_METADATA = new BasicScopeAttributes(0, 0);\n  _getBasicScopeAttributes = new CachedFn((scopeName) => {\n    const languageId = this._scopeToLanguage(scopeName);\n    const standardTokenType = this._toStandardTokenType(scopeName);\n    return new BasicScopeAttributes(languageId, standardTokenType);\n  });\n  /**\n   * Given a produced TM scope, return the language that token describes or null if unknown.\n   * e.g. source.html => html, source.css.embedded.html => css, punctuation.definition.tag.html => null\n   */\n  _scopeToLanguage(scope) {\n    return this._embeddedLanguagesMatcher.match(scope) || 0;\n  }\n  _toStandardTokenType(scopeName) {\n    const m = scopeName.match(_BasicScopeAttributesProvider.STANDARD_TOKEN_TYPE_REGEXP);\n    if (!m) {\n      return 8 /* NotSet */;\n    }\n    switch (m[1]) {\n      case \"comment\":\n        return 1 /* Comment */;\n      case \"string\":\n        return 2 /* String */;\n      case \"regex\":\n        return 3 /* RegEx */;\n      case \"meta.embedded\":\n        return 0 /* Other */;\n    }\n    throw new Error(\"Unexpected match for standard token type!\");\n  }\n  static STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|meta\\.embedded)\\b/;\n};\nvar ScopeMatcher = class {\n  values;\n  scopesRegExp;\n  constructor(values) {\n    if (values.length === 0) {\n      this.values = null;\n      this.scopesRegExp = null;\n    } else {\n      this.values = new Map(values);\n      const escapedScopes = values.map(\n        ([scopeName, value]) => escapeRegExpCharacters(scopeName)\n      );\n      escapedScopes.sort();\n      escapedScopes.reverse();\n      this.scopesRegExp = new RegExp(\n        `^((${escapedScopes.join(\")|(\")}))($|\\\\.)`,\n        \"\"\n      );\n    }\n  }\n  match(scope) {\n    if (!this.scopesRegExp) {\n      return void 0;\n    }\n    const m = scope.match(this.scopesRegExp);\n    if (!m) {\n      return void 0;\n    }\n    return this.values.get(m[1]);\n  }\n};\n\n// src/debug.ts\nvar DebugFlags = {\n  InDebugMode: typeof process !== \"undefined\" && !!process.env[\"VSCODE_TEXTMATE_DEBUG\"]\n};\nvar UseOnigurumaFindOptions = false;\n\n// src/grammar/tokenizeString.ts\nvar TokenizeStringResult = class {\n  constructor(stack, stoppedEarly) {\n    this.stack = stack;\n    this.stoppedEarly = stoppedEarly;\n  }\n};\nfunction _tokenizeString(grammar, lineText, isFirstLine, linePos, stack, lineTokens, checkWhileConditions, timeLimit) {\n  const lineLength = lineText.content.length;\n  let STOP = false;\n  let anchorPosition = -1;\n  if (checkWhileConditions) {\n    const whileCheckResult = _checkWhileConditions(\n      grammar,\n      lineText,\n      isFirstLine,\n      linePos,\n      stack,\n      lineTokens\n    );\n    stack = whileCheckResult.stack;\n    linePos = whileCheckResult.linePos;\n    isFirstLine = whileCheckResult.isFirstLine;\n    anchorPosition = whileCheckResult.anchorPosition;\n  }\n  const startTime = Date.now();\n  while (!STOP) {\n    if (timeLimit !== 0) {\n      const elapsedTime = Date.now() - startTime;\n      if (elapsedTime > timeLimit) {\n        return new TokenizeStringResult(stack, true);\n      }\n    }\n    scanNext();\n  }\n  return new TokenizeStringResult(stack, false);\n  function scanNext() {\n    if (false) {\n      console.log(\"\");\n      console.log(\n        `@@scanNext ${linePos}: |${lineText.content.substr(linePos).replace(/\\n$/, \"\\\\n\")}|`\n      );\n    }\n    const r = matchRuleOrInjections(\n      grammar,\n      lineText,\n      isFirstLine,\n      linePos,\n      stack,\n      anchorPosition\n    );\n    if (!r) {\n      lineTokens.produce(stack, lineLength);\n      STOP = true;\n      return;\n    }\n    const captureIndices = r.captureIndices;\n    const matchedRuleId = r.matchedRuleId;\n    const hasAdvanced = captureIndices && captureIndices.length > 0 ? captureIndices[0].end > linePos : false;\n    if (matchedRuleId === endRuleId) {\n      const poppedRule = stack.getRule(grammar);\n      if (false) {\n        console.log(\n          \"  popping \" + poppedRule.debugName + \" - \" + poppedRule.debugEndRegExp\n        );\n      }\n      lineTokens.produce(stack, captureIndices[0].start);\n      stack = stack.withContentNameScopesList(stack.nameScopesList);\n      handleCaptures(\n        grammar,\n        lineText,\n        isFirstLine,\n        stack,\n        lineTokens,\n        poppedRule.endCaptures,\n        captureIndices\n      );\n      lineTokens.produce(stack, captureIndices[0].end);\n      const popped = stack;\n      stack = stack.parent;\n      anchorPosition = popped.getAnchorPos();\n      if (!hasAdvanced && popped.getEnterPos() === linePos) {\n        if (false) {\n          console.error(\n            \"[1] - Grammar is in an endless loop - Grammar pushed & popped a rule without advancing\"\n          );\n        }\n        stack = popped;\n        lineTokens.produce(stack, lineLength);\n        STOP = true;\n        return;\n      }\n    } else {\n      const _rule = grammar.getRule(matchedRuleId);\n      lineTokens.produce(stack, captureIndices[0].start);\n      const beforePush = stack;\n      const scopeName = _rule.getName(lineText.content, captureIndices);\n      const nameScopesList = stack.contentNameScopesList.pushAttributed(\n        scopeName,\n        grammar\n      );\n      stack = stack.push(\n        matchedRuleId,\n        linePos,\n        anchorPosition,\n        captureIndices[0].end === lineLength,\n        null,\n        nameScopesList,\n        nameScopesList\n      );\n      if (_rule instanceof BeginEndRule) {\n        const pushedRule = _rule;\n        if (false) {\n          console.log(\n            \"  pushing \" + pushedRule.debugName + \" - \" + pushedRule.debugBeginRegExp\n          );\n        }\n        handleCaptures(\n          grammar,\n          lineText,\n          isFirstLine,\n          stack,\n          lineTokens,\n          pushedRule.beginCaptures,\n          captureIndices\n        );\n        lineTokens.produce(stack, captureIndices[0].end);\n        anchorPosition = captureIndices[0].end;\n        const contentName = pushedRule.getContentName(\n          lineText.content,\n          captureIndices\n        );\n        const contentNameScopesList = nameScopesList.pushAttributed(\n          contentName,\n          grammar\n        );\n        stack = stack.withContentNameScopesList(contentNameScopesList);\n        if (pushedRule.endHasBackReferences) {\n          stack = stack.withEndRule(\n            pushedRule.getEndWithResolvedBackReferences(\n              lineText.content,\n              captureIndices\n            )\n          );\n        }\n        if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {\n          if (false) {\n            console.error(\n              \"[2] - Grammar is in an endless loop - Grammar pushed the same rule without advancing\"\n            );\n          }\n          stack = stack.pop();\n          lineTokens.produce(stack, lineLength);\n          STOP = true;\n          return;\n        }\n      } else if (_rule instanceof BeginWhileRule) {\n        const pushedRule = _rule;\n        if (false) {\n          console.log(\"  pushing \" + pushedRule.debugName);\n        }\n        handleCaptures(\n          grammar,\n          lineText,\n          isFirstLine,\n          stack,\n          lineTokens,\n          pushedRule.beginCaptures,\n          captureIndices\n        );\n        lineTokens.produce(stack, captureIndices[0].end);\n        anchorPosition = captureIndices[0].end;\n        const contentName = pushedRule.getContentName(\n          lineText.content,\n          captureIndices\n        );\n        const contentNameScopesList = nameScopesList.pushAttributed(\n          contentName,\n          grammar\n        );\n        stack = stack.withContentNameScopesList(contentNameScopesList);\n        if (pushedRule.whileHasBackReferences) {\n          stack = stack.withEndRule(\n            pushedRule.getWhileWithResolvedBackReferences(\n              lineText.content,\n              captureIndices\n            )\n          );\n        }\n        if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {\n          if (false) {\n            console.error(\n              \"[3] - Grammar is in an endless loop - Grammar pushed the same rule without advancing\"\n            );\n          }\n          stack = stack.pop();\n          lineTokens.produce(stack, lineLength);\n          STOP = true;\n          return;\n        }\n      } else {\n        const matchingRule = _rule;\n        if (false) {\n          console.log(\n            \"  matched \" + matchingRule.debugName + \" - \" + matchingRule.debugMatchRegExp\n          );\n        }\n        handleCaptures(\n          grammar,\n          lineText,\n          isFirstLine,\n          stack,\n          lineTokens,\n          matchingRule.captures,\n          captureIndices\n        );\n        lineTokens.produce(stack, captureIndices[0].end);\n        stack = stack.pop();\n        if (!hasAdvanced) {\n          if (false) {\n            console.error(\n              \"[4] - Grammar is in an endless loop - Grammar is not advancing, nor is it pushing/popping\"\n            );\n          }\n          stack = stack.safePop();\n          lineTokens.produce(stack, lineLength);\n          STOP = true;\n          return;\n        }\n      }\n    }\n    if (captureIndices[0].end > linePos) {\n      linePos = captureIndices[0].end;\n      isFirstLine = false;\n    }\n  }\n}\nfunction _checkWhileConditions(grammar, lineText, isFirstLine, linePos, stack, lineTokens) {\n  let anchorPosition = stack.beginRuleCapturedEOL ? 0 : -1;\n  const whileRules = [];\n  for (let node = stack; node; node = node.pop()) {\n    const nodeRule = node.getRule(grammar);\n    if (nodeRule instanceof BeginWhileRule) {\n      whileRules.push({\n        rule: nodeRule,\n        stack: node\n      });\n    }\n  }\n  for (let whileRule = whileRules.pop(); whileRule; whileRule = whileRules.pop()) {\n    const { ruleScanner, findOptions } = prepareRuleWhileSearch(whileRule.rule, grammar, whileRule.stack.endRule, isFirstLine, linePos === anchorPosition);\n    const r = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n    if (false) {\n      console.log(\"  scanning for while rule\");\n      console.log(ruleScanner.toString());\n    }\n    if (r) {\n      const matchedRuleId = r.ruleId;\n      if (matchedRuleId !== whileRuleId) {\n        stack = whileRule.stack.pop();\n        break;\n      }\n      if (r.captureIndices && r.captureIndices.length) {\n        lineTokens.produce(whileRule.stack, r.captureIndices[0].start);\n        handleCaptures(grammar, lineText, isFirstLine, whileRule.stack, lineTokens, whileRule.rule.whileCaptures, r.captureIndices);\n        lineTokens.produce(whileRule.stack, r.captureIndices[0].end);\n        anchorPosition = r.captureIndices[0].end;\n        if (r.captureIndices[0].end > linePos) {\n          linePos = r.captureIndices[0].end;\n          isFirstLine = false;\n        }\n      }\n    } else {\n      if (false) {\n        console.log(\"  popping \" + whileRule.rule.debugName + \" - \" + whileRule.rule.debugWhileRegExp);\n      }\n      stack = whileRule.stack.pop();\n      break;\n    }\n  }\n  return { stack, linePos, anchorPosition, isFirstLine };\n}\nfunction matchRuleOrInjections(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n  const matchResult = matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n  const injections = grammar.getInjections();\n  if (injections.length === 0) {\n    return matchResult;\n  }\n  const injectionResult = matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n  if (!injectionResult) {\n    return matchResult;\n  }\n  if (!matchResult) {\n    return injectionResult;\n  }\n  const matchResultScore = matchResult.captureIndices[0].start;\n  const injectionResultScore = injectionResult.captureIndices[0].start;\n  if (injectionResultScore < matchResultScore || injectionResult.priorityMatch && injectionResultScore === matchResultScore) {\n    return injectionResult;\n  }\n  return matchResult;\n}\nfunction matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n  const rule = stack.getRule(grammar);\n  const { ruleScanner, findOptions } = prepareRuleSearch(rule, grammar, stack.endRule, isFirstLine, linePos === anchorPosition);\n  const r = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n  if (r) {\n    return {\n      captureIndices: r.captureIndices,\n      matchedRuleId: r.ruleId\n    };\n  }\n  return null;\n}\nfunction matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n  let bestMatchRating = Number.MAX_VALUE;\n  let bestMatchCaptureIndices = null;\n  let bestMatchRuleId;\n  let bestMatchResultPriority = 0;\n  const scopes = stack.contentNameScopesList.getScopeNames();\n  for (let i = 0, len = injections.length; i < len; i++) {\n    const injection = injections[i];\n    if (!injection.matcher(scopes)) {\n      continue;\n    }\n    const rule = grammar.getRule(injection.ruleId);\n    const { ruleScanner, findOptions } = prepareRuleSearch(rule, grammar, null, isFirstLine, linePos === anchorPosition);\n    const matchResult = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n    if (!matchResult) {\n      continue;\n    }\n    if (false) {\n      console.log(`  matched injection: ${injection.debugSelector}`);\n      console.log(ruleScanner.toString());\n    }\n    const matchRating = matchResult.captureIndices[0].start;\n    if (matchRating >= bestMatchRating) {\n      continue;\n    }\n    bestMatchRating = matchRating;\n    bestMatchCaptureIndices = matchResult.captureIndices;\n    bestMatchRuleId = matchResult.ruleId;\n    bestMatchResultPriority = injection.priority;\n    if (bestMatchRating === linePos) {\n      break;\n    }\n  }\n  if (bestMatchCaptureIndices) {\n    return {\n      priorityMatch: bestMatchResultPriority === -1,\n      captureIndices: bestMatchCaptureIndices,\n      matchedRuleId: bestMatchRuleId\n    };\n  }\n  return null;\n}\nfunction prepareRuleSearch(rule, grammar, endRegexSource, allowA, allowG) {\n  if (UseOnigurumaFindOptions) {\n    const ruleScanner2 = rule.compile(grammar, endRegexSource);\n    const findOptions = getFindOptions(allowA, allowG);\n    return { ruleScanner: ruleScanner2, findOptions };\n  }\n  const ruleScanner = rule.compileAG(grammar, endRegexSource, allowA, allowG);\n  return { ruleScanner, findOptions: 0 /* None */ };\n}\nfunction prepareRuleWhileSearch(rule, grammar, endRegexSource, allowA, allowG) {\n  if (UseOnigurumaFindOptions) {\n    const ruleScanner2 = rule.compileWhile(grammar, endRegexSource);\n    const findOptions = getFindOptions(allowA, allowG);\n    return { ruleScanner: ruleScanner2, findOptions };\n  }\n  const ruleScanner = rule.compileWhileAG(grammar, endRegexSource, allowA, allowG);\n  return { ruleScanner, findOptions: 0 /* None */ };\n}\nfunction getFindOptions(allowA, allowG) {\n  let options = 0 /* None */;\n  if (!allowA) {\n    options |= 1 /* NotBeginString */;\n  }\n  if (!allowG) {\n    options |= 4 /* NotBeginPosition */;\n  }\n  return options;\n}\nfunction handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, captures, captureIndices) {\n  if (captures.length === 0) {\n    return;\n  }\n  const lineTextContent = lineText.content;\n  const len = Math.min(captures.length, captureIndices.length);\n  const localStack = [];\n  const maxEnd = captureIndices[0].end;\n  for (let i = 0; i < len; i++) {\n    const captureRule = captures[i];\n    if (captureRule === null) {\n      continue;\n    }\n    const captureIndex = captureIndices[i];\n    if (captureIndex.length === 0) {\n      continue;\n    }\n    if (captureIndex.start > maxEnd) {\n      break;\n    }\n    while (localStack.length > 0 && localStack[localStack.length - 1].endPos <= captureIndex.start) {\n      lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);\n      localStack.pop();\n    }\n    if (localStack.length > 0) {\n      lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, captureIndex.start);\n    } else {\n      lineTokens.produce(stack, captureIndex.start);\n    }\n    if (captureRule.retokenizeCapturedWithRuleId) {\n      const scopeName = captureRule.getName(lineTextContent, captureIndices);\n      const nameScopesList = stack.contentNameScopesList.pushAttributed(scopeName, grammar);\n      const contentName = captureRule.getContentName(lineTextContent, captureIndices);\n      const contentNameScopesList = nameScopesList.pushAttributed(contentName, grammar);\n      const stackClone = stack.push(captureRule.retokenizeCapturedWithRuleId, captureIndex.start, -1, false, null, nameScopesList, contentNameScopesList);\n      const onigSubStr = grammar.createOnigString(lineTextContent.substring(0, captureIndex.end));\n      _tokenizeString(\n        grammar,\n        onigSubStr,\n        isFirstLine && captureIndex.start === 0,\n        captureIndex.start,\n        stackClone,\n        lineTokens,\n        false,\n        /* no time limit */\n        0\n      );\n      disposeOnigString(onigSubStr);\n      continue;\n    }\n    const captureRuleScopeName = captureRule.getName(lineTextContent, captureIndices);\n    if (captureRuleScopeName !== null) {\n      const base = localStack.length > 0 ? localStack[localStack.length - 1].scopes : stack.contentNameScopesList;\n      const captureRuleScopesList = base.pushAttributed(captureRuleScopeName, grammar);\n      localStack.push(new LocalStackElement(captureRuleScopesList, captureIndex.end));\n    }\n  }\n  while (localStack.length > 0) {\n    lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);\n    localStack.pop();\n  }\n}\nvar LocalStackElement = class {\n  scopes;\n  endPos;\n  constructor(scopes, endPos) {\n    this.scopes = scopes;\n    this.endPos = endPos;\n  }\n};\n\n// src/grammar/grammar.ts\nfunction createGrammar(scopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, onigLib) {\n  return new Grammar(\n    scopeName,\n    grammar,\n    initialLanguage,\n    embeddedLanguages,\n    tokenTypes,\n    balancedBracketSelectors,\n    grammarRepository,\n    onigLib\n  );\n}\nfunction collectInjections(result, selector, rule, ruleFactoryHelper, grammar) {\n  const matchers = createMatchers(selector, nameMatcher);\n  const ruleId = RuleFactory.getCompiledRuleId(rule, ruleFactoryHelper, grammar.repository);\n  for (const matcher of matchers) {\n    result.push({\n      debugSelector: selector,\n      matcher: matcher.matcher,\n      ruleId,\n      grammar,\n      priority: matcher.priority\n    });\n  }\n}\nfunction nameMatcher(identifers, scopes) {\n  if (scopes.length < identifers.length) {\n    return false;\n  }\n  let lastIndex = 0;\n  return identifers.every((identifier) => {\n    for (let i = lastIndex; i < scopes.length; i++) {\n      if (scopesAreMatching(scopes[i], identifier)) {\n        lastIndex = i + 1;\n        return true;\n      }\n    }\n    return false;\n  });\n}\nfunction scopesAreMatching(thisScopeName, scopeName) {\n  if (!thisScopeName) {\n    return false;\n  }\n  if (thisScopeName === scopeName) {\n    return true;\n  }\n  const len = scopeName.length;\n  return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === \".\";\n}\nvar Grammar = class {\n  constructor(_rootScopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, _onigLib) {\n    this._rootScopeName = _rootScopeName;\n    this.balancedBracketSelectors = balancedBracketSelectors;\n    this._onigLib = _onigLib;\n    this._basicScopeAttributesProvider = new BasicScopeAttributesProvider(\n      initialLanguage,\n      embeddedLanguages\n    );\n    this._rootId = -1;\n    this._lastRuleId = 0;\n    this._ruleId2desc = [null];\n    this._includedGrammars = {};\n    this._grammarRepository = grammarRepository;\n    this._grammar = initGrammar(grammar, null);\n    this._injections = null;\n    this._tokenTypeMatchers = [];\n    if (tokenTypes) {\n      for (const selector of Object.keys(tokenTypes)) {\n        const matchers = createMatchers(selector, nameMatcher);\n        for (const matcher of matchers) {\n          this._tokenTypeMatchers.push({\n            matcher: matcher.matcher,\n            type: tokenTypes[selector]\n          });\n        }\n      }\n    }\n  }\n  _rootId;\n  _lastRuleId;\n  _ruleId2desc;\n  _includedGrammars;\n  _grammarRepository;\n  _grammar;\n  _injections;\n  _basicScopeAttributesProvider;\n  _tokenTypeMatchers;\n  get themeProvider() {\n    return this._grammarRepository;\n  }\n  dispose() {\n    for (const rule of this._ruleId2desc) {\n      if (rule) {\n        rule.dispose();\n      }\n    }\n  }\n  createOnigScanner(sources) {\n    return this._onigLib.createOnigScanner(sources);\n  }\n  createOnigString(sources) {\n    return this._onigLib.createOnigString(sources);\n  }\n  getMetadataForScope(scope) {\n    return this._basicScopeAttributesProvider.getBasicScopeAttributes(scope);\n  }\n  _collectInjections() {\n    const grammarRepository = {\n      lookup: (scopeName2) => {\n        if (scopeName2 === this._rootScopeName) {\n          return this._grammar;\n        }\n        return this.getExternalGrammar(scopeName2);\n      },\n      injections: (scopeName2) => {\n        return this._grammarRepository.injections(scopeName2);\n      }\n    };\n    const result = [];\n    const scopeName = this._rootScopeName;\n    const grammar = grammarRepository.lookup(scopeName);\n    if (grammar) {\n      const rawInjections = grammar.injections;\n      if (rawInjections) {\n        for (let expression in rawInjections) {\n          collectInjections(\n            result,\n            expression,\n            rawInjections[expression],\n            this,\n            grammar\n          );\n        }\n      }\n      const injectionScopeNames = this._grammarRepository.injections(scopeName);\n      if (injectionScopeNames) {\n        injectionScopeNames.forEach((injectionScopeName) => {\n          const injectionGrammar = this.getExternalGrammar(injectionScopeName);\n          if (injectionGrammar) {\n            const selector = injectionGrammar.injectionSelector;\n            if (selector) {\n              collectInjections(\n                result,\n                selector,\n                injectionGrammar,\n                this,\n                injectionGrammar\n              );\n            }\n          }\n        });\n      }\n    }\n    result.sort((i1, i2) => i1.priority - i2.priority);\n    return result;\n  }\n  getInjections() {\n    if (this._injections === null) {\n      this._injections = this._collectInjections();\n    }\n    return this._injections;\n  }\n  registerRule(factory) {\n    const id = ++this._lastRuleId;\n    const result = factory(ruleIdFromNumber(id));\n    this._ruleId2desc[id] = result;\n    return result;\n  }\n  getRule(ruleId) {\n    return this._ruleId2desc[ruleIdToNumber(ruleId)];\n  }\n  getExternalGrammar(scopeName, repository) {\n    if (this._includedGrammars[scopeName]) {\n      return this._includedGrammars[scopeName];\n    } else if (this._grammarRepository) {\n      const rawIncludedGrammar = this._grammarRepository.lookup(scopeName);\n      if (rawIncludedGrammar) {\n        this._includedGrammars[scopeName] = initGrammar(\n          rawIncludedGrammar,\n          repository && repository.$base\n        );\n        return this._includedGrammars[scopeName];\n      }\n    }\n    return void 0;\n  }\n  tokenizeLine(lineText, prevState, timeLimit = 0) {\n    const r = this._tokenize(lineText, prevState, false, timeLimit);\n    return {\n      tokens: r.lineTokens.getResult(r.ruleStack, r.lineLength),\n      ruleStack: r.ruleStack,\n      stoppedEarly: r.stoppedEarly\n    };\n  }\n  tokenizeLine2(lineText, prevState, timeLimit = 0) {\n    const r = this._tokenize(lineText, prevState, true, timeLimit);\n    return {\n      tokens: r.lineTokens.getBinaryResult(r.ruleStack, r.lineLength),\n      ruleStack: r.ruleStack,\n      stoppedEarly: r.stoppedEarly\n    };\n  }\n  _tokenize(lineText, prevState, emitBinaryTokens, timeLimit) {\n    if (this._rootId === -1) {\n      this._rootId = RuleFactory.getCompiledRuleId(\n        this._grammar.repository.$self,\n        this,\n        this._grammar.repository\n      );\n      this.getInjections();\n    }\n    let isFirstLine;\n    if (!prevState || prevState === StateStackImpl.NULL) {\n      isFirstLine = true;\n      const rawDefaultMetadata = this._basicScopeAttributesProvider.getDefaultAttributes();\n      const defaultStyle = this.themeProvider.getDefaults();\n      const defaultMetadata = EncodedTokenMetadata.set(\n        0,\n        rawDefaultMetadata.languageId,\n        rawDefaultMetadata.tokenType,\n        null,\n        defaultStyle.fontStyle,\n        defaultStyle.foregroundId,\n        defaultStyle.backgroundId\n      );\n      const rootScopeName = this.getRule(this._rootId).getName(\n        null,\n        null\n      );\n      let scopeList;\n      if (rootScopeName) {\n        scopeList = AttributedScopeStack.createRootAndLookUpScopeName(\n          rootScopeName,\n          defaultMetadata,\n          this\n        );\n      } else {\n        scopeList = AttributedScopeStack.createRoot(\n          \"unknown\",\n          defaultMetadata\n        );\n      }\n      prevState = new StateStackImpl(\n        null,\n        this._rootId,\n        -1,\n        -1,\n        false,\n        null,\n        scopeList,\n        scopeList\n      );\n    } else {\n      isFirstLine = false;\n      prevState.reset();\n    }\n    lineText = lineText + \"\\n\";\n    const onigLineText = this.createOnigString(lineText);\n    const lineLength = onigLineText.content.length;\n    const lineTokens = new LineTokens(\n      emitBinaryTokens,\n      lineText,\n      this._tokenTypeMatchers,\n      this.balancedBracketSelectors\n    );\n    const r = _tokenizeString(\n      this,\n      onigLineText,\n      isFirstLine,\n      0,\n      prevState,\n      lineTokens,\n      true,\n      timeLimit\n    );\n    disposeOnigString(onigLineText);\n    return {\n      lineLength,\n      lineTokens,\n      ruleStack: r.stack,\n      stoppedEarly: r.stoppedEarly\n    };\n  }\n};\nfunction initGrammar(grammar, base) {\n  grammar = clone(grammar);\n  grammar.repository = grammar.repository || {};\n  grammar.repository.$self = {\n    $vscodeTextmateLocation: grammar.$vscodeTextmateLocation,\n    patterns: grammar.patterns,\n    name: grammar.scopeName\n  };\n  grammar.repository.$base = base || grammar.repository.$self;\n  return grammar;\n}\nvar AttributedScopeStack = class _AttributedScopeStack {\n  /**\n   * Invariant:\n   * ```\n   * if (parent && !scopePath.extends(parent.scopePath)) {\n   * \tthrow new Error();\n   * }\n   * ```\n   */\n  constructor(parent, scopePath, tokenAttributes) {\n    this.parent = parent;\n    this.scopePath = scopePath;\n    this.tokenAttributes = tokenAttributes;\n  }\n  static fromExtension(namesScopeList, contentNameScopesList) {\n    let current = namesScopeList;\n    let scopeNames = namesScopeList?.scopePath ?? null;\n    for (const frame of contentNameScopesList) {\n      scopeNames = ScopeStack.push(scopeNames, frame.scopeNames);\n      current = new _AttributedScopeStack(current, scopeNames, frame.encodedTokenAttributes);\n    }\n    return current;\n  }\n  static createRoot(scopeName, tokenAttributes) {\n    return new _AttributedScopeStack(null, new ScopeStack(null, scopeName), tokenAttributes);\n  }\n  static createRootAndLookUpScopeName(scopeName, tokenAttributes, grammar) {\n    const rawRootMetadata = grammar.getMetadataForScope(scopeName);\n    const scopePath = new ScopeStack(null, scopeName);\n    const rootStyle = grammar.themeProvider.themeMatch(scopePath);\n    const resolvedTokenAttributes = _AttributedScopeStack.mergeAttributes(\n      tokenAttributes,\n      rawRootMetadata,\n      rootStyle\n    );\n    return new _AttributedScopeStack(null, scopePath, resolvedTokenAttributes);\n  }\n  get scopeName() {\n    return this.scopePath.scopeName;\n  }\n  toString() {\n    return this.getScopeNames().join(\" \");\n  }\n  equals(other) {\n    return _AttributedScopeStack.equals(this, other);\n  }\n  static equals(a, b) {\n    do {\n      if (a === b) {\n        return true;\n      }\n      if (!a && !b) {\n        return true;\n      }\n      if (!a || !b) {\n        return false;\n      }\n      if (a.scopeName !== b.scopeName || a.tokenAttributes !== b.tokenAttributes) {\n        return false;\n      }\n      a = a.parent;\n      b = b.parent;\n    } while (true);\n  }\n  static mergeAttributes(existingTokenAttributes, basicScopeAttributes, styleAttributes) {\n    let fontStyle = -1 /* NotSet */;\n    let foreground = 0;\n    let background = 0;\n    if (styleAttributes !== null) {\n      fontStyle = styleAttributes.fontStyle;\n      foreground = styleAttributes.foregroundId;\n      background = styleAttributes.backgroundId;\n    }\n    return EncodedTokenMetadata.set(\n      existingTokenAttributes,\n      basicScopeAttributes.languageId,\n      basicScopeAttributes.tokenType,\n      null,\n      fontStyle,\n      foreground,\n      background\n    );\n  }\n  pushAttributed(scopePath, grammar) {\n    if (scopePath === null) {\n      return this;\n    }\n    if (scopePath.indexOf(\" \") === -1) {\n      return _AttributedScopeStack._pushAttributed(this, scopePath, grammar);\n    }\n    const scopes = scopePath.split(/ /g);\n    let result = this;\n    for (const scope of scopes) {\n      result = _AttributedScopeStack._pushAttributed(result, scope, grammar);\n    }\n    return result;\n  }\n  static _pushAttributed(target, scopeName, grammar) {\n    const rawMetadata = grammar.getMetadataForScope(scopeName);\n    const newPath = target.scopePath.push(scopeName);\n    const scopeThemeMatchResult = grammar.themeProvider.themeMatch(newPath);\n    const metadata = _AttributedScopeStack.mergeAttributes(\n      target.tokenAttributes,\n      rawMetadata,\n      scopeThemeMatchResult\n    );\n    return new _AttributedScopeStack(target, newPath, metadata);\n  }\n  getScopeNames() {\n    return this.scopePath.getSegments();\n  }\n  getExtensionIfDefined(base) {\n    const result = [];\n    let self = this;\n    while (self && self !== base) {\n      result.push({\n        encodedTokenAttributes: self.tokenAttributes,\n        scopeNames: self.scopePath.getExtensionIfDefined(self.parent?.scopePath ?? null)\n      });\n      self = self.parent;\n    }\n    return self === base ? result.reverse() : void 0;\n  }\n};\nvar StateStackImpl = class _StateStackImpl {\n  /**\n   * Invariant:\n   * ```\n   * if (contentNameScopesList !== nameScopesList && contentNameScopesList?.parent !== nameScopesList) {\n   * \tthrow new Error();\n   * }\n   * if (this.parent && !nameScopesList.extends(this.parent.contentNameScopesList)) {\n   * \tthrow new Error();\n   * }\n   * ```\n   */\n  constructor(parent, ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList) {\n    this.parent = parent;\n    this.ruleId = ruleId;\n    this.beginRuleCapturedEOL = beginRuleCapturedEOL;\n    this.endRule = endRule;\n    this.nameScopesList = nameScopesList;\n    this.contentNameScopesList = contentNameScopesList;\n    this.depth = this.parent ? this.parent.depth + 1 : 1;\n    this._enterPos = enterPos;\n    this._anchorPos = anchorPos;\n  }\n  _stackElementBrand = void 0;\n  // TODO remove me\n  static NULL = new _StateStackImpl(\n    null,\n    0,\n    0,\n    0,\n    false,\n    null,\n    null,\n    null\n  );\n  /**\n   * The position on the current line where this state was pushed.\n   * This is relevant only while tokenizing a line, to detect endless loops.\n   * Its value is meaningless across lines.\n   */\n  _enterPos;\n  /**\n   * The captured anchor position when this stack element was pushed.\n   * This is relevant only while tokenizing a line, to restore the anchor position when popping.\n   * Its value is meaningless across lines.\n   */\n  _anchorPos;\n  /**\n   * The depth of the stack.\n   */\n  depth;\n  equals(other) {\n    if (other === null) {\n      return false;\n    }\n    return _StateStackImpl._equals(this, other);\n  }\n  static _equals(a, b) {\n    if (a === b) {\n      return true;\n    }\n    if (!this._structuralEquals(a, b)) {\n      return false;\n    }\n    return AttributedScopeStack.equals(a.contentNameScopesList, b.contentNameScopesList);\n  }\n  /**\n   * A structural equals check. Does not take into account `scopes`.\n   */\n  static _structuralEquals(a, b) {\n    do {\n      if (a === b) {\n        return true;\n      }\n      if (!a && !b) {\n        return true;\n      }\n      if (!a || !b) {\n        return false;\n      }\n      if (a.depth !== b.depth || a.ruleId !== b.ruleId || a.endRule !== b.endRule) {\n        return false;\n      }\n      a = a.parent;\n      b = b.parent;\n    } while (true);\n  }\n  clone() {\n    return this;\n  }\n  static _reset(el) {\n    while (el) {\n      el._enterPos = -1;\n      el._anchorPos = -1;\n      el = el.parent;\n    }\n  }\n  reset() {\n    _StateStackImpl._reset(this);\n  }\n  pop() {\n    return this.parent;\n  }\n  safePop() {\n    if (this.parent) {\n      return this.parent;\n    }\n    return this;\n  }\n  push(ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList) {\n    return new _StateStackImpl(\n      this,\n      ruleId,\n      enterPos,\n      anchorPos,\n      beginRuleCapturedEOL,\n      endRule,\n      nameScopesList,\n      contentNameScopesList\n    );\n  }\n  getEnterPos() {\n    return this._enterPos;\n  }\n  getAnchorPos() {\n    return this._anchorPos;\n  }\n  getRule(grammar) {\n    return grammar.getRule(this.ruleId);\n  }\n  toString() {\n    const r = [];\n    this._writeString(r, 0);\n    return \"[\" + r.join(\",\") + \"]\";\n  }\n  _writeString(res, outIndex) {\n    if (this.parent) {\n      outIndex = this.parent._writeString(res, outIndex);\n    }\n    res[outIndex++] = `(${this.ruleId}, ${this.nameScopesList?.toString()}, ${this.contentNameScopesList?.toString()})`;\n    return outIndex;\n  }\n  withContentNameScopesList(contentNameScopeStack) {\n    if (this.contentNameScopesList === contentNameScopeStack) {\n      return this;\n    }\n    return this.parent.push(\n      this.ruleId,\n      this._enterPos,\n      this._anchorPos,\n      this.beginRuleCapturedEOL,\n      this.endRule,\n      this.nameScopesList,\n      contentNameScopeStack\n    );\n  }\n  withEndRule(endRule) {\n    if (this.endRule === endRule) {\n      return this;\n    }\n    return new _StateStackImpl(\n      this.parent,\n      this.ruleId,\n      this._enterPos,\n      this._anchorPos,\n      this.beginRuleCapturedEOL,\n      endRule,\n      this.nameScopesList,\n      this.contentNameScopesList\n    );\n  }\n  // Used to warn of endless loops\n  hasSameRuleAs(other) {\n    let el = this;\n    while (el && el._enterPos === other._enterPos) {\n      if (el.ruleId === other.ruleId) {\n        return true;\n      }\n      el = el.parent;\n    }\n    return false;\n  }\n  toStateStackFrame() {\n    return {\n      ruleId: ruleIdToNumber(this.ruleId),\n      beginRuleCapturedEOL: this.beginRuleCapturedEOL,\n      endRule: this.endRule,\n      nameScopesList: this.nameScopesList?.getExtensionIfDefined(this.parent?.nameScopesList ?? null) ?? [],\n      contentNameScopesList: this.contentNameScopesList?.getExtensionIfDefined(this.nameScopesList) ?? []\n    };\n  }\n  static pushFrame(self, frame) {\n    const namesScopeList = AttributedScopeStack.fromExtension(self?.nameScopesList ?? null, frame.nameScopesList);\n    return new _StateStackImpl(\n      self,\n      ruleIdFromNumber(frame.ruleId),\n      frame.enterPos ?? -1,\n      frame.anchorPos ?? -1,\n      frame.beginRuleCapturedEOL,\n      frame.endRule,\n      namesScopeList,\n      AttributedScopeStack.fromExtension(namesScopeList, frame.contentNameScopesList)\n    );\n  }\n};\nvar BalancedBracketSelectors = class {\n  balancedBracketScopes;\n  unbalancedBracketScopes;\n  allowAny = false;\n  constructor(balancedBracketScopes, unbalancedBracketScopes) {\n    this.balancedBracketScopes = balancedBracketScopes.flatMap(\n      (selector) => {\n        if (selector === \"*\") {\n          this.allowAny = true;\n          return [];\n        }\n        return createMatchers(selector, nameMatcher).map((m) => m.matcher);\n      }\n    );\n    this.unbalancedBracketScopes = unbalancedBracketScopes.flatMap(\n      (selector) => createMatchers(selector, nameMatcher).map((m) => m.matcher)\n    );\n  }\n  get matchesAlways() {\n    return this.allowAny && this.unbalancedBracketScopes.length === 0;\n  }\n  get matchesNever() {\n    return this.balancedBracketScopes.length === 0 && !this.allowAny;\n  }\n  match(scopes) {\n    for (const excluder of this.unbalancedBracketScopes) {\n      if (excluder(scopes)) {\n        return false;\n      }\n    }\n    for (const includer of this.balancedBracketScopes) {\n      if (includer(scopes)) {\n        return true;\n      }\n    }\n    return this.allowAny;\n  }\n};\nvar LineTokens = class {\n  constructor(emitBinaryTokens, lineText, tokenTypeOverrides, balancedBracketSelectors) {\n    this.balancedBracketSelectors = balancedBracketSelectors;\n    this._emitBinaryTokens = emitBinaryTokens;\n    this._tokenTypeOverrides = tokenTypeOverrides;\n    if (false) {\n      this._lineText = lineText;\n    } else {\n      this._lineText = null;\n    }\n    this._tokens = [];\n    this._binaryTokens = [];\n    this._lastTokenEndIndex = 0;\n  }\n  _emitBinaryTokens;\n  /**\n   * defined only if `false`.\n   */\n  _lineText;\n  /**\n   * used only if `_emitBinaryTokens` is false.\n   */\n  _tokens;\n  /**\n   * used only if `_emitBinaryTokens` is true.\n   */\n  _binaryTokens;\n  _lastTokenEndIndex;\n  _tokenTypeOverrides;\n  produce(stack, endIndex) {\n    this.produceFromScopes(stack.contentNameScopesList, endIndex);\n  }\n  produceFromScopes(scopesList, endIndex) {\n    if (this._lastTokenEndIndex >= endIndex) {\n      return;\n    }\n    if (this._emitBinaryTokens) {\n      let metadata = scopesList?.tokenAttributes ?? 0;\n      let containsBalancedBrackets = false;\n      if (this.balancedBracketSelectors?.matchesAlways) {\n        containsBalancedBrackets = true;\n      }\n      if (this._tokenTypeOverrides.length > 0 || this.balancedBracketSelectors && !this.balancedBracketSelectors.matchesAlways && !this.balancedBracketSelectors.matchesNever) {\n        const scopes2 = scopesList?.getScopeNames() ?? [];\n        for (const tokenType of this._tokenTypeOverrides) {\n          if (tokenType.matcher(scopes2)) {\n            metadata = EncodedTokenMetadata.set(\n              metadata,\n              0,\n              toOptionalTokenType(tokenType.type),\n              null,\n              -1 /* NotSet */,\n              0,\n              0\n            );\n          }\n        }\n        if (this.balancedBracketSelectors) {\n          containsBalancedBrackets = this.balancedBracketSelectors.match(scopes2);\n        }\n      }\n      if (containsBalancedBrackets) {\n        metadata = EncodedTokenMetadata.set(\n          metadata,\n          0,\n          8 /* NotSet */,\n          containsBalancedBrackets,\n          -1 /* NotSet */,\n          0,\n          0\n        );\n      }\n      if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === metadata) {\n        this._lastTokenEndIndex = endIndex;\n        return;\n      }\n      this._binaryTokens.push(this._lastTokenEndIndex);\n      this._binaryTokens.push(metadata);\n      this._lastTokenEndIndex = endIndex;\n      return;\n    }\n    const scopes = scopesList?.getScopeNames() ?? [];\n    this._tokens.push({\n      startIndex: this._lastTokenEndIndex,\n      endIndex,\n      // value: lineText.substring(lastTokenEndIndex, endIndex),\n      scopes\n    });\n    this._lastTokenEndIndex = endIndex;\n  }\n  getResult(stack, lineLength) {\n    if (this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === lineLength - 1) {\n      this._tokens.pop();\n    }\n    if (this._tokens.length === 0) {\n      this._lastTokenEndIndex = -1;\n      this.produce(stack, lineLength);\n      this._tokens[this._tokens.length - 1].startIndex = 0;\n    }\n    return this._tokens;\n  }\n  getBinaryResult(stack, lineLength) {\n    if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === lineLength - 1) {\n      this._binaryTokens.pop();\n      this._binaryTokens.pop();\n    }\n    if (this._binaryTokens.length === 0) {\n      this._lastTokenEndIndex = -1;\n      this.produce(stack, lineLength);\n      this._binaryTokens[this._binaryTokens.length - 2] = 0;\n    }\n    const result = new Uint32Array(this._binaryTokens.length);\n    for (let i = 0, len = this._binaryTokens.length; i < len; i++) {\n      result[i] = this._binaryTokens[i];\n    }\n    return result;\n  }\n};\n\n// src/registry.ts\nvar SyncRegistry = class {\n  constructor(theme, _onigLib) {\n    this._onigLib = _onigLib;\n    this._theme = theme;\n  }\n  _grammars = /* @__PURE__ */ new Map();\n  _rawGrammars = /* @__PURE__ */ new Map();\n  _injectionGrammars = /* @__PURE__ */ new Map();\n  _theme;\n  dispose() {\n    for (const grammar of this._grammars.values()) {\n      grammar.dispose();\n    }\n  }\n  setTheme(theme) {\n    this._theme = theme;\n  }\n  getColorMap() {\n    return this._theme.getColorMap();\n  }\n  /**\n   * Add `grammar` to registry and return a list of referenced scope names\n   */\n  addGrammar(grammar, injectionScopeNames) {\n    this._rawGrammars.set(grammar.scopeName, grammar);\n    if (injectionScopeNames) {\n      this._injectionGrammars.set(grammar.scopeName, injectionScopeNames);\n    }\n  }\n  /**\n   * Lookup a raw grammar.\n   */\n  lookup(scopeName) {\n    return this._rawGrammars.get(scopeName);\n  }\n  /**\n   * Returns the injections for the given grammar\n   */\n  injections(targetScope) {\n    return this._injectionGrammars.get(targetScope);\n  }\n  /**\n   * Get the default theme settings\n   */\n  getDefaults() {\n    return this._theme.getDefaults();\n  }\n  /**\n   * Match a scope in the theme.\n   */\n  themeMatch(scopePath) {\n    return this._theme.match(scopePath);\n  }\n  /**\n   * Lookup a grammar.\n   */\n  grammarForScopeName(scopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors) {\n    if (!this._grammars.has(scopeName)) {\n      let rawGrammar = this._rawGrammars.get(scopeName);\n      if (!rawGrammar) {\n        return null;\n      }\n      this._grammars.set(scopeName, createGrammar(\n        scopeName,\n        rawGrammar,\n        initialLanguage,\n        embeddedLanguages,\n        tokenTypes,\n        balancedBracketSelectors,\n        this,\n        this._onigLib\n      ));\n    }\n    return this._grammars.get(scopeName);\n  }\n};\n\n// src/index.ts\nvar Registry = class {\n  _options;\n  _syncRegistry;\n  _ensureGrammarCache;\n  constructor(options) {\n    this._options = options;\n    this._syncRegistry = new SyncRegistry(\n      Theme.createFromRawTheme(options.theme, options.colorMap),\n      options.onigLib\n    );\n    this._ensureGrammarCache = /* @__PURE__ */ new Map();\n  }\n  dispose() {\n    this._syncRegistry.dispose();\n  }\n  /**\n   * Change the theme. Once called, no previous `ruleStack` should be used anymore.\n   */\n  setTheme(theme, colorMap) {\n    this._syncRegistry.setTheme(Theme.createFromRawTheme(theme, colorMap));\n  }\n  /**\n   * Returns a lookup array for color ids.\n   */\n  getColorMap() {\n    return this._syncRegistry.getColorMap();\n  }\n  /**\n   * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n   * Please do not use language id 0.\n   */\n  loadGrammarWithEmbeddedLanguages(initialScopeName, initialLanguage, embeddedLanguages) {\n    return this.loadGrammarWithConfiguration(initialScopeName, initialLanguage, { embeddedLanguages });\n  }\n  /**\n   * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n   * Please do not use language id 0.\n   */\n  loadGrammarWithConfiguration(initialScopeName, initialLanguage, configuration) {\n    return this._loadGrammar(\n      initialScopeName,\n      initialLanguage,\n      configuration.embeddedLanguages,\n      configuration.tokenTypes,\n      new BalancedBracketSelectors(\n        configuration.balancedBracketSelectors || [],\n        configuration.unbalancedBracketSelectors || []\n      )\n    );\n  }\n  /**\n   * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n   */\n  loadGrammar(initialScopeName) {\n    return this._loadGrammar(initialScopeName, 0, null, null, null);\n  }\n  _loadGrammar(initialScopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors) {\n    const dependencyProcessor = new ScopeDependencyProcessor(this._syncRegistry, initialScopeName);\n    while (dependencyProcessor.Q.length > 0) {\n      dependencyProcessor.Q.map((request) => this._loadSingleGrammar(request.scopeName));\n      dependencyProcessor.processQueue();\n    }\n    return this._grammarForScopeName(\n      initialScopeName,\n      initialLanguage,\n      embeddedLanguages,\n      tokenTypes,\n      balancedBracketSelectors\n    );\n  }\n  _loadSingleGrammar(scopeName) {\n    if (!this._ensureGrammarCache.has(scopeName)) {\n      this._doLoadSingleGrammar(scopeName);\n      this._ensureGrammarCache.set(scopeName, true);\n    }\n  }\n  _doLoadSingleGrammar(scopeName) {\n    const grammar = this._options.loadGrammar(scopeName);\n    if (grammar) {\n      const injections = typeof this._options.getInjections === \"function\" ? this._options.getInjections(scopeName) : void 0;\n      this._syncRegistry.addGrammar(grammar, injections);\n    }\n  }\n  /**\n   * Adds a rawGrammar.\n   */\n  addGrammar(rawGrammar, injections = [], initialLanguage = 0, embeddedLanguages = null) {\n    this._syncRegistry.addGrammar(rawGrammar, injections);\n    return this._grammarForScopeName(rawGrammar.scopeName, initialLanguage, embeddedLanguages);\n  }\n  /**\n   * Get the grammar for `scopeName`. The grammar must first be created via `loadGrammar` or `addGrammar`.\n   */\n  _grammarForScopeName(scopeName, initialLanguage = 0, embeddedLanguages = null, tokenTypes = null, balancedBracketSelectors = null) {\n    return this._syncRegistry.grammarForScopeName(\n      scopeName,\n      initialLanguage,\n      embeddedLanguages,\n      tokenTypes,\n      balancedBracketSelectors\n    );\n  }\n};\nvar INITIAL = StateStackImpl.NULL;\nexport {\n  EncodedTokenMetadata,\n  FindOption,\n  FontStyle,\n  INITIAL,\n  Registry,\n  Theme,\n  disposeOnigString\n};\n","/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toDecimal(code, next, omit) {\n  const value = '&#' + String(code)\n  return omit && next && !/\\d/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n","/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n}\n","/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nexport const dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n]\n","import {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterEntitiesHtml4} from 'character-entities-html4'\nimport {dangerous} from '../constant/dangerous.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n","/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","/**\n * @import {Comment, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\nconst htmlCommentRegex = /^>|^->|<!--|-->|--!>|<!-$/g\n\n// Declare arrays as variables so it can be cached by `stringifyEntities`\nconst bogusCommentEntitySubset = ['>']\nconst commentEntitySubset = ['<', '>']\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {\n            subset: bogusCommentEntitySubset\n          })\n        ) +\n        '>'\n    : '<!--' + node.value.replace(htmlCommentRegex, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: commentEntitySubset\n      })\n    )\n  }\n}\n","/**\n * @import {Doctype, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\n/**\n * Serialize a doctype.\n *\n * @param {Doctype} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @import {Parents, RootContent} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\nexport const siblingAfter = siblings(1)\nexport const siblingBefore = siblings(-1)\n\n/** @type {Array<RootContent>} */\nconst emptyChildren = []\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren\n    let offset = (index || 0) + increment\n    let next = siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    // @ts-expect-error: it’s a correct child.\n    return next\n  }\n}\n","/**\n * @import {Element, Parents} from 'hast'\n */\n\n/**\n * @callback OmitHandle\n *   Check if a tag can be omitted.\n * @param {Element} element\n *   Element to check.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether to omit a tag.\n *\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nexport function omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n","/**\n * @import {Element, Parents} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter} from './util/siblings.js'\nimport {omission} from './omission.js'\n\nexport const closing = omission({\n  body,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true)\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n","/**\n * @import {Element, Parents} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter, siblingBefore} from './util/siblings.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  /** @type {Set<string>} */\n  const seen = new Set()\n\n  // Whether `srcdoc` or not,\n  // make sure the content model at least doesn’t have too many `base`s/`title`s.\n  for (const child of node.children) {\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'base' || child.tagName === 'title')\n    ) {\n      if (seen.has(child.tagName)) return false\n      seen.add(child.tagName)\n    }\n  }\n\n  // “May be omitted if the element is empty,\n  // or if the first thing inside the head element is an element.”\n  const child = node.children[0]\n  return !child || child.type === 'element'\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr')\n}\n","/**\n * @import {Element, Parents, Properties} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {ccount} from 'ccount'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {find, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {closing} from '../omission/closing.js'\nimport {opening} from '../omission/opening.js'\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg\n  }\n\n  const attributes = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false\n\n  if (attributes || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attributes ? ' ' + attributes : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attributes.charAt(attributes.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} properties\n * @returns {string}\n */\nfunction serializeAttributes(state, properties) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (properties) {\n    for (key in properties) {\n      if (properties[key] !== null && properties[key] !== undefined) {\n        const value = serializeAttribute(state, key, properties[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : undefined\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    (info.boolean || info.overloadedBoolean) &&\n    (typeof value !== 'string' || value === info.attribute || value === '')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? commas : spaces)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        attribute: true,\n        subset: constants.unquoted[x][y]\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n","/**\n * @import {Parents, Text} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {State} from '../index.js'\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n// Declare array as variable so it can be cached by `stringifyEntities`\nconst textEntitySubset = ['<', '&']\n\n/**\n * Serialize a text node.\n *\n * @param {Raw | Text} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: textEntitySubset\n        })\n      )\n}\n","/**\n * @import {Parents} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {State} from '../index.js'\n */\n\nimport {text} from './text.js'\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n","/**\n * @import {Parents, Root} from 'hast'\n * @import {State} from '../index.js'\n */\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function root(node, _1, _2, state) {\n  return state.all(node)\n}\n","/**\n * @import {Nodes, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {zwitch} from 'zwitch'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {element} from './element.js'\nimport {raw} from './raw.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */ (node_)\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n","/**\n * @import {Nodes, Parents, RootContent} from 'hast'\n * @import {Schema} from 'property-information'\n * @import {Options as StringifyEntitiesOptions} from 'stringify-entities'\n */\n\n/**\n * @typedef {Omit<StringifyEntitiesOptions, 'attribute' | 'escapeOnly' | 'subset'>} CharacterReferences\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [allowDangerousCharacters=false]\n *   Do not encode some characters which cause XSS vulnerabilities in older\n *   browsers (default: `false`).\n *\n *   > ⚠️ **Danger**: only set this if you completely trust the content.\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Allow `raw` nodes and insert them as raw HTML (default: `false`).\n *\n *   When `false`, `Raw` nodes are encoded.\n *\n *   > ⚠️ **Danger**: only set this if you completely trust the content.\n * @property {boolean | null | undefined} [allowParseErrors=false]\n *   Do not encode characters which cause parse errors (even though they work),\n *   to save bytes (default: `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [bogusComments=false]\n *   Use “bogus comments” instead of comments to save byes: `<?charlie>`\n *   instead of `<!--charlie-->` (default: `false`).\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {CharacterReferences | null | undefined} [characterReferences]\n *   Configure how to serialize character references (optional).\n * @property {boolean | null | undefined} [closeEmptyElements=false]\n *   Close SVG elements without any content with slash (`/`) on the opening tag\n *   instead of an end tag: `<circle />` instead of `<circle></circle>`\n *   (default: `false`).\n *\n *   See `tightSelfClosing` to control whether a space is used before the\n *   slash.\n *\n *   Not used in the HTML space.\n * @property {boolean | null | undefined} [closeSelfClosing=false]\n *   Close self-closing nodes with an extra slash (`/`): `<img />` instead of\n *   `<img>` (default: `false`).\n *\n *   See `tightSelfClosing` to control whether a space is used before the\n *   slash.\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [collapseEmptyAttributes=false]\n *   Collapse empty attributes: get `class` instead of `class=\"\"` (default:\n *   `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: boolean attributes (such as `hidden`) are always collapsed.\n * @property {boolean | null | undefined} [omitOptionalTags=false]\n *   Omit optional opening and closing tags (default: `false`).\n *\n *   For example, in `<ol><li>one</li><li>two</li></ol>`, both `</li>` closing\n *   tags can be omitted.\n *   The first because it’s followed by another `li`, the last because it’s\n *   followed by nothing.\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [preferUnquoted=false]\n *   Leave attributes unquoted if that results in less bytes (default: `false`).\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [quoteSmart=false]\n *   Use the other quote if that results in less bytes (default: `false`).\n * @property {Quote | null | undefined} [quote='\"']\n *   Preferred quote to use (default: `'\"'`).\n * @property {Space | null | undefined} [space='html']\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it (default: `'html'`).\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use [`xast`][xast] if you need to support SVG as XML.\n * @property {boolean | null | undefined} [tightAttributes=false]\n *   Join attributes together, without whitespace, if possible: get\n *   `class=\"a b\"title=\"c d\"` instead of `class=\"a b\" title=\"c d\"` to save\n *   bytes (default: `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [tightCommaSeparatedLists=false]\n *   Join known comma-separated attribute values with just a comma (`,`),\n *   instead of padding them on the right as well (`,␠`, where `␠` represents a\n *   space) (default: `false`).\n * @property {boolean | null | undefined} [tightDoctype=false]\n *   Drop unneeded spaces in doctypes: `<!doctypehtml>` instead of\n *   `<!doctype html>` to save bytes (default: `false`).\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [tightSelfClosing=false]\n *   Do not use an extra space when closing self-closing elements: `<img/>`\n *   instead of `<img />` (default: `false`).\n *\n *   > 👉 **Note**: only used if `closeSelfClosing: true` or\n *   > `closeEmptyElements: true`.\n * @property {boolean | null | undefined} [upperDoctype=false]\n *   Use a `<!DOCTYPE…` instead of `<!doctype…` (default: `false`).\n *\n *   Useless except for XHTML.\n * @property {ReadonlyArray<string> | null | undefined} [voids]\n *   Tag names of elements to serialize without closing tag (default: `html-void-elements`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: It’s highly unlikely that you want to pass this, because\n *   > hast is not for XML, and HTML will not add more void elements.\n *\n * @typedef {'\"' | \"'\"} Quote\n *   HTML quotes for attribute values.\n *\n * @typedef {Omit<Required<{[key in keyof Options]: Exclude<Options[key], null | undefined>}>, 'space' | 'quote'>} Settings\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Parents | undefined) => string} all\n *   Serialize the children of a parent node.\n * @property {Quote} alternative\n *   Alternative quote.\n * @property {(node: Nodes, index: number | undefined, parent: Parents | undefined) => string} one\n *   Serialize one node.\n * @property {Quote} quote\n *   Preferred quote.\n * @property {Schema} schema\n *   Current schema.\n * @property {Settings} settings\n *   User configuration.\n */\n\nimport {htmlVoidElements} from 'html-void-elements'\nimport {html, svg} from 'property-information'\nimport {handle} from './handle/index.js'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/** @type {CharacterReferences} */\nconst emptyCharacterReferences = {}\n\n/** @type {Array<never>} */\nconst emptyChildren = []\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Array<RootContent> | Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized HTML.\n */\nexport function toHtml(tree, options) {\n  const options_ = options || emptyOptions\n  const quote = options_.quote || '\"'\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || emptyCharacterReferences,\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html,\n    quote,\n    alternative\n  }\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parents | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nexport function all(parent) {\n  /** @type {Array<string>} */\n  const results = []\n  const children = (parent && parent.children) || emptyChildren\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent)\n  }\n\n  return results.join('')\n}\n","import { ShikiError as ShikiError$1 } from '@shikijs/types';\nexport * from '@shikijs/types';\nimport { FontStyle, INITIAL, EncodedTokenMetadata, Registry as Registry$1, Theme } from '@shikijs/vscode-textmate';\nimport { toHtml } from 'hast-util-to-html';\n\nfunction resolveColorReplacements(theme, options) {\n  const replacements = typeof theme === \"string\" ? {} : { ...theme.colorReplacements };\n  const themeName = typeof theme === \"string\" ? theme : theme.name;\n  for (const [key, value] of Object.entries(options?.colorReplacements || {})) {\n    if (typeof value === \"string\")\n      replacements[key] = value;\n    else if (key === themeName)\n      Object.assign(replacements, value);\n  }\n  return replacements;\n}\nfunction applyColorReplacements(color, replacements) {\n  if (!color)\n    return color;\n  return replacements?.[color?.toLowerCase()] || color;\n}\n\nfunction toArray(x) {\n  return Array.isArray(x) ? x : [x];\n}\nasync function normalizeGetter(p) {\n  return Promise.resolve(typeof p === \"function\" ? p() : p).then((r) => r.default || r);\n}\nfunction isPlainLang(lang) {\n  return !lang || [\"plaintext\", \"txt\", \"text\", \"plain\"].includes(lang);\n}\nfunction isSpecialLang(lang) {\n  return lang === \"ansi\" || isPlainLang(lang);\n}\nfunction isNoneTheme(theme) {\n  return theme === \"none\";\n}\nfunction isSpecialTheme(theme) {\n  return isNoneTheme(theme);\n}\n\nfunction addClassToHast(node, className) {\n  if (!className)\n    return node;\n  node.properties ||= {};\n  node.properties.class ||= [];\n  if (typeof node.properties.class === \"string\")\n    node.properties.class = node.properties.class.split(/\\s+/g);\n  if (!Array.isArray(node.properties.class))\n    node.properties.class = [];\n  const targets = Array.isArray(className) ? className : className.split(/\\s+/g);\n  for (const c of targets) {\n    if (c && !node.properties.class.includes(c))\n      node.properties.class.push(c);\n  }\n  return node;\n}\n\nfunction splitLines(code, preserveEnding = false) {\n  const parts = code.split(/(\\r?\\n)/g);\n  let index = 0;\n  const lines = [];\n  for (let i = 0; i < parts.length; i += 2) {\n    const line = preserveEnding ? parts[i] + (parts[i + 1] || \"\") : parts[i];\n    lines.push([line, index]);\n    index += parts[i].length;\n    index += parts[i + 1]?.length || 0;\n  }\n  return lines;\n}\nfunction createPositionConverter(code) {\n  const lines = splitLines(code, true).map(([line]) => line);\n  function indexToPos(index) {\n    if (index === code.length) {\n      return {\n        line: lines.length - 1,\n        character: lines[lines.length - 1].length\n      };\n    }\n    let character = index;\n    let line = 0;\n    for (const lineText of lines) {\n      if (character < lineText.length)\n        break;\n      character -= lineText.length;\n      line++;\n    }\n    return { line, character };\n  }\n  function posToIndex(line, character) {\n    let index = 0;\n    for (let i = 0; i < line; i++)\n      index += lines[i].length;\n    index += character;\n    return index;\n  }\n  return {\n    lines,\n    indexToPos,\n    posToIndex\n  };\n}\nfunction guessEmbeddedLanguages(code, _lang, highlighter) {\n  const langs = /* @__PURE__ */ new Set();\n  for (const match of code.matchAll(/lang=[\"']([\\w-]+)[\"']/g)) {\n    langs.add(match[1]);\n  }\n  for (const match of code.matchAll(/(?:```|~~~)([\\w-]+)/g)) {\n    langs.add(match[1]);\n  }\n  for (const match of code.matchAll(/\\\\begin\\{([\\w-]+)\\}/g)) {\n    langs.add(match[1]);\n  }\n  if (!highlighter)\n    return Array.from(langs);\n  const bundle = highlighter.getBundledLanguages();\n  return Array.from(langs).filter((l) => l && bundle[l]);\n}\n\nfunction splitToken(token, offsets) {\n  let lastOffset = 0;\n  const tokens = [];\n  for (const offset of offsets) {\n    if (offset > lastOffset) {\n      tokens.push({\n        ...token,\n        content: token.content.slice(lastOffset, offset),\n        offset: token.offset + lastOffset\n      });\n    }\n    lastOffset = offset;\n  }\n  if (lastOffset < token.content.length) {\n    tokens.push({\n      ...token,\n      content: token.content.slice(lastOffset),\n      offset: token.offset + lastOffset\n    });\n  }\n  return tokens;\n}\nfunction splitTokens(tokens, breakpoints) {\n  const sorted = Array.from(breakpoints instanceof Set ? breakpoints : new Set(breakpoints)).sort((a, b) => a - b);\n  if (!sorted.length)\n    return tokens;\n  return tokens.map((line) => {\n    return line.flatMap((token) => {\n      const breakpointsInToken = sorted.filter((i) => token.offset < i && i < token.offset + token.content.length).map((i) => i - token.offset).sort((a, b) => a - b);\n      if (!breakpointsInToken.length)\n        return token;\n      return splitToken(token, breakpointsInToken);\n    });\n  });\n}\nfunction flatTokenVariants(merged, variantsOrder, cssVariablePrefix, defaultColor) {\n  const token = {\n    content: merged.content,\n    explanation: merged.explanation,\n    offset: merged.offset\n  };\n  const styles = variantsOrder.map((t) => getTokenStyleObject(merged.variants[t]));\n  const styleKeys = new Set(styles.flatMap((t) => Object.keys(t)));\n  const mergedStyles = {};\n  styles.forEach((cur, idx) => {\n    for (const key of styleKeys) {\n      const value = cur[key] || \"inherit\";\n      if (idx === 0 && defaultColor) {\n        mergedStyles[key] = value;\n      } else {\n        const keyName = key === \"color\" ? \"\" : key === \"background-color\" ? \"-bg\" : `-${key}`;\n        const varKey = cssVariablePrefix + variantsOrder[idx] + (key === \"color\" ? \"\" : keyName);\n        mergedStyles[varKey] = value;\n      }\n    }\n  });\n  token.htmlStyle = mergedStyles;\n  return token;\n}\nfunction getTokenStyleObject(token) {\n  const styles = {};\n  if (token.color)\n    styles.color = token.color;\n  if (token.bgColor)\n    styles[\"background-color\"] = token.bgColor;\n  if (token.fontStyle) {\n    if (token.fontStyle & FontStyle.Italic)\n      styles[\"font-style\"] = \"italic\";\n    if (token.fontStyle & FontStyle.Bold)\n      styles[\"font-weight\"] = \"bold\";\n    const decorations = [];\n    if (token.fontStyle & FontStyle.Underline)\n      decorations.push(\"underline\");\n    if (token.fontStyle & FontStyle.Strikethrough)\n      decorations.push(\"line-through\");\n    if (decorations.length)\n      styles[\"text-decoration\"] = decorations.join(\" \");\n  }\n  return styles;\n}\nfunction stringifyTokenStyle(token) {\n  if (typeof token === \"string\")\n    return token;\n  return Object.entries(token).map(([key, value]) => `${key}:${value}`).join(\";\");\n}\n\nconst _grammarStateMap = /* @__PURE__ */ new WeakMap();\nfunction setLastGrammarStateToMap(keys, state) {\n  _grammarStateMap.set(keys, state);\n}\nfunction getLastGrammarStateFromMap(keys) {\n  return _grammarStateMap.get(keys);\n}\nclass GrammarState {\n  /**\n   * Theme to Stack mapping\n   */\n  _stacks = {};\n  lang;\n  get themes() {\n    return Object.keys(this._stacks);\n  }\n  get theme() {\n    return this.themes[0];\n  }\n  get _stack() {\n    return this._stacks[this.theme];\n  }\n  /**\n   * Static method to create a initial grammar state.\n   */\n  static initial(lang, themes) {\n    return new GrammarState(\n      Object.fromEntries(toArray(themes).map((theme) => [theme, INITIAL])),\n      lang\n    );\n  }\n  constructor(...args) {\n    if (args.length === 2) {\n      const [stacksMap, lang] = args;\n      this.lang = lang;\n      this._stacks = stacksMap;\n    } else {\n      const [stack, lang, theme] = args;\n      this.lang = lang;\n      this._stacks = { [theme]: stack };\n    }\n  }\n  /**\n   * Get the internal stack object.\n   * @internal\n   */\n  getInternalStack(theme = this.theme) {\n    return this._stacks[theme];\n  }\n  getScopes(theme = this.theme) {\n    return getScopes(this._stacks[theme]);\n  }\n  toJSON() {\n    return {\n      lang: this.lang,\n      theme: this.theme,\n      themes: this.themes,\n      scopes: this.getScopes()\n    };\n  }\n}\nfunction getScopes(stack) {\n  const scopes = [];\n  const visited = /* @__PURE__ */ new Set();\n  function pushScope(stack2) {\n    if (visited.has(stack2))\n      return;\n    visited.add(stack2);\n    const name = stack2?.nameScopesList?.scopeName;\n    if (name)\n      scopes.push(name);\n    if (stack2.parent)\n      pushScope(stack2.parent);\n  }\n  pushScope(stack);\n  return scopes;\n}\nfunction getGrammarStack(state, theme) {\n  if (!(state instanceof GrammarState))\n    throw new ShikiError$1(\"Invalid grammar state\");\n  return state.getInternalStack(theme);\n}\n\nfunction transformerDecorations() {\n  const map = /* @__PURE__ */ new WeakMap();\n  function getContext(shiki) {\n    if (!map.has(shiki.meta)) {\n      let normalizePosition = function(p) {\n        if (typeof p === \"number\") {\n          if (p < 0 || p > shiki.source.length)\n            throw new ShikiError$1(`Invalid decoration offset: ${p}. Code length: ${shiki.source.length}`);\n          return {\n            ...converter.indexToPos(p),\n            offset: p\n          };\n        } else {\n          const line = converter.lines[p.line];\n          if (line === void 0)\n            throw new ShikiError$1(`Invalid decoration position ${JSON.stringify(p)}. Lines length: ${converter.lines.length}`);\n          if (p.character < 0 || p.character > line.length)\n            throw new ShikiError$1(`Invalid decoration position ${JSON.stringify(p)}. Line ${p.line} length: ${line.length}`);\n          return {\n            ...p,\n            offset: converter.posToIndex(p.line, p.character)\n          };\n        }\n      };\n      const converter = createPositionConverter(shiki.source);\n      const decorations = (shiki.options.decorations || []).map((d) => ({\n        ...d,\n        start: normalizePosition(d.start),\n        end: normalizePosition(d.end)\n      }));\n      verifyIntersections(decorations);\n      map.set(shiki.meta, {\n        decorations,\n        converter,\n        source: shiki.source\n      });\n    }\n    return map.get(shiki.meta);\n  }\n  return {\n    name: \"shiki:decorations\",\n    tokens(tokens) {\n      if (!this.options.decorations?.length)\n        return;\n      const ctx = getContext(this);\n      const breakpoints = ctx.decorations.flatMap((d) => [d.start.offset, d.end.offset]);\n      const splitted = splitTokens(tokens, breakpoints);\n      return splitted;\n    },\n    code(codeEl) {\n      if (!this.options.decorations?.length)\n        return;\n      const ctx = getContext(this);\n      const lines = Array.from(codeEl.children).filter((i) => i.type === \"element\" && i.tagName === \"span\");\n      if (lines.length !== ctx.converter.lines.length)\n        throw new ShikiError$1(`Number of lines in code element (${lines.length}) does not match the number of lines in the source (${ctx.converter.lines.length}). Failed to apply decorations.`);\n      function applyLineSection(line, start, end, decoration) {\n        const lineEl = lines[line];\n        let text = \"\";\n        let startIndex = -1;\n        let endIndex = -1;\n        if (start === 0)\n          startIndex = 0;\n        if (end === 0)\n          endIndex = 0;\n        if (end === Number.POSITIVE_INFINITY)\n          endIndex = lineEl.children.length;\n        if (startIndex === -1 || endIndex === -1) {\n          for (let i = 0; i < lineEl.children.length; i++) {\n            text += stringify(lineEl.children[i]);\n            if (startIndex === -1 && text.length === start)\n              startIndex = i + 1;\n            if (endIndex === -1 && text.length === end)\n              endIndex = i + 1;\n          }\n        }\n        if (startIndex === -1)\n          throw new ShikiError$1(`Failed to find start index for decoration ${JSON.stringify(decoration.start)}`);\n        if (endIndex === -1)\n          throw new ShikiError$1(`Failed to find end index for decoration ${JSON.stringify(decoration.end)}`);\n        const children = lineEl.children.slice(startIndex, endIndex);\n        if (!decoration.alwaysWrap && children.length === lineEl.children.length) {\n          applyDecoration(lineEl, decoration, \"line\");\n        } else if (!decoration.alwaysWrap && children.length === 1 && children[0].type === \"element\") {\n          applyDecoration(children[0], decoration, \"token\");\n        } else {\n          const wrapper = {\n            type: \"element\",\n            tagName: \"span\",\n            properties: {},\n            children\n          };\n          applyDecoration(wrapper, decoration, \"wrapper\");\n          lineEl.children.splice(startIndex, children.length, wrapper);\n        }\n      }\n      function applyLine(line, decoration) {\n        lines[line] = applyDecoration(lines[line], decoration, \"line\");\n      }\n      function applyDecoration(el, decoration, type) {\n        const properties = decoration.properties || {};\n        const transform = decoration.transform || ((i) => i);\n        el.tagName = decoration.tagName || \"span\";\n        el.properties = {\n          ...el.properties,\n          ...properties,\n          class: el.properties.class\n        };\n        if (decoration.properties?.class)\n          addClassToHast(el, decoration.properties.class);\n        el = transform(el, type) || el;\n        return el;\n      }\n      const lineApplies = [];\n      const sorted = ctx.decorations.sort((a, b) => b.start.offset - a.start.offset || a.end.offset - b.end.offset);\n      for (const decoration of sorted) {\n        const { start, end } = decoration;\n        if (start.line === end.line) {\n          applyLineSection(start.line, start.character, end.character, decoration);\n        } else if (start.line < end.line) {\n          applyLineSection(start.line, start.character, Number.POSITIVE_INFINITY, decoration);\n          for (let i = start.line + 1; i < end.line; i++)\n            lineApplies.unshift(() => applyLine(i, decoration));\n          applyLineSection(end.line, 0, end.character, decoration);\n        }\n      }\n      lineApplies.forEach((i) => i());\n    }\n  };\n}\nfunction verifyIntersections(items) {\n  for (let i = 0; i < items.length; i++) {\n    const foo = items[i];\n    if (foo.start.offset > foo.end.offset)\n      throw new ShikiError$1(`Invalid decoration range: ${JSON.stringify(foo.start)} - ${JSON.stringify(foo.end)}`);\n    for (let j = i + 1; j < items.length; j++) {\n      const bar = items[j];\n      const isFooHasBarStart = foo.start.offset <= bar.start.offset && bar.start.offset < foo.end.offset;\n      const isFooHasBarEnd = foo.start.offset < bar.end.offset && bar.end.offset <= foo.end.offset;\n      const isBarHasFooStart = bar.start.offset <= foo.start.offset && foo.start.offset < bar.end.offset;\n      const isBarHasFooEnd = bar.start.offset < foo.end.offset && foo.end.offset <= bar.end.offset;\n      if (isFooHasBarStart || isFooHasBarEnd || isBarHasFooStart || isBarHasFooEnd) {\n        if (isFooHasBarStart && isFooHasBarEnd)\n          continue;\n        if (isBarHasFooStart && isBarHasFooEnd)\n          continue;\n        throw new ShikiError$1(`Decorations ${JSON.stringify(foo.start)} and ${JSON.stringify(bar.start)} intersect.`);\n      }\n    }\n  }\n}\nfunction stringify(el) {\n  if (el.type === \"text\")\n    return el.value;\n  if (el.type === \"element\")\n    return el.children.map(stringify).join(\"\");\n  return \"\";\n}\n\nconst builtInTransformers = [\n  /* @__PURE__ */ transformerDecorations()\n];\nfunction getTransformers(options) {\n  return [\n    ...options.transformers || [],\n    ...builtInTransformers\n  ];\n}\n\n// src/colors.ts\nvar namedColors = [\n  \"black\",\n  \"red\",\n  \"green\",\n  \"yellow\",\n  \"blue\",\n  \"magenta\",\n  \"cyan\",\n  \"white\",\n  \"brightBlack\",\n  \"brightRed\",\n  \"brightGreen\",\n  \"brightYellow\",\n  \"brightBlue\",\n  \"brightMagenta\",\n  \"brightCyan\",\n  \"brightWhite\"\n];\n\n// src/decorations.ts\nvar decorations = {\n  1: \"bold\",\n  2: \"dim\",\n  3: \"italic\",\n  4: \"underline\",\n  7: \"reverse\",\n  8: \"hidden\",\n  9: \"strikethrough\"\n};\n\n// src/parser.ts\nfunction findSequence(value, position) {\n  const nextEscape = value.indexOf(\"\\x1B\", position);\n  if (nextEscape !== -1) {\n    if (value[nextEscape + 1] === \"[\") {\n      const nextClose = value.indexOf(\"m\", nextEscape);\n      if (nextClose !== -1) {\n        return {\n          sequence: value.substring(nextEscape + 2, nextClose).split(\";\"),\n          startPosition: nextEscape,\n          position: nextClose + 1\n        };\n      }\n    }\n  }\n  return {\n    position: value.length\n  };\n}\nfunction parseColor(sequence) {\n  const colorMode = sequence.shift();\n  if (colorMode === \"2\") {\n    const rgb = sequence.splice(0, 3).map((x) => Number.parseInt(x));\n    if (rgb.length !== 3 || rgb.some((x) => Number.isNaN(x)))\n      return;\n    return {\n      type: \"rgb\",\n      rgb\n    };\n  } else if (colorMode === \"5\") {\n    const index = sequence.shift();\n    if (index) {\n      return { type: \"table\", index: Number(index) };\n    }\n  }\n}\nfunction parseSequence(sequence) {\n  const commands = [];\n  while (sequence.length > 0) {\n    const code = sequence.shift();\n    if (!code)\n      continue;\n    const codeInt = Number.parseInt(code);\n    if (Number.isNaN(codeInt))\n      continue;\n    if (codeInt === 0) {\n      commands.push({ type: \"resetAll\" });\n    } else if (codeInt <= 9) {\n      const decoration = decorations[codeInt];\n      if (decoration) {\n        commands.push({\n          type: \"setDecoration\",\n          value: decorations[codeInt]\n        });\n      }\n    } else if (codeInt <= 29) {\n      const decoration = decorations[codeInt - 20];\n      if (decoration) {\n        commands.push({\n          type: \"resetDecoration\",\n          value: decoration\n        });\n        if (decoration === \"dim\") {\n          commands.push({\n            type: \"resetDecoration\",\n            value: \"bold\"\n          });\n        }\n      }\n    } else if (codeInt <= 37) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 30] }\n      });\n    } else if (codeInt === 38) {\n      const color = parseColor(sequence);\n      if (color) {\n        commands.push({\n          type: \"setForegroundColor\",\n          value: color\n        });\n      }\n    } else if (codeInt === 39) {\n      commands.push({\n        type: \"resetForegroundColor\"\n      });\n    } else if (codeInt <= 47) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 40] }\n      });\n    } else if (codeInt === 48) {\n      const color = parseColor(sequence);\n      if (color) {\n        commands.push({\n          type: \"setBackgroundColor\",\n          value: color\n        });\n      }\n    } else if (codeInt === 49) {\n      commands.push({\n        type: \"resetBackgroundColor\"\n      });\n    } else if (codeInt === 53) {\n      commands.push({\n        type: \"setDecoration\",\n        value: \"overline\"\n      });\n    } else if (codeInt === 55) {\n      commands.push({\n        type: \"resetDecoration\",\n        value: \"overline\"\n      });\n    } else if (codeInt >= 90 && codeInt <= 97) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 90 + 8] }\n      });\n    } else if (codeInt >= 100 && codeInt <= 107) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 100 + 8] }\n      });\n    }\n  }\n  return commands;\n}\nfunction createAnsiSequenceParser() {\n  let foreground = null;\n  let background = null;\n  let decorations2 = /* @__PURE__ */ new Set();\n  return {\n    parse(value) {\n      const tokens = [];\n      let position = 0;\n      do {\n        const findResult = findSequence(value, position);\n        const text = findResult.sequence ? value.substring(position, findResult.startPosition) : value.substring(position);\n        if (text.length > 0) {\n          tokens.push({\n            value: text,\n            foreground,\n            background,\n            decorations: new Set(decorations2)\n          });\n        }\n        if (findResult.sequence) {\n          const commands = parseSequence(findResult.sequence);\n          for (const styleToken of commands) {\n            if (styleToken.type === \"resetAll\") {\n              foreground = null;\n              background = null;\n              decorations2.clear();\n            } else if (styleToken.type === \"resetForegroundColor\") {\n              foreground = null;\n            } else if (styleToken.type === \"resetBackgroundColor\") {\n              background = null;\n            } else if (styleToken.type === \"resetDecoration\") {\n              decorations2.delete(styleToken.value);\n            }\n          }\n          for (const styleToken of commands) {\n            if (styleToken.type === \"setForegroundColor\") {\n              foreground = styleToken.value;\n            } else if (styleToken.type === \"setBackgroundColor\") {\n              background = styleToken.value;\n            } else if (styleToken.type === \"setDecoration\") {\n              decorations2.add(styleToken.value);\n            }\n          }\n        }\n        position = findResult.position;\n      } while (position < value.length);\n      return tokens;\n    }\n  };\n}\n\n// src/palette.ts\nvar defaultNamedColorsMap = {\n  black: \"#000000\",\n  red: \"#bb0000\",\n  green: \"#00bb00\",\n  yellow: \"#bbbb00\",\n  blue: \"#0000bb\",\n  magenta: \"#ff00ff\",\n  cyan: \"#00bbbb\",\n  white: \"#eeeeee\",\n  brightBlack: \"#555555\",\n  brightRed: \"#ff5555\",\n  brightGreen: \"#00ff00\",\n  brightYellow: \"#ffff55\",\n  brightBlue: \"#5555ff\",\n  brightMagenta: \"#ff55ff\",\n  brightCyan: \"#55ffff\",\n  brightWhite: \"#ffffff\"\n};\nfunction createColorPalette(namedColorsMap = defaultNamedColorsMap) {\n  function namedColor(name) {\n    return namedColorsMap[name];\n  }\n  function rgbColor(rgb) {\n    return `#${rgb.map((x) => Math.max(0, Math.min(x, 255)).toString(16).padStart(2, \"0\")).join(\"\")}`;\n  }\n  let colorTable;\n  function getColorTable() {\n    if (colorTable) {\n      return colorTable;\n    }\n    colorTable = [];\n    for (let i = 0; i < namedColors.length; i++) {\n      colorTable.push(namedColor(namedColors[i]));\n    }\n    let levels = [0, 95, 135, 175, 215, 255];\n    for (let r = 0; r < 6; r++) {\n      for (let g = 0; g < 6; g++) {\n        for (let b = 0; b < 6; b++) {\n          colorTable.push(rgbColor([levels[r], levels[g], levels[b]]));\n        }\n      }\n    }\n    let level = 8;\n    for (let i = 0; i < 24; i++, level += 10) {\n      colorTable.push(rgbColor([level, level, level]));\n    }\n    return colorTable;\n  }\n  function tableColor(index) {\n    return getColorTable()[index];\n  }\n  function value(color) {\n    switch (color.type) {\n      case \"named\":\n        return namedColor(color.name);\n      case \"rgb\":\n        return rgbColor(color.rgb);\n      case \"table\":\n        return tableColor(color.index);\n    }\n  }\n  return {\n    value\n  };\n}\n\nfunction tokenizeAnsiWithTheme(theme, fileContents, options) {\n  const colorReplacements = resolveColorReplacements(theme, options);\n  const lines = splitLines(fileContents);\n  const colorPalette = createColorPalette(\n    Object.fromEntries(\n      namedColors.map((name) => [\n        name,\n        theme.colors?.[`terminal.ansi${name[0].toUpperCase()}${name.substring(1)}`]\n      ])\n    )\n  );\n  const parser = createAnsiSequenceParser();\n  return lines.map(\n    (line) => parser.parse(line[0]).map((token) => {\n      let color;\n      let bgColor;\n      if (token.decorations.has(\"reverse\")) {\n        color = token.background ? colorPalette.value(token.background) : theme.bg;\n        bgColor = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n      } else {\n        color = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n        bgColor = token.background ? colorPalette.value(token.background) : void 0;\n      }\n      color = applyColorReplacements(color, colorReplacements);\n      bgColor = applyColorReplacements(bgColor, colorReplacements);\n      if (token.decorations.has(\"dim\"))\n        color = dimColor(color);\n      let fontStyle = FontStyle.None;\n      if (token.decorations.has(\"bold\"))\n        fontStyle |= FontStyle.Bold;\n      if (token.decorations.has(\"italic\"))\n        fontStyle |= FontStyle.Italic;\n      if (token.decorations.has(\"underline\"))\n        fontStyle |= FontStyle.Underline;\n      if (token.decorations.has(\"strikethrough\"))\n        fontStyle |= FontStyle.Strikethrough;\n      return {\n        content: token.value,\n        offset: line[1],\n        // TODO: more accurate offset? might need to fork ansi-sequence-parser\n        color,\n        bgColor,\n        fontStyle\n      };\n    })\n  );\n}\nfunction dimColor(color) {\n  const hexMatch = color.match(/#([0-9a-f]{3})([0-9a-f]{3})?([0-9a-f]{2})?/);\n  if (hexMatch) {\n    if (hexMatch[3]) {\n      const alpha = Math.round(Number.parseInt(hexMatch[3], 16) / 2).toString(16).padStart(2, \"0\");\n      return `#${hexMatch[1]}${hexMatch[2]}${alpha}`;\n    } else if (hexMatch[2]) {\n      return `#${hexMatch[1]}${hexMatch[2]}80`;\n    } else {\n      return `#${Array.from(hexMatch[1]).map((x) => `${x}${x}`).join(\"\")}80`;\n    }\n  }\n  const cssVarMatch = color.match(/var\\((--[\\w-]+-ansi-[\\w-]+)\\)/);\n  if (cssVarMatch)\n    return `var(${cssVarMatch[1]}-dim)`;\n  return color;\n}\n\nfunction codeToTokensBase(internal, code, options = {}) {\n  const {\n    lang = \"text\",\n    theme: themeName = internal.getLoadedThemes()[0]\n  } = options;\n  if (isPlainLang(lang) || isNoneTheme(themeName))\n    return splitLines(code).map((line) => [{ content: line[0], offset: line[1] }]);\n  const { theme, colorMap } = internal.setTheme(themeName);\n  if (lang === \"ansi\")\n    return tokenizeAnsiWithTheme(theme, code, options);\n  const _grammar = internal.getLanguage(lang);\n  if (options.grammarState) {\n    if (options.grammarState.lang !== _grammar.name) {\n      throw new ShikiError$1(`Grammar state language \"${options.grammarState.lang}\" does not match highlight language \"${_grammar.name}\"`);\n    }\n    if (!options.grammarState.themes.includes(theme.name)) {\n      throw new ShikiError$1(`Grammar state themes \"${options.grammarState.themes}\" do not contain highlight theme \"${theme.name}\"`);\n    }\n  }\n  return tokenizeWithTheme(code, _grammar, theme, colorMap, options);\n}\nfunction getLastGrammarState(...args) {\n  if (args.length === 2) {\n    return getLastGrammarStateFromMap(args[1]);\n  }\n  const [internal, code, options = {}] = args;\n  const {\n    lang = \"text\",\n    theme: themeName = internal.getLoadedThemes()[0]\n  } = options;\n  if (isPlainLang(lang) || isNoneTheme(themeName))\n    throw new ShikiError$1(\"Plain language does not have grammar state\");\n  if (lang === \"ansi\")\n    throw new ShikiError$1(\"ANSI language does not have grammar state\");\n  const { theme, colorMap } = internal.setTheme(themeName);\n  const _grammar = internal.getLanguage(lang);\n  return new GrammarState(\n    _tokenizeWithTheme(code, _grammar, theme, colorMap, options).stateStack,\n    _grammar.name,\n    theme.name\n  );\n}\nfunction tokenizeWithTheme(code, grammar, theme, colorMap, options) {\n  const result = _tokenizeWithTheme(code, grammar, theme, colorMap, options);\n  const grammarState = new GrammarState(\n    _tokenizeWithTheme(code, grammar, theme, colorMap, options).stateStack,\n    grammar.name,\n    theme.name\n  );\n  setLastGrammarStateToMap(result.tokens, grammarState);\n  return result.tokens;\n}\nfunction _tokenizeWithTheme(code, grammar, theme, colorMap, options) {\n  const colorReplacements = resolveColorReplacements(theme, options);\n  const {\n    tokenizeMaxLineLength = 0,\n    tokenizeTimeLimit = 500\n  } = options;\n  const lines = splitLines(code);\n  let stateStack = options.grammarState ? getGrammarStack(options.grammarState, theme.name) ?? INITIAL : options.grammarContextCode != null ? _tokenizeWithTheme(\n    options.grammarContextCode,\n    grammar,\n    theme,\n    colorMap,\n    {\n      ...options,\n      grammarState: void 0,\n      grammarContextCode: void 0\n    }\n  ).stateStack : INITIAL;\n  let actual = [];\n  const final = [];\n  for (let i = 0, len = lines.length; i < len; i++) {\n    const [line, lineOffset] = lines[i];\n    if (line === \"\") {\n      actual = [];\n      final.push([]);\n      continue;\n    }\n    if (tokenizeMaxLineLength > 0 && line.length >= tokenizeMaxLineLength) {\n      actual = [];\n      final.push([{\n        content: line,\n        offset: lineOffset,\n        color: \"\",\n        fontStyle: 0\n      }]);\n      continue;\n    }\n    let resultWithScopes;\n    let tokensWithScopes;\n    let tokensWithScopesIndex;\n    if (options.includeExplanation) {\n      resultWithScopes = grammar.tokenizeLine(line, stateStack, tokenizeTimeLimit);\n      tokensWithScopes = resultWithScopes.tokens;\n      tokensWithScopesIndex = 0;\n    }\n    const result = grammar.tokenizeLine2(line, stateStack, tokenizeTimeLimit);\n    const tokensLength = result.tokens.length / 2;\n    for (let j = 0; j < tokensLength; j++) {\n      const startIndex = result.tokens[2 * j];\n      const nextStartIndex = j + 1 < tokensLength ? result.tokens[2 * j + 2] : line.length;\n      if (startIndex === nextStartIndex)\n        continue;\n      const metadata = result.tokens[2 * j + 1];\n      const color = applyColorReplacements(\n        colorMap[EncodedTokenMetadata.getForeground(metadata)],\n        colorReplacements\n      );\n      const fontStyle = EncodedTokenMetadata.getFontStyle(metadata);\n      const token = {\n        content: line.substring(startIndex, nextStartIndex),\n        offset: lineOffset + startIndex,\n        color,\n        fontStyle\n      };\n      if (options.includeExplanation) {\n        const themeSettingsSelectors = [];\n        if (options.includeExplanation !== \"scopeName\") {\n          for (const setting of theme.settings) {\n            let selectors;\n            switch (typeof setting.scope) {\n              case \"string\":\n                selectors = setting.scope.split(/,/).map((scope) => scope.trim());\n                break;\n              case \"object\":\n                selectors = setting.scope;\n                break;\n              default:\n                continue;\n            }\n            themeSettingsSelectors.push({\n              settings: setting,\n              selectors: selectors.map((selector) => selector.split(/ /))\n            });\n          }\n        }\n        token.explanation = [];\n        let offset = 0;\n        while (startIndex + offset < nextStartIndex) {\n          const tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];\n          const tokenWithScopesText = line.substring(\n            tokenWithScopes.startIndex,\n            tokenWithScopes.endIndex\n          );\n          offset += tokenWithScopesText.length;\n          token.explanation.push({\n            content: tokenWithScopesText,\n            scopes: options.includeExplanation === \"scopeName\" ? explainThemeScopesNameOnly(\n              tokenWithScopes.scopes\n            ) : explainThemeScopesFull(\n              themeSettingsSelectors,\n              tokenWithScopes.scopes\n            )\n          });\n          tokensWithScopesIndex += 1;\n        }\n      }\n      actual.push(token);\n    }\n    final.push(actual);\n    actual = [];\n    stateStack = result.ruleStack;\n  }\n  return {\n    tokens: final,\n    stateStack\n  };\n}\nfunction explainThemeScopesNameOnly(scopes) {\n  return scopes.map((scope) => ({ scopeName: scope }));\n}\nfunction explainThemeScopesFull(themeSelectors, scopes) {\n  const result = [];\n  for (let i = 0, len = scopes.length; i < len; i++) {\n    const scope = scopes[i];\n    result[i] = {\n      scopeName: scope,\n      themeMatches: explainThemeScope(themeSelectors, scope, scopes.slice(0, i))\n    };\n  }\n  return result;\n}\nfunction matchesOne(selector, scope) {\n  return selector === scope || scope.substring(0, selector.length) === selector && scope[selector.length] === \".\";\n}\nfunction matches(selectors, scope, parentScopes) {\n  if (!matchesOne(selectors[selectors.length - 1], scope))\n    return false;\n  let selectorParentIndex = selectors.length - 2;\n  let parentIndex = parentScopes.length - 1;\n  while (selectorParentIndex >= 0 && parentIndex >= 0) {\n    if (matchesOne(selectors[selectorParentIndex], parentScopes[parentIndex]))\n      selectorParentIndex -= 1;\n    parentIndex -= 1;\n  }\n  if (selectorParentIndex === -1)\n    return true;\n  return false;\n}\nfunction explainThemeScope(themeSettingsSelectors, scope, parentScopes) {\n  const result = [];\n  for (const { selectors, settings } of themeSettingsSelectors) {\n    for (const selectorPieces of selectors) {\n      if (matches(selectorPieces, scope, parentScopes)) {\n        result.push(settings);\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nfunction codeToTokensWithThemes(internal, code, options) {\n  const themes = Object.entries(options.themes).filter((i) => i[1]).map((i) => ({ color: i[0], theme: i[1] }));\n  const themedTokens = themes.map((t) => {\n    const tokens2 = codeToTokensBase(internal, code, {\n      ...options,\n      theme: t.theme\n    });\n    const state = getLastGrammarStateFromMap(tokens2);\n    const theme = typeof t.theme === \"string\" ? t.theme : t.theme.name;\n    return {\n      tokens: tokens2,\n      state,\n      theme\n    };\n  });\n  const tokens = syncThemesTokenization(\n    ...themedTokens.map((i) => i.tokens)\n  );\n  const mergedTokens = tokens[0].map(\n    (line, lineIdx) => line.map((_token, tokenIdx) => {\n      const mergedToken = {\n        content: _token.content,\n        variants: {},\n        offset: _token.offset\n      };\n      if (\"includeExplanation\" in options && options.includeExplanation) {\n        mergedToken.explanation = _token.explanation;\n      }\n      tokens.forEach((t, themeIdx) => {\n        const {\n          content: _,\n          explanation: __,\n          offset: ___,\n          ...styles\n        } = t[lineIdx][tokenIdx];\n        mergedToken.variants[themes[themeIdx].color] = styles;\n      });\n      return mergedToken;\n    })\n  );\n  const mergedGrammarState = themedTokens[0].state ? new GrammarState(\n    Object.fromEntries(themedTokens.map((s) => [s.theme, s.state?.getInternalStack(s.theme)])),\n    themedTokens[0].state.lang\n  ) : void 0;\n  if (mergedGrammarState)\n    setLastGrammarStateToMap(mergedTokens, mergedGrammarState);\n  return mergedTokens;\n}\nfunction syncThemesTokenization(...themes) {\n  const outThemes = themes.map(() => []);\n  const count = themes.length;\n  for (let i = 0; i < themes[0].length; i++) {\n    const lines = themes.map((t) => t[i]);\n    const outLines = outThemes.map(() => []);\n    outThemes.forEach((t, i2) => t.push(outLines[i2]));\n    const indexes = lines.map(() => 0);\n    const current = lines.map((l) => l[0]);\n    while (current.every((t) => t)) {\n      const minLength = Math.min(...current.map((t) => t.content.length));\n      for (let n = 0; n < count; n++) {\n        const token = current[n];\n        if (token.content.length === minLength) {\n          outLines[n].push(token);\n          indexes[n] += 1;\n          current[n] = lines[n][indexes[n]];\n        } else {\n          outLines[n].push({\n            ...token,\n            content: token.content.slice(0, minLength)\n          });\n          current[n] = {\n            ...token,\n            content: token.content.slice(minLength),\n            offset: token.offset + minLength\n          };\n        }\n      }\n    }\n  }\n  return outThemes;\n}\n\nfunction codeToTokens(internal, code, options) {\n  let bg;\n  let fg;\n  let tokens;\n  let themeName;\n  let rootStyle;\n  let grammarState;\n  if (\"themes\" in options) {\n    const {\n      defaultColor = \"light\",\n      cssVariablePrefix = \"--shiki-\"\n    } = options;\n    const themes = Object.entries(options.themes).filter((i) => i[1]).map((i) => ({ color: i[0], theme: i[1] })).sort((a, b) => a.color === defaultColor ? -1 : b.color === defaultColor ? 1 : 0);\n    if (themes.length === 0)\n      throw new ShikiError$1(\"`themes` option must not be empty\");\n    const themeTokens = codeToTokensWithThemes(\n      internal,\n      code,\n      options\n    );\n    grammarState = getLastGrammarStateFromMap(themeTokens);\n    if (defaultColor && !themes.find((t) => t.color === defaultColor))\n      throw new ShikiError$1(`\\`themes\\` option must contain the defaultColor key \\`${defaultColor}\\``);\n    const themeRegs = themes.map((t) => internal.getTheme(t.theme));\n    const themesOrder = themes.map((t) => t.color);\n    tokens = themeTokens.map((line) => line.map((token) => flatTokenVariants(token, themesOrder, cssVariablePrefix, defaultColor)));\n    if (grammarState)\n      setLastGrammarStateToMap(tokens, grammarState);\n    const themeColorReplacements = themes.map((t) => resolveColorReplacements(t.theme, options));\n    fg = themes.map((t, idx) => (idx === 0 && defaultColor ? \"\" : `${cssVariablePrefix + t.color}:`) + (applyColorReplacements(themeRegs[idx].fg, themeColorReplacements[idx]) || \"inherit\")).join(\";\");\n    bg = themes.map((t, idx) => (idx === 0 && defaultColor ? \"\" : `${cssVariablePrefix + t.color}-bg:`) + (applyColorReplacements(themeRegs[idx].bg, themeColorReplacements[idx]) || \"inherit\")).join(\";\");\n    themeName = `shiki-themes ${themeRegs.map((t) => t.name).join(\" \")}`;\n    rootStyle = defaultColor ? void 0 : [fg, bg].join(\";\");\n  } else if (\"theme\" in options) {\n    const colorReplacements = resolveColorReplacements(options.theme, options);\n    tokens = codeToTokensBase(\n      internal,\n      code,\n      options\n    );\n    const _theme = internal.getTheme(options.theme);\n    bg = applyColorReplacements(_theme.bg, colorReplacements);\n    fg = applyColorReplacements(_theme.fg, colorReplacements);\n    themeName = _theme.name;\n    grammarState = getLastGrammarStateFromMap(tokens);\n  } else {\n    throw new ShikiError$1(\"Invalid options, either `theme` or `themes` must be provided\");\n  }\n  return {\n    tokens,\n    fg,\n    bg,\n    themeName,\n    rootStyle,\n    grammarState\n  };\n}\n\nfunction codeToHast(internal, code, options, transformerContext = {\n  meta: {},\n  options,\n  codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n  codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options)\n}) {\n  let input = code;\n  for (const transformer of getTransformers(options))\n    input = transformer.preprocess?.call(transformerContext, input, options) || input;\n  let {\n    tokens,\n    fg,\n    bg,\n    themeName,\n    rootStyle,\n    grammarState\n  } = codeToTokens(internal, input, options);\n  const {\n    mergeWhitespaces = true,\n    mergeSameStyleTokens = false\n  } = options;\n  if (mergeWhitespaces === true)\n    tokens = mergeWhitespaceTokens(tokens);\n  else if (mergeWhitespaces === \"never\")\n    tokens = splitWhitespaceTokens(tokens);\n  if (mergeSameStyleTokens) {\n    tokens = mergeAdjacentStyledTokens(tokens);\n  }\n  const contextSource = {\n    ...transformerContext,\n    get source() {\n      return input;\n    }\n  };\n  for (const transformer of getTransformers(options))\n    tokens = transformer.tokens?.call(contextSource, tokens) || tokens;\n  return tokensToHast(\n    tokens,\n    {\n      ...options,\n      fg,\n      bg,\n      themeName,\n      rootStyle\n    },\n    contextSource,\n    grammarState\n  );\n}\nfunction tokensToHast(tokens, options, transformerContext, grammarState = getLastGrammarStateFromMap(tokens)) {\n  const transformers = getTransformers(options);\n  const lines = [];\n  const root = {\n    type: \"root\",\n    children: []\n  };\n  const {\n    structure = \"classic\",\n    tabindex = \"0\"\n  } = options;\n  let preNode = {\n    type: \"element\",\n    tagName: \"pre\",\n    properties: {\n      class: `shiki ${options.themeName || \"\"}`,\n      style: options.rootStyle || `background-color:${options.bg};color:${options.fg}`,\n      ...tabindex !== false && tabindex != null ? {\n        tabindex: tabindex.toString()\n      } : {},\n      ...Object.fromEntries(\n        Array.from(\n          Object.entries(options.meta || {})\n        ).filter(([key]) => !key.startsWith(\"_\"))\n      )\n    },\n    children: []\n  };\n  let codeNode = {\n    type: \"element\",\n    tagName: \"code\",\n    properties: {},\n    children: lines\n  };\n  const lineNodes = [];\n  const context = {\n    ...transformerContext,\n    structure,\n    addClassToHast,\n    get source() {\n      return transformerContext.source;\n    },\n    get tokens() {\n      return tokens;\n    },\n    get options() {\n      return options;\n    },\n    get root() {\n      return root;\n    },\n    get pre() {\n      return preNode;\n    },\n    get code() {\n      return codeNode;\n    },\n    get lines() {\n      return lineNodes;\n    }\n  };\n  tokens.forEach((line, idx) => {\n    if (idx) {\n      if (structure === \"inline\")\n        root.children.push({ type: \"element\", tagName: \"br\", properties: {}, children: [] });\n      else if (structure === \"classic\")\n        lines.push({ type: \"text\", value: \"\\n\" });\n    }\n    let lineNode = {\n      type: \"element\",\n      tagName: \"span\",\n      properties: { class: \"line\" },\n      children: []\n    };\n    let col = 0;\n    for (const token of line) {\n      let tokenNode = {\n        type: \"element\",\n        tagName: \"span\",\n        properties: {\n          ...token.htmlAttrs\n        },\n        children: [{ type: \"text\", value: token.content }]\n      };\n      const style = stringifyTokenStyle(token.htmlStyle || getTokenStyleObject(token));\n      if (style)\n        tokenNode.properties.style = style;\n      for (const transformer of transformers)\n        tokenNode = transformer?.span?.call(context, tokenNode, idx + 1, col, lineNode, token) || tokenNode;\n      if (structure === \"inline\")\n        root.children.push(tokenNode);\n      else if (structure === \"classic\")\n        lineNode.children.push(tokenNode);\n      col += token.content.length;\n    }\n    if (structure === \"classic\") {\n      for (const transformer of transformers)\n        lineNode = transformer?.line?.call(context, lineNode, idx + 1) || lineNode;\n      lineNodes.push(lineNode);\n      lines.push(lineNode);\n    }\n  });\n  if (structure === \"classic\") {\n    for (const transformer of transformers)\n      codeNode = transformer?.code?.call(context, codeNode) || codeNode;\n    preNode.children.push(codeNode);\n    for (const transformer of transformers)\n      preNode = transformer?.pre?.call(context, preNode) || preNode;\n    root.children.push(preNode);\n  }\n  let result = root;\n  for (const transformer of transformers)\n    result = transformer?.root?.call(context, result) || result;\n  if (grammarState)\n    setLastGrammarStateToMap(result, grammarState);\n  return result;\n}\nfunction mergeWhitespaceTokens(tokens) {\n  return tokens.map((line) => {\n    const newLine = [];\n    let carryOnContent = \"\";\n    let firstOffset = 0;\n    line.forEach((token, idx) => {\n      const isDecorated = token.fontStyle && (token.fontStyle & FontStyle.Underline || token.fontStyle & FontStyle.Strikethrough);\n      const couldMerge = !isDecorated;\n      if (couldMerge && token.content.match(/^\\s+$/) && line[idx + 1]) {\n        if (!firstOffset)\n          firstOffset = token.offset;\n        carryOnContent += token.content;\n      } else {\n        if (carryOnContent) {\n          if (couldMerge) {\n            newLine.push({\n              ...token,\n              offset: firstOffset,\n              content: carryOnContent + token.content\n            });\n          } else {\n            newLine.push(\n              {\n                content: carryOnContent,\n                offset: firstOffset\n              },\n              token\n            );\n          }\n          firstOffset = 0;\n          carryOnContent = \"\";\n        } else {\n          newLine.push(token);\n        }\n      }\n    });\n    return newLine;\n  });\n}\nfunction splitWhitespaceTokens(tokens) {\n  return tokens.map((line) => {\n    return line.flatMap((token) => {\n      if (token.content.match(/^\\s+$/))\n        return token;\n      const match = token.content.match(/^(\\s*)(.*?)(\\s*)$/);\n      if (!match)\n        return token;\n      const [, leading, content, trailing] = match;\n      if (!leading && !trailing)\n        return token;\n      const expanded = [{\n        ...token,\n        offset: token.offset + leading.length,\n        content\n      }];\n      if (leading) {\n        expanded.unshift({\n          content: leading,\n          offset: token.offset\n        });\n      }\n      if (trailing) {\n        expanded.push({\n          content: trailing,\n          offset: token.offset + leading.length + content.length\n        });\n      }\n      return expanded;\n    });\n  });\n}\nfunction mergeAdjacentStyledTokens(tokens) {\n  return tokens.map((line) => {\n    const newLine = [];\n    for (const token of line) {\n      if (newLine.length === 0) {\n        newLine.push({ ...token });\n        continue;\n      }\n      const prevToken = newLine[newLine.length - 1];\n      const prevStyle = prevToken.htmlStyle || stringifyTokenStyle(getTokenStyleObject(prevToken));\n      const currentStyle = token.htmlStyle || stringifyTokenStyle(getTokenStyleObject(token));\n      const isPrevDecorated = prevToken.fontStyle && (prevToken.fontStyle & FontStyle.Underline || prevToken.fontStyle & FontStyle.Strikethrough);\n      const isDecorated = token.fontStyle && (token.fontStyle & FontStyle.Underline || token.fontStyle & FontStyle.Strikethrough);\n      if (!isPrevDecorated && !isDecorated && prevStyle === currentStyle) {\n        prevToken.content += token.content;\n      } else {\n        newLine.push({ ...token });\n      }\n    }\n    return newLine;\n  });\n}\n\nconst hastToHtml = toHtml;\nfunction codeToHtml(internal, code, options) {\n  const context = {\n    meta: {},\n    options,\n    codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n    codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options)\n  };\n  let result = hastToHtml(codeToHast(internal, code, options, context));\n  for (const transformer of getTransformers(options))\n    result = transformer.postprocess?.call(context, result, options) || result;\n  return result;\n}\n\nconst VSCODE_FALLBACK_EDITOR_FG = { light: \"#333333\", dark: \"#bbbbbb\" };\nconst VSCODE_FALLBACK_EDITOR_BG = { light: \"#fffffe\", dark: \"#1e1e1e\" };\nconst RESOLVED_KEY = \"__shiki_resolved\";\nfunction normalizeTheme(rawTheme) {\n  if (rawTheme?.[RESOLVED_KEY])\n    return rawTheme;\n  const theme = {\n    ...rawTheme\n  };\n  if (theme.tokenColors && !theme.settings) {\n    theme.settings = theme.tokenColors;\n    delete theme.tokenColors;\n  }\n  theme.type ||= \"dark\";\n  theme.colorReplacements = { ...theme.colorReplacements };\n  theme.settings ||= [];\n  let { bg, fg } = theme;\n  if (!bg || !fg) {\n    const globalSetting = theme.settings ? theme.settings.find((s) => !s.name && !s.scope) : void 0;\n    if (globalSetting?.settings?.foreground)\n      fg = globalSetting.settings.foreground;\n    if (globalSetting?.settings?.background)\n      bg = globalSetting.settings.background;\n    if (!fg && theme?.colors?.[\"editor.foreground\"])\n      fg = theme.colors[\"editor.foreground\"];\n    if (!bg && theme?.colors?.[\"editor.background\"])\n      bg = theme.colors[\"editor.background\"];\n    if (!fg)\n      fg = theme.type === \"light\" ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;\n    if (!bg)\n      bg = theme.type === \"light\" ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;\n    theme.fg = fg;\n    theme.bg = bg;\n  }\n  if (!(theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope)) {\n    theme.settings.unshift({\n      settings: {\n        foreground: theme.fg,\n        background: theme.bg\n      }\n    });\n  }\n  let replacementCount = 0;\n  const replacementMap = /* @__PURE__ */ new Map();\n  function getReplacementColor(value) {\n    if (replacementMap.has(value))\n      return replacementMap.get(value);\n    replacementCount += 1;\n    const hex = `#${replacementCount.toString(16).padStart(8, \"0\").toLowerCase()}`;\n    if (theme.colorReplacements?.[`#${hex}`])\n      return getReplacementColor(value);\n    replacementMap.set(value, hex);\n    return hex;\n  }\n  theme.settings = theme.settings.map((setting) => {\n    const replaceFg = setting.settings?.foreground && !setting.settings.foreground.startsWith(\"#\");\n    const replaceBg = setting.settings?.background && !setting.settings.background.startsWith(\"#\");\n    if (!replaceFg && !replaceBg)\n      return setting;\n    const clone = {\n      ...setting,\n      settings: {\n        ...setting.settings\n      }\n    };\n    if (replaceFg) {\n      const replacement = getReplacementColor(setting.settings.foreground);\n      theme.colorReplacements[replacement] = setting.settings.foreground;\n      clone.settings.foreground = replacement;\n    }\n    if (replaceBg) {\n      const replacement = getReplacementColor(setting.settings.background);\n      theme.colorReplacements[replacement] = setting.settings.background;\n      clone.settings.background = replacement;\n    }\n    return clone;\n  });\n  for (const key of Object.keys(theme.colors || {})) {\n    if (key === \"editor.foreground\" || key === \"editor.background\" || key.startsWith(\"terminal.ansi\")) {\n      if (!theme.colors[key]?.startsWith(\"#\")) {\n        const replacement = getReplacementColor(theme.colors[key]);\n        theme.colorReplacements[replacement] = theme.colors[key];\n        theme.colors[key] = replacement;\n      }\n    }\n  }\n  Object.defineProperty(theme, RESOLVED_KEY, {\n    enumerable: false,\n    writable: false,\n    value: true\n  });\n  return theme;\n}\n\nasync function resolveLangs(langs) {\n  return Array.from(new Set((await Promise.all(\n    langs.filter((l) => !isSpecialLang(l)).map(async (lang) => await normalizeGetter(lang).then((r) => Array.isArray(r) ? r : [r]))\n  )).flat()));\n}\nasync function resolveThemes(themes) {\n  const resolved = await Promise.all(\n    themes.map(\n      async (theme) => isSpecialTheme(theme) ? null : normalizeTheme(await normalizeGetter(theme))\n    )\n  );\n  return resolved.filter((i) => !!i);\n}\n\nlet _emitDeprecation = 3;\nlet _emitError = false;\nfunction enableDeprecationWarnings(emitDeprecation = true, emitError = false) {\n  _emitDeprecation = emitDeprecation;\n  _emitError = emitError;\n}\nfunction warnDeprecated(message, version = 3) {\n  if (!_emitDeprecation)\n    return;\n  if (typeof _emitDeprecation === \"number\" && version > _emitDeprecation)\n    return;\n  if (_emitError) {\n    throw new Error(`[SHIKI DEPRECATE]: ${message}`);\n  } else {\n    console.trace(`[SHIKI DEPRECATE]: ${message}`);\n  }\n}\n\nclass ShikiError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ShikiError\";\n  }\n}\n\nclass Registry extends Registry$1 {\n  constructor(_resolver, _themes, _langs, _alias = {}) {\n    super(_resolver);\n    this._resolver = _resolver;\n    this._themes = _themes;\n    this._langs = _langs;\n    this._alias = _alias;\n    this._themes.map((t) => this.loadTheme(t));\n    this.loadLanguages(this._langs);\n  }\n  _resolvedThemes = /* @__PURE__ */ new Map();\n  _resolvedGrammars = /* @__PURE__ */ new Map();\n  _langMap = /* @__PURE__ */ new Map();\n  _langGraph = /* @__PURE__ */ new Map();\n  _textmateThemeCache = /* @__PURE__ */ new WeakMap();\n  _loadedThemesCache = null;\n  _loadedLanguagesCache = null;\n  getTheme(theme) {\n    if (typeof theme === \"string\")\n      return this._resolvedThemes.get(theme);\n    else\n      return this.loadTheme(theme);\n  }\n  loadTheme(theme) {\n    const _theme = normalizeTheme(theme);\n    if (_theme.name) {\n      this._resolvedThemes.set(_theme.name, _theme);\n      this._loadedThemesCache = null;\n    }\n    return _theme;\n  }\n  getLoadedThemes() {\n    if (!this._loadedThemesCache)\n      this._loadedThemesCache = [...this._resolvedThemes.keys()];\n    return this._loadedThemesCache;\n  }\n  // Override and re-implement this method to cache the textmate themes as `TextMateTheme.createFromRawTheme`\n  // is expensive. Themes can switch often especially for dual-theme support.\n  //\n  // The parent class also accepts `colorMap` as the second parameter, but since we don't use that,\n  // we omit here so it's easier to cache the themes.\n  setTheme(theme) {\n    let textmateTheme = this._textmateThemeCache.get(theme);\n    if (!textmateTheme) {\n      textmateTheme = Theme.createFromRawTheme(theme);\n      this._textmateThemeCache.set(theme, textmateTheme);\n    }\n    this._syncRegistry.setTheme(textmateTheme);\n  }\n  getGrammar(name) {\n    if (this._alias[name]) {\n      const resolved = /* @__PURE__ */ new Set([name]);\n      while (this._alias[name]) {\n        name = this._alias[name];\n        if (resolved.has(name))\n          throw new ShikiError(`Circular alias \\`${Array.from(resolved).join(\" -> \")} -> ${name}\\``);\n        resolved.add(name);\n      }\n    }\n    return this._resolvedGrammars.get(name);\n  }\n  loadLanguage(lang) {\n    if (this.getGrammar(lang.name))\n      return;\n    const embeddedLazilyBy = new Set(\n      [...this._langMap.values()].filter((i) => i.embeddedLangsLazy?.includes(lang.name))\n    );\n    this._resolver.addLanguage(lang);\n    const grammarConfig = {\n      balancedBracketSelectors: lang.balancedBracketSelectors || [\"*\"],\n      unbalancedBracketSelectors: lang.unbalancedBracketSelectors || []\n    };\n    this._syncRegistry._rawGrammars.set(lang.scopeName, lang);\n    const g = this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);\n    g.name = lang.name;\n    this._resolvedGrammars.set(lang.name, g);\n    if (lang.aliases) {\n      lang.aliases.forEach((alias) => {\n        this._alias[alias] = lang.name;\n      });\n    }\n    this._loadedLanguagesCache = null;\n    if (embeddedLazilyBy.size) {\n      for (const e of embeddedLazilyBy) {\n        this._resolvedGrammars.delete(e.name);\n        this._loadedLanguagesCache = null;\n        this._syncRegistry?._injectionGrammars?.delete(e.scopeName);\n        this._syncRegistry?._grammars?.delete(e.scopeName);\n        this.loadLanguage(this._langMap.get(e.name));\n      }\n    }\n  }\n  dispose() {\n    super.dispose();\n    this._resolvedThemes.clear();\n    this._resolvedGrammars.clear();\n    this._langMap.clear();\n    this._langGraph.clear();\n    this._loadedThemesCache = null;\n  }\n  loadLanguages(langs) {\n    for (const lang of langs)\n      this.resolveEmbeddedLanguages(lang);\n    const langsGraphArray = Array.from(this._langGraph.entries());\n    const missingLangs = langsGraphArray.filter(([_, lang]) => !lang);\n    if (missingLangs.length) {\n      const dependents = langsGraphArray.filter(([_, lang]) => lang && lang.embeddedLangs?.some((l) => missingLangs.map(([name]) => name).includes(l))).filter((lang) => !missingLangs.includes(lang));\n      throw new ShikiError(`Missing languages ${missingLangs.map(([name]) => `\\`${name}\\``).join(\", \")}, required by ${dependents.map(([name]) => `\\`${name}\\``).join(\", \")}`);\n    }\n    for (const [_, lang] of langsGraphArray)\n      this._resolver.addLanguage(lang);\n    for (const [_, lang] of langsGraphArray)\n      this.loadLanguage(lang);\n  }\n  getLoadedLanguages() {\n    if (!this._loadedLanguagesCache) {\n      this._loadedLanguagesCache = [\n        .../* @__PURE__ */ new Set([...this._resolvedGrammars.keys(), ...Object.keys(this._alias)])\n      ];\n    }\n    return this._loadedLanguagesCache;\n  }\n  resolveEmbeddedLanguages(lang) {\n    this._langMap.set(lang.name, lang);\n    this._langGraph.set(lang.name, lang);\n    if (lang.embeddedLangs) {\n      for (const embeddedLang of lang.embeddedLangs)\n        this._langGraph.set(embeddedLang, this._langMap.get(embeddedLang));\n    }\n  }\n}\n\nclass Resolver {\n  _langs = /* @__PURE__ */ new Map();\n  _scopeToLang = /* @__PURE__ */ new Map();\n  _injections = /* @__PURE__ */ new Map();\n  _onigLib;\n  constructor(engine, langs) {\n    this._onigLib = {\n      createOnigScanner: (patterns) => engine.createScanner(patterns),\n      createOnigString: (s) => engine.createString(s)\n    };\n    langs.forEach((i) => this.addLanguage(i));\n  }\n  get onigLib() {\n    return this._onigLib;\n  }\n  getLangRegistration(langIdOrAlias) {\n    return this._langs.get(langIdOrAlias);\n  }\n  loadGrammar(scopeName) {\n    return this._scopeToLang.get(scopeName);\n  }\n  addLanguage(l) {\n    this._langs.set(l.name, l);\n    if (l.aliases) {\n      l.aliases.forEach((a) => {\n        this._langs.set(a, l);\n      });\n    }\n    this._scopeToLang.set(l.scopeName, l);\n    if (l.injectTo) {\n      l.injectTo.forEach((i) => {\n        if (!this._injections.get(i))\n          this._injections.set(i, []);\n        this._injections.get(i).push(l.scopeName);\n      });\n    }\n  }\n  getInjections(scopeName) {\n    const scopeParts = scopeName.split(\".\");\n    let injections = [];\n    for (let i = 1; i <= scopeParts.length; i++) {\n      const subScopeName = scopeParts.slice(0, i).join(\".\");\n      injections = [...injections, ...this._injections.get(subScopeName) || []];\n    }\n    return injections;\n  }\n}\n\nlet instancesCount = 0;\nfunction createShikiInternalSync(options) {\n  instancesCount += 1;\n  if (options.warnings !== false && instancesCount >= 10 && instancesCount % 10 === 0)\n    console.warn(`[Shiki] ${instancesCount} instances have been created. Shiki is supposed to be used as a singleton, consider refactoring your code to cache your highlighter instance; Or call \\`highlighter.dispose()\\` to release unused instances.`);\n  let isDisposed = false;\n  if (!options.engine)\n    throw new ShikiError(\"`engine` option is required for synchronous mode\");\n  const langs = (options.langs || []).flat(1);\n  const themes = (options.themes || []).flat(1).map(normalizeTheme);\n  const resolver = new Resolver(options.engine, langs);\n  const _registry = new Registry(resolver, themes, langs, options.langAlias);\n  let _lastTheme;\n  function getLanguage(name) {\n    ensureNotDisposed();\n    const _lang = _registry.getGrammar(typeof name === \"string\" ? name : name.name);\n    if (!_lang)\n      throw new ShikiError(`Language \\`${name}\\` not found, you may need to load it first`);\n    return _lang;\n  }\n  function getTheme(name) {\n    if (name === \"none\")\n      return { bg: \"\", fg: \"\", name: \"none\", settings: [], type: \"dark\" };\n    ensureNotDisposed();\n    const _theme = _registry.getTheme(name);\n    if (!_theme)\n      throw new ShikiError(`Theme \\`${name}\\` not found, you may need to load it first`);\n    return _theme;\n  }\n  function setTheme(name) {\n    ensureNotDisposed();\n    const theme = getTheme(name);\n    if (_lastTheme !== name) {\n      _registry.setTheme(theme);\n      _lastTheme = name;\n    }\n    const colorMap = _registry.getColorMap();\n    return {\n      theme,\n      colorMap\n    };\n  }\n  function getLoadedThemes() {\n    ensureNotDisposed();\n    return _registry.getLoadedThemes();\n  }\n  function getLoadedLanguages() {\n    ensureNotDisposed();\n    return _registry.getLoadedLanguages();\n  }\n  function loadLanguageSync(...langs2) {\n    ensureNotDisposed();\n    _registry.loadLanguages(langs2.flat(1));\n  }\n  async function loadLanguage(...langs2) {\n    return loadLanguageSync(await resolveLangs(langs2));\n  }\n  function loadThemeSync(...themes2) {\n    ensureNotDisposed();\n    for (const theme of themes2.flat(1)) {\n      _registry.loadTheme(theme);\n    }\n  }\n  async function loadTheme(...themes2) {\n    ensureNotDisposed();\n    return loadThemeSync(await resolveThemes(themes2));\n  }\n  function ensureNotDisposed() {\n    if (isDisposed)\n      throw new ShikiError(\"Shiki instance has been disposed\");\n  }\n  function dispose() {\n    if (isDisposed)\n      return;\n    isDisposed = true;\n    _registry.dispose();\n    instancesCount -= 1;\n  }\n  return {\n    setTheme,\n    getTheme,\n    getLanguage,\n    getLoadedThemes,\n    getLoadedLanguages,\n    loadLanguage,\n    loadLanguageSync,\n    loadTheme,\n    loadThemeSync,\n    dispose,\n    [Symbol.dispose]: dispose\n  };\n}\n\nasync function createShikiInternal(options) {\n  if (!options.engine) {\n    warnDeprecated(\"`engine` option is required. Use `createOnigurumaEngine` or `createJavaScriptRegexEngine` to create an engine.\");\n  }\n  const [\n    themes,\n    langs,\n    engine\n  ] = await Promise.all([\n    resolveThemes(options.themes || []),\n    resolveLangs(options.langs || []),\n    options.engine\n  ]);\n  return createShikiInternalSync({\n    ...options,\n    themes,\n    langs,\n    engine\n  });\n}\n\nasync function createHighlighterCore(options) {\n  const internal = await createShikiInternal(options);\n  return {\n    getLastGrammarState: (...args) => getLastGrammarState(internal, ...args),\n    codeToTokensBase: (code, options2) => codeToTokensBase(internal, code, options2),\n    codeToTokensWithThemes: (code, options2) => codeToTokensWithThemes(internal, code, options2),\n    codeToTokens: (code, options2) => codeToTokens(internal, code, options2),\n    codeToHast: (code, options2) => codeToHast(internal, code, options2),\n    codeToHtml: (code, options2) => codeToHtml(internal, code, options2),\n    getBundledLanguages: () => ({}),\n    getBundledThemes: () => ({}),\n    ...internal,\n    getInternalContext: () => internal\n  };\n}\nfunction createHighlighterCoreSync(options) {\n  const internal = createShikiInternalSync(options);\n  return {\n    getLastGrammarState: (...args) => getLastGrammarState(internal, ...args),\n    codeToTokensBase: (code, options2) => codeToTokensBase(internal, code, options2),\n    codeToTokensWithThemes: (code, options2) => codeToTokensWithThemes(internal, code, options2),\n    codeToTokens: (code, options2) => codeToTokens(internal, code, options2),\n    codeToHast: (code, options2) => codeToHast(internal, code, options2),\n    codeToHtml: (code, options2) => codeToHtml(internal, code, options2),\n    getBundledLanguages: () => ({}),\n    getBundledThemes: () => ({}),\n    ...internal,\n    getInternalContext: () => internal\n  };\n}\nfunction makeSingletonHighlighterCore(createHighlighter) {\n  let _shiki;\n  async function getSingletonHighlighterCore2(options) {\n    if (!_shiki) {\n      _shiki = createHighlighter({\n        ...options,\n        themes: options.themes || [],\n        langs: options.langs || []\n      });\n      return _shiki;\n    } else {\n      const s = await _shiki;\n      await Promise.all([\n        s.loadTheme(...options.themes || []),\n        s.loadLanguage(...options.langs || [])\n      ]);\n      return s;\n    }\n  }\n  return getSingletonHighlighterCore2;\n}\nconst getSingletonHighlighterCore = /* @__PURE__ */ makeSingletonHighlighterCore(createHighlighterCore);\n\nfunction createdBundledHighlighter(options) {\n  const bundledLanguages = options.langs;\n  const bundledThemes = options.themes;\n  const engine = options.engine;\n  async function createHighlighter(options2) {\n    function resolveLang(lang) {\n      if (typeof lang === \"string\") {\n        if (isSpecialLang(lang))\n          return [];\n        const bundle = bundledLanguages[lang];\n        if (!bundle)\n          throw new ShikiError$1(`Language \\`${lang}\\` is not included in this bundle. You may want to load it from external source.`);\n        return bundle;\n      }\n      return lang;\n    }\n    function resolveTheme(theme) {\n      if (isSpecialTheme(theme))\n        return \"none\";\n      if (typeof theme === \"string\") {\n        const bundle = bundledThemes[theme];\n        if (!bundle)\n          throw new ShikiError$1(`Theme \\`${theme}\\` is not included in this bundle. You may want to load it from external source.`);\n        return bundle;\n      }\n      return theme;\n    }\n    const _themes = (options2.themes ?? []).map((i) => resolveTheme(i));\n    const langs = (options2.langs ?? []).map((i) => resolveLang(i));\n    const core = await createHighlighterCore({\n      engine: options2.engine ?? engine(),\n      ...options2,\n      themes: _themes,\n      langs\n    });\n    return {\n      ...core,\n      loadLanguage(...langs2) {\n        return core.loadLanguage(...langs2.map(resolveLang));\n      },\n      loadTheme(...themes) {\n        return core.loadTheme(...themes.map(resolveTheme));\n      },\n      getBundledLanguages() {\n        return bundledLanguages;\n      },\n      getBundledThemes() {\n        return bundledThemes;\n      }\n    };\n  }\n  return createHighlighter;\n}\nfunction makeSingletonHighlighter(createHighlighter) {\n  let _shiki;\n  async function getSingletonHighlighter(options = {}) {\n    if (!_shiki) {\n      _shiki = createHighlighter({\n        ...options,\n        themes: options.themes || [],\n        langs: options.langs || []\n      });\n      return _shiki;\n    } else {\n      const s = await _shiki;\n      await Promise.all([\n        s.loadTheme(...options.themes || []),\n        s.loadLanguage(...options.langs || [])\n      ]);\n      return s;\n    }\n  }\n  return getSingletonHighlighter;\n}\nfunction createSingletonShorthands(createHighlighter, config) {\n  const getSingletonHighlighter = makeSingletonHighlighter(createHighlighter);\n  async function get(code, options) {\n    const shiki = await getSingletonHighlighter({\n      langs: [options.lang],\n      themes: \"theme\" in options ? [options.theme] : Object.values(options.themes)\n    });\n    const langs = await config?.guessEmbeddedLanguages?.(code, options.lang, shiki);\n    if (langs) {\n      await shiki.loadLanguage(...langs);\n    }\n    return shiki;\n  }\n  return {\n    getSingletonHighlighter(options) {\n      return getSingletonHighlighter(options);\n    },\n    async codeToHtml(code, options) {\n      const shiki = await get(code, options);\n      return shiki.codeToHtml(code, options);\n    },\n    async codeToHast(code, options) {\n      const shiki = await get(code, options);\n      return shiki.codeToHast(code, options);\n    },\n    async codeToTokens(code, options) {\n      const shiki = await get(code, options);\n      return shiki.codeToTokens(code, options);\n    },\n    async codeToTokensBase(code, options) {\n      const shiki = await get(code, options);\n      return shiki.codeToTokensBase(code, options);\n    },\n    async codeToTokensWithThemes(code, options) {\n      const shiki = await get(code, options);\n      return shiki.codeToTokensWithThemes(code, options);\n    },\n    async getLastGrammarState(code, options) {\n      const shiki = await getSingletonHighlighter({\n        langs: [options.lang],\n        themes: [options.theme]\n      });\n      return shiki.getLastGrammarState(code, options);\n    }\n  };\n}\n\nfunction createCssVariablesTheme(options = {}) {\n  const {\n    name = \"css-variables\",\n    variablePrefix = \"--shiki-\",\n    fontStyle = true\n  } = options;\n  const variable = (name2) => {\n    if (options.variableDefaults?.[name2])\n      return `var(${variablePrefix}${name2}, ${options.variableDefaults[name2]})`;\n    return `var(${variablePrefix}${name2})`;\n  };\n  const theme = {\n    name,\n    type: \"dark\",\n    colors: {\n      \"editor.foreground\": variable(\"foreground\"),\n      \"editor.background\": variable(\"background\"),\n      \"terminal.ansiBlack\": variable(\"ansi-black\"),\n      \"terminal.ansiRed\": variable(\"ansi-red\"),\n      \"terminal.ansiGreen\": variable(\"ansi-green\"),\n      \"terminal.ansiYellow\": variable(\"ansi-yellow\"),\n      \"terminal.ansiBlue\": variable(\"ansi-blue\"),\n      \"terminal.ansiMagenta\": variable(\"ansi-magenta\"),\n      \"terminal.ansiCyan\": variable(\"ansi-cyan\"),\n      \"terminal.ansiWhite\": variable(\"ansi-white\"),\n      \"terminal.ansiBrightBlack\": variable(\"ansi-bright-black\"),\n      \"terminal.ansiBrightRed\": variable(\"ansi-bright-red\"),\n      \"terminal.ansiBrightGreen\": variable(\"ansi-bright-green\"),\n      \"terminal.ansiBrightYellow\": variable(\"ansi-bright-yellow\"),\n      \"terminal.ansiBrightBlue\": variable(\"ansi-bright-blue\"),\n      \"terminal.ansiBrightMagenta\": variable(\"ansi-bright-magenta\"),\n      \"terminal.ansiBrightCyan\": variable(\"ansi-bright-cyan\"),\n      \"terminal.ansiBrightWhite\": variable(\"ansi-bright-white\")\n    },\n    tokenColors: [\n      {\n        scope: [\n          \"keyword.operator.accessor\",\n          \"meta.group.braces.round.function.arguments\",\n          \"meta.template.expression\",\n          \"markup.fenced_code meta.embedded.block\"\n        ],\n        settings: {\n          foreground: variable(\"foreground\")\n        }\n      },\n      {\n        scope: \"emphasis\",\n        settings: {\n          fontStyle: \"italic\"\n        }\n      },\n      {\n        scope: [\"strong\", \"markup.heading.markdown\", \"markup.bold.markdown\"],\n        settings: {\n          fontStyle: \"bold\"\n        }\n      },\n      {\n        scope: [\"markup.italic.markdown\"],\n        settings: {\n          fontStyle: \"italic\"\n        }\n      },\n      {\n        scope: \"meta.link.inline.markdown\",\n        settings: {\n          fontStyle: \"underline\",\n          foreground: variable(\"token-link\")\n        }\n      },\n      {\n        scope: [\"string\", \"markup.fenced_code\", \"markup.inline\"],\n        settings: {\n          foreground: variable(\"token-string\")\n        }\n      },\n      {\n        scope: [\"comment\", \"string.quoted.docstring.multi\"],\n        settings: {\n          foreground: variable(\"token-comment\")\n        }\n      },\n      {\n        scope: [\n          \"constant.numeric\",\n          \"constant.language\",\n          \"constant.other.placeholder\",\n          \"constant.character.format.placeholder\",\n          \"variable.language.this\",\n          \"variable.other.object\",\n          \"variable.other.class\",\n          \"variable.other.constant\",\n          \"meta.property-name\",\n          \"meta.property-value\",\n          \"support\"\n        ],\n        settings: {\n          foreground: variable(\"token-constant\")\n        }\n      },\n      {\n        scope: [\n          \"keyword\",\n          \"storage.modifier\",\n          \"storage.type\",\n          \"storage.control.clojure\",\n          \"entity.name.function.clojure\",\n          \"entity.name.tag.yaml\",\n          \"support.function.node\",\n          \"support.type.property-name.json\",\n          \"punctuation.separator.key-value\",\n          \"punctuation.definition.template-expression\"\n        ],\n        settings: {\n          foreground: variable(\"token-keyword\")\n        }\n      },\n      {\n        scope: \"variable.parameter.function\",\n        settings: {\n          foreground: variable(\"token-parameter\")\n        }\n      },\n      {\n        scope: [\n          \"support.function\",\n          \"entity.name.type\",\n          \"entity.other.inherited-class\",\n          \"meta.function-call\",\n          \"meta.instance.constructor\",\n          \"entity.other.attribute-name\",\n          \"entity.name.function\",\n          \"constant.keyword.clojure\"\n        ],\n        settings: {\n          foreground: variable(\"token-function\")\n        }\n      },\n      {\n        scope: [\n          \"entity.name.tag\",\n          \"string.quoted\",\n          \"string.regexp\",\n          \"string.interpolated\",\n          \"string.template\",\n          \"string.unquoted.plain.out.yaml\",\n          \"keyword.other.template\"\n        ],\n        settings: {\n          foreground: variable(\"token-string-expression\")\n        }\n      },\n      {\n        scope: [\n          \"punctuation.definition.arguments\",\n          \"punctuation.definition.dict\",\n          \"punctuation.separator\",\n          \"meta.function-call.arguments\"\n        ],\n        settings: {\n          foreground: variable(\"token-punctuation\")\n        }\n      },\n      {\n        // [Custom] Markdown links\n        scope: [\n          \"markup.underline.link\",\n          \"punctuation.definition.metadata.markdown\"\n        ],\n        settings: {\n          foreground: variable(\"token-link\")\n        }\n      },\n      {\n        // [Custom] Markdown list\n        scope: [\"beginning.punctuation.definition.list.markdown\"],\n        settings: {\n          foreground: variable(\"token-string\")\n        }\n      },\n      {\n        // [Custom] Markdown punctuation definition brackets\n        scope: [\n          \"punctuation.definition.string.begin.markdown\",\n          \"punctuation.definition.string.end.markdown\",\n          \"string.other.link.title.markdown\",\n          \"string.other.link.description.markdown\"\n        ],\n        settings: {\n          foreground: variable(\"token-keyword\")\n        }\n      },\n      {\n        // [Custom] Diff\n        scope: [\n          \"markup.inserted\",\n          \"meta.diff.header.to-file\",\n          \"punctuation.definition.inserted\"\n        ],\n        settings: {\n          foreground: variable(\"token-inserted\")\n        }\n      },\n      {\n        scope: [\n          \"markup.deleted\",\n          \"meta.diff.header.from-file\",\n          \"punctuation.definition.deleted\"\n        ],\n        settings: {\n          foreground: variable(\"token-deleted\")\n        }\n      },\n      {\n        scope: [\n          \"markup.changed\",\n          \"punctuation.definition.changed\"\n        ],\n        settings: {\n          foreground: variable(\"token-changed\")\n        }\n      }\n    ]\n  };\n  if (!fontStyle) {\n    theme.tokenColors = theme.tokenColors?.map((tokenColor) => {\n      if (tokenColor.settings?.fontStyle)\n        delete tokenColor.settings.fontStyle;\n      return tokenColor;\n    });\n  }\n  return theme;\n}\n\nexport { addClassToHast, applyColorReplacements, codeToHast, codeToHtml, codeToTokens, codeToTokensBase, codeToTokensWithThemes, createCssVariablesTheme, createHighlighterCore, createHighlighterCoreSync, createPositionConverter, createShikiInternal, createShikiInternalSync, createSingletonShorthands, createdBundledHighlighter, enableDeprecationWarnings, flatTokenVariants, getSingletonHighlighterCore, getTokenStyleObject, guessEmbeddedLanguages, hastToHtml, isNoneTheme, isPlainLang, isSpecialLang, isSpecialTheme, makeSingletonHighlighter, makeSingletonHighlighterCore, normalizeGetter, normalizeTheme, resolveColorReplacements, splitLines, splitToken, splitTokens, stringifyTokenStyle, toArray, tokenizeAnsiWithTheme, tokenizeWithTheme, tokensToHast, transformerDecorations, warnDeprecated };\n","\"use strict\";function r(e){if([...e].length!==1)throw new Error(`Expected \"${e}\" to be a single code point`);return e.codePointAt(0)}function l(e,t,n){return e.has(t)||e.set(t,n),e.get(t)}const i=new Set([\"alnum\",\"alpha\",\"ascii\",\"blank\",\"cntrl\",\"digit\",\"graph\",\"lower\",\"print\",\"punct\",\"space\",\"upper\",\"word\",\"xdigit\"]),o=String.raw;function u(e,t){if(e==null)throw new Error(t??\"Value expected\");return e}export{r as cpOf,l as getOrInsert,i as PosixClassNames,o as r,u as throwIfNullish};\n//# sourceMappingURL=utils.js.map\n","\"use strict\";import{cpOf as h,PosixClassNames as G,r as p,throwIfNullish as N}from\"../utils.js\";const m=p`\\[\\^?`,b=`c.? | C(?:-.?)?|${p`[pP]\\{(?:\\^?[-\\x20_]*[A-Za-z][-\\x20\\w]*\\})?`}|${p`x[89A-Fa-f]\\p{AHex}(?:\\\\x[89A-Fa-f]\\p{AHex})*`}|${p`u(?:\\p{AHex}{4})? | x\\{[^\\}]*\\}? | x\\p{AHex}{0,2}`}|${p`o\\{[^\\}]*\\}?`}|${p`\\d{1,3}`}`,y=/[?*+][?+]?|\\{(?:\\d+(?:,\\d*)?|,\\d+)\\}\\??/,C=new RegExp(p`\n  \\\\ (?:\n    ${b}\n    | [gk]<[^>]*>?\n    | [gk]'[^']*'?\n    | .\n  )\n  | \\( (?:\n    \\? (?:\n      [:=!>({]\n      | <[=!]\n      | <[^>]*>\n      | '[^']*'\n      | ~\\|?\n      | #(?:[^)\\\\]|\\\\.?)*\n      | [^:)]*[:)]\n    )?\n    | \\*[^\\)]*\\)?\n  )?\n  | (?:${y.source})+\n  | ${m}\n  | .\n`.replace(/\\s+/g,\"\"),\"gsu\"),T=new RegExp(p`\n  \\\\ (?:\n    ${b}\n    | .\n  )\n  | \\[:(?:\\^?\\p{Alpha}+|\\^):\\]\n  | ${m}\n  | &&\n  | .\n`.replace(/\\s+/g,\"\"),\"gsu\");function M(e,n={}){const t={flags:\"\",...n,rules:{captureGroup:!1,singleline:!1,...n.rules}};if(typeof e!=\"string\")throw new Error(\"String expected as pattern\");const o=Y(t.flags),s=[o.extended],a={captureGroup:t.rules.captureGroup,getCurrentModX(){return s.at(-1)},numOpenGroups:0,popModX(){s.pop()},pushModX(u){s.push(u)},replaceCurrentModX(u){s[s.length-1]=u},singleline:t.rules.singleline};let r=[],i;for(C.lastIndex=0;i=C.exec(e);){const u=F(a,e,i[0],C.lastIndex);u.tokens?r.push(...u.tokens):u.token&&r.push(u.token),u.lastIndex!==void 0&&(C.lastIndex=u.lastIndex)}const l=[];let c=0;r.filter(u=>u.type===\"GroupOpen\").forEach(u=>{u.kind===\"capturing\"?u.number=++c:u.raw===\"(\"&&l.push(u)}),c||l.forEach((u,S)=>{u.kind=\"capturing\",u.number=S+1});const g=c||l.length;return{tokens:r.map(u=>u.type===\"EscapedNumber\"?ee(u,g):u).flat(),flags:o}}function F(e,n,t,o){const[s,a]=t;if(t===\"[\"||t===\"[^\"){const r=K(n,t,o);return{tokens:r.tokens,lastIndex:r.lastIndex}}if(s===\"\\\\\"){if(\"AbBGyYzZ\".includes(a))return{token:w(t,t)};if(/^\\\\g[<']/.test(t)){if(!/^\\\\g(?:<[^>]+>|'[^']+')$/.test(t))throw new Error(`Invalid group name \"${t}\"`);return{token:R(t)}}if(/^\\\\k[<']/.test(t)){if(!/^\\\\k(?:<[^>]+>|'[^']+')$/.test(t))throw new Error(`Invalid group name \"${t}\"`);return{token:A(t)}}if(a===\"K\")return{token:I(\"keep\",t)};if(a===\"N\"||a===\"R\")return{token:k(\"newline\",t,{negate:a===\"N\"})};if(a===\"O\")return{token:k(\"any\",t)};if(a===\"X\")return{token:k(\"text_segment\",t)};const r=x(t,{inCharClass:!1});return Array.isArray(r)?{tokens:r}:{token:r}}if(s===\"(\"){if(a===\"*\")return{token:j(t)};if(t===\"(?{\")throw new Error(`Unsupported callout \"${t}\"`);if(t.startsWith(\"(?#\")){if(n[o]!==\")\")throw new Error('Unclosed comment group \"(?#\"');return{lastIndex:o+1}}if(/^\\(\\?[-imx]+[:)]$/.test(t))return{token:L(t,e)};if(e.pushModX(e.getCurrentModX()),e.numOpenGroups++,t===\"(\"&&!e.captureGroup||t===\"(?:\")return{token:f(\"group\",t)};if(t===\"(?>\")return{token:f(\"atomic\",t)};if(t===\"(?=\"||t===\"(?!\"||t===\"(?<=\"||t===\"(?<!\")return{token:f(t[2]===\"<\"?\"lookbehind\":\"lookahead\",t,{negate:t.endsWith(\"!\")})};if(t===\"(\"&&e.captureGroup||t.startsWith(\"(?<\")&&t.endsWith(\">\")||t.startsWith(\"(?'\")&&t.endsWith(\"'\"))return{token:f(\"capturing\",t,{...t!==\"(\"&&{name:t.slice(3,-1)}})};if(t.startsWith(\"(?~\")){if(t===\"(?~|\")throw new Error(`Unsupported absence function kind \"${t}\"`);return{token:f(\"absence_repeater\",t)}}throw t===\"(?(\"?new Error(`Unsupported conditional \"${t}\"`):new Error(`Invalid or unsupported group option \"${t}\"`)}if(t===\")\"){if(e.popModX(),e.numOpenGroups--,e.numOpenGroups<0)throw new Error('Unmatched \")\"');return{token:Q(t)}}if(e.getCurrentModX()){if(t===\"#\"){const r=n.indexOf(`\n`,o);return{lastIndex:r===-1?n.length:r}}if(/^\\s$/.test(t)){const r=/\\s+/y;return r.lastIndex=o,{lastIndex:r.exec(n)?r.lastIndex:o}}}if(t===\".\")return{token:k(\"dot\",t)};if(t===\"^\"||t===\"$\"){const r=e.singleline?{\"^\":p`\\A`,$:p`\\Z`}[t]:t;return{token:w(r,t)}}return t===\"|\"?{token:P(t)}:y.test(t)?{tokens:te(t)}:{token:d(h(t),t)}}function K(e,n,t){const o=[E(n[1]===\"^\",n)];let s=1,a;for(T.lastIndex=t;a=T.exec(e);){const r=a[0];if(r[0]===\"[\"&&r[1]!==\":\")s++,o.push(E(r[1]===\"^\",r));else if(r===\"]\"){if(o.at(-1).type===\"CharacterClassOpen\")o.push(d(93,r));else if(s--,o.push(z(r)),!s)break}else{const i=X(r);Array.isArray(i)?o.push(...i):o.push(i)}}return{tokens:o,lastIndex:T.lastIndex||e.length}}function X(e){if(e[0]===\"\\\\\")return x(e,{inCharClass:!0});if(e[0]===\"[\"){const n=/\\[:(?<negate>\\^?)(?<name>[a-z]+):\\]/.exec(e);if(!n||!G.has(n.groups.name))throw new Error(`Invalid POSIX class \"${e}\"`);return k(\"posix\",e,{value:n.groups.name,negate:!!n.groups.negate})}return e===\"-\"?U(e):e===\"&&\"?H(e):d(h(e),e)}function x(e,{inCharClass:n}){const t=e[1];if(t===\"c\"||t===\"C\")return Z(e);if(\"dDhHsSwW\".includes(t))return q(e);if(e.startsWith(p`\\o{`))throw new Error(`Incomplete, invalid, or unsupported octal code point \"${e}\"`);if(/^\\\\[pP]\\{/.test(e)){if(e.length===3)throw new Error(`Incomplete or invalid Unicode property \"${e}\"`);return V(e)}if(/^\\\\x[89A-Fa-f]\\p{AHex}/u.test(e))try{const o=e.split(/\\\\x/).slice(1).map(i=>parseInt(i,16)),s=new TextDecoder(\"utf-8\",{ignoreBOM:!0,fatal:!0}).decode(new Uint8Array(o)),a=new TextEncoder;return[...s].map(i=>{const l=[...a.encode(i)].map(c=>`\\\\x${c.toString(16)}`).join(\"\");return d(h(i),l)})}catch{throw new Error(`Multibyte code \"${e}\" incomplete or invalid in Oniguruma`)}if(t===\"u\"||t===\"x\")return d(J(e),e);if($.has(t))return d($.get(t),e);if(/\\d/.test(t))return W(n,e);if(e===\"\\\\\")throw new Error(p`Incomplete escape \"\\\"`);if(t===\"M\")throw new Error(`Unsupported meta \"${e}\"`);if([...e].length===2)return d(e.codePointAt(1),e);throw new Error(`Unexpected escape \"${e}\"`)}function P(e){return{type:\"Alternator\",raw:e}}function w(e,n){return{type:\"Assertion\",kind:e,raw:n}}function A(e){return{type:\"Backreference\",raw:e}}function d(e,n){return{type:\"Character\",value:e,raw:n}}function z(e){return{type:\"CharacterClassClose\",raw:e}}function U(e){return{type:\"CharacterClassHyphen\",raw:e}}function H(e){return{type:\"CharacterClassIntersector\",raw:e}}function E(e,n){return{type:\"CharacterClassOpen\",negate:e,raw:n}}function k(e,n,t={}){return{type:\"CharacterSet\",kind:e,...t,raw:n}}function I(e,n,t={}){return e===\"keep\"?{type:\"Directive\",kind:e,raw:n}:{type:\"Directive\",kind:e,flags:N(t.flags),raw:n}}function W(e,n){return{type:\"EscapedNumber\",inCharClass:e,raw:n}}function Q(e){return{type:\"GroupClose\",raw:e}}function f(e,n,t={}){return{type:\"GroupOpen\",kind:e,...t,raw:n}}function D(e,n,t,o){return{type:\"NamedCallout\",kind:e,tag:n,arguments:t,raw:o}}function _(e,n,t,o){return{type:\"Quantifier\",kind:e,min:n,max:t,raw:o}}function R(e){return{type:\"Subroutine\",raw:e}}const B=new Set([\"COUNT\",\"CMP\",\"ERROR\",\"FAIL\",\"MAX\",\"MISMATCH\",\"SKIP\",\"TOTAL_COUNT\"]),$=new Map([[\"a\",7],[\"b\",8],[\"e\",27],[\"f\",12],[\"n\",10],[\"r\",13],[\"t\",9],[\"v\",11]]);function Z(e){const n=e[1]===\"c\"?e[2]:e[3];if(!n||!/[A-Za-z]/.test(n))throw new Error(`Unsupported control character \"${e}\"`);return d(h(n.toUpperCase())-64,e)}function L(e,n){let{on:t,off:o}=/^\\(\\?(?<on>[imx]*)(?:-(?<off>[-imx]*))?/.exec(e).groups;o??=\"\";const s=(n.getCurrentModX()||t.includes(\"x\"))&&!o.includes(\"x\"),a=v(t),r=v(o),i={};if(a&&(i.enable=a),r&&(i.disable=r),e.endsWith(\")\"))return n.replaceCurrentModX(s),I(\"flags\",e,{flags:i});if(e.endsWith(\":\"))return n.pushModX(s),n.numOpenGroups++,f(\"group\",e,{...(a||r)&&{flags:i}});throw new Error(`Unexpected flag modifier \"${e}\"`)}function j(e){const n=/\\(\\*(?<name>[A-Za-z_]\\w*)?(?:\\[(?<tag>(?:[A-Za-z_]\\w*)?)\\])?(?:\\{(?<args>[^}]*)\\})?\\)/.exec(e);if(!n)throw new Error(`Incomplete or invalid named callout \"${e}\"`);const{name:t,tag:o,args:s}=n.groups;if(!t)throw new Error(`Invalid named callout \"${e}\"`);if(o===\"\")throw new Error(`Named callout tag with empty value not allowed \"${e}\"`);const a=s?s.split(\",\").filter(g=>g!==\"\").map(g=>/^[+-]?\\d+$/.test(g)?+g:g):[],[r,i,l]=a,c=B.has(t)?t.toLowerCase():\"custom\";switch(c){case\"fail\":case\"mismatch\":case\"skip\":if(a.length>0)throw new Error(`Named callout arguments not allowed \"${a}\"`);break;case\"error\":if(a.length>1)throw new Error(`Named callout allows only one argument \"${a}\"`);if(typeof r==\"string\")throw new Error(`Named callout argument must be a number \"${r}\"`);break;case\"max\":if(!a.length||a.length>2)throw new Error(`Named callout must have one or two arguments \"${a}\"`);if(typeof r==\"string\"&&!/^[A-Za-z_]\\w*$/.test(r))throw new Error(`Named callout argument one must be a tag or number \"${r}\"`);if(a.length===2&&(typeof i==\"number\"||!/^[<>X]$/.test(i)))throw new Error(`Named callout optional argument two must be '<', '>', or 'X' \"${i}\"`);break;case\"count\":case\"total_count\":if(a.length>1)throw new Error(`Named callout allows only one argument \"${a}\"`);if(a.length===1&&(typeof r==\"number\"||!/^[<>X]$/.test(r)))throw new Error(`Named callout optional argument must be '<', '>', or 'X' \"${r}\"`);break;case\"cmp\":if(a.length!==3)throw new Error(`Named callout must have three arguments \"${a}\"`);if(typeof r==\"string\"&&!/^[A-Za-z_]\\w*$/.test(r))throw new Error(`Named callout argument one must be a tag or number \"${r}\"`);if(typeof i==\"number\"||!/^(?:[<>!=]=|[<>])$/.test(i))throw new Error(`Named callout argument two must be '==', '!=', '>', '<', '>=', or '<=' \"${i}\"`);if(typeof l==\"string\"&&!/^[A-Za-z_]\\w*$/.test(l))throw new Error(`Named callout argument three must be a tag or number \"${l}\"`);break;case\"custom\":throw new Error(`Undefined callout name \"${t}\"`);default:throw new Error(`Unexpected named callout kind \"${c}\"`)}return D(c,o??null,s?.split(\",\")??null,e)}function O(e){let n=null,t,o;if(e[0]===\"{\"){const{minStr:s,maxStr:a}=/^\\{(?<minStr>\\d*)(?:,(?<maxStr>\\d*))?/.exec(e).groups,r=1e5;if(+s>r||a&&+a>r)throw new Error(\"Quantifier value unsupported in Oniguruma\");if(t=+s,o=a===void 0?+s:a===\"\"?1/0:+a,t>o&&(n=\"possessive\",[t,o]=[o,t]),e.endsWith(\"?\")){if(n===\"possessive\")throw new Error('Unsupported possessive interval quantifier chain with \"?\"');n=\"lazy\"}else n||(n=\"greedy\")}else t=e[0]===\"+\"?1:0,o=e[0]===\"?\"?1:1/0,n=e[1]===\"+\"?\"possessive\":e[1]===\"?\"?\"lazy\":\"greedy\";return _(n,t,o,e)}function q(e){const n=e[1].toLowerCase();return k({d:\"digit\",h:\"hex\",s:\"space\",w:\"word\"}[n],e,{negate:e[1]!==n})}function V(e){const{p:n,neg:t,value:o}=/^\\\\(?<p>[pP])\\{(?<neg>\\^?)(?<value>[^}]+)/.exec(e).groups;return k(\"property\",e,{value:o,negate:n===\"P\"&&!t||n===\"p\"&&!!t})}function v(e){const n={};return e.includes(\"i\")&&(n.ignoreCase=!0),e.includes(\"m\")&&(n.dotAll=!0),e.includes(\"x\")&&(n.extended=!0),Object.keys(n).length?n:null}function Y(e){const n={ignoreCase:!1,dotAll:!1,extended:!1,digitIsAscii:!1,posixIsAscii:!1,spaceIsAscii:!1,wordIsAscii:!1,textSegmentMode:null};for(let t=0;t<e.length;t++){const o=e[t];if(!\"imxDPSWy\".includes(o))throw new Error(`Invalid flag \"${o}\"`);if(o===\"y\"){if(!/^y{[gw]}/.test(e.slice(t)))throw new Error('Invalid or unspecified flag \"y\" mode');n.textSegmentMode=e[t+2]===\"g\"?\"grapheme\":\"word\",t+=3;continue}n[{i:\"ignoreCase\",m:\"dotAll\",x:\"extended\",D:\"digitIsAscii\",P:\"posixIsAscii\",S:\"spaceIsAscii\",W:\"wordIsAscii\"}[o]]=!0}return n}function J(e){if(/^(?:\\\\u(?!\\p{AHex}{4})|\\\\x(?!\\p{AHex}{1,2}|\\{\\p{AHex}{1,8}\\}))/u.test(e))throw new Error(`Incomplete or invalid escape \"${e}\"`);const n=e[2]===\"{\"?/^\\\\x\\{\\s*(?<hex>\\p{AHex}+)/u.exec(e).groups.hex:e.slice(2);return parseInt(n,16)}function ee(e,n){const{raw:t,inCharClass:o}=e,s=t.slice(1);if(!o&&(s!==\"0\"&&s.length===1||s[0]!==\"0\"&&+s<=n))return[A(t)];const a=[],r=s.match(/^[0-7]+|\\d/g);for(let i=0;i<r.length;i++){const l=r[i];let c;if(i===0&&l!==\"8\"&&l!==\"9\"){if(c=parseInt(l,8),c>127)throw new Error(p`Octal encoded byte above 177 unsupported \"${t}\"`)}else c=h(l);a.push(d(c,(i===0?\"\\\\\":\"\")+l))}return a}function te(e){const n=[],t=new RegExp(y,\"gy\");let o;for(;o=t.exec(e);){const s=o[0];if(s[0]===\"{\"){const a=/^\\{(?<min>\\d+),(?<max>\\d+)\\}\\??$/.exec(s);if(a){const{min:r,max:i}=a.groups;if(+r>+i&&s.endsWith(\"?\")){t.lastIndex--,n.push(O(s.slice(0,-1)));continue}}}n.push(O(s))}return n}export{M as tokenize};\n//# sourceMappingURL=tokenize.js.map\n","\"use strict\";function o(e,t){if(!Array.isArray(e.body))throw new Error(\"Expected node with body array\");if(e.body.length!==1)return!1;const r=e.body[0];return!t||Object.keys(t).every(n=>t[n]===r[n])}function a(e){return!(!i.has(e.type)||e.type===\"AbsenceFunction\"&&e.kind!==\"repeater\")}const i=new Set([\"AbsenceFunction\",\"CapturingGroup\",\"Group\",\"LookaroundAssertion\",\"Regex\"]);function s(e){return y.has(e.type)}const y=new Set([\"AbsenceFunction\",\"Backreference\",\"CapturingGroup\",\"Character\",\"CharacterClass\",\"CharacterSet\",\"Group\",\"Quantifier\",\"Subroutine\"]);export{o as hasOnlyChild,a as isAlternativeContainer,s as isQuantifiable};\n//# sourceMappingURL=node-utils.js.map\n","\"use strict\";import{tokenize as q}from\"../tokenizer/tokenize.js\";import{cpOf as H,getOrInsert as Z,PosixClassNames as x,r as y,throwIfNullish as g}from\"../utils.js\";import{hasOnlyChild as Y,isAlternativeContainer as j,isQuantifiable as S}from\"./node-utils.js\";function J(e,r={}){const n={flags:\"\",normalizeUnknownPropertyNames:!1,skipBackrefValidation:!1,skipLookbehindValidation:!1,skipPropertyNameValidation:!1,unicodePropertyMap:null,...r,rules:{captureGroup:!1,singleline:!1,...r.rules}},t=q(e,{flags:n.flags,rules:{captureGroup:n.rules.captureGroup,singleline:n.rules.singleline}}),s=(p,N)=>{const u=t.tokens[o.nextIndex];switch(o.parent=p,o.nextIndex++,u.type){case\"Alternator\":return b();case\"Assertion\":return W(u);case\"Backreference\":return X(u,o);case\"Character\":return m(u.value,{useLastValid:!!N.isCheckingRangeEnd});case\"CharacterClassHyphen\":return ee(u,o,N);case\"CharacterClassOpen\":return re(u,o,N);case\"CharacterSet\":return ne(u,o);case\"Directive\":return I(u.kind,{flags:u.flags});case\"GroupOpen\":return te(u,o,N);case\"NamedCallout\":return U(u.kind,u.tag,u.arguments);case\"Quantifier\":return oe(u,o);case\"Subroutine\":return ae(u,o);default:throw new Error(`Unexpected token type \"${u.type}\"`)}},o={capturingGroups:[],hasNumberedRef:!1,namedGroupsByName:new Map,nextIndex:0,normalizeUnknownPropertyNames:n.normalizeUnknownPropertyNames,parent:null,skipBackrefValidation:n.skipBackrefValidation,skipLookbehindValidation:n.skipLookbehindValidation,skipPropertyNameValidation:n.skipPropertyNameValidation,subroutines:[],tokens:t.tokens,unicodePropertyMap:n.unicodePropertyMap,walk:s},i=B(T(t.flags));let d=i.body[0];for(;o.nextIndex<t.tokens.length;){const p=s(d,{});p.type===\"Alternative\"?(i.body.push(p),d=p):d.body.push(p)}const{capturingGroups:a,hasNumberedRef:l,namedGroupsByName:c,subroutines:f}=o;if(l&&c.size&&!n.rules.captureGroup)throw new Error(\"Numbered backref/subroutine not allowed when using named capture\");for(const{ref:p}of f)if(typeof p==\"number\"){if(p>a.length)throw new Error(\"Subroutine uses a group number that's not defined\");p&&(a[p-1].isSubroutined=!0)}else if(c.has(p)){if(c.get(p).length>1)throw new Error(y`Subroutine uses a duplicate group name \"\\g<${p}>\"`);c.get(p)[0].isSubroutined=!0}else throw new Error(y`Subroutine uses a group name that's not defined \"\\g<${p}>\"`);return i}function W({kind:e}){return F(g({\"^\":\"line_start\",$:\"line_end\",\"\\\\A\":\"string_start\",\"\\\\b\":\"word_boundary\",\"\\\\B\":\"word_boundary\",\"\\\\G\":\"search_start\",\"\\\\y\":\"text_segment_boundary\",\"\\\\Y\":\"text_segment_boundary\",\"\\\\z\":\"string_end\",\"\\\\Z\":\"string_end_newline\"}[e],`Unexpected assertion kind \"${e}\"`),{negate:e===y`\\B`||e===y`\\Y`})}function X({raw:e},r){const n=/^\\\\k[<']/.test(e),t=n?e.slice(3,-1):e.slice(1),s=(o,i=!1)=>{const d=r.capturingGroups.length;let a=!1;if(o>d)if(r.skipBackrefValidation)a=!0;else throw new Error(`Not enough capturing groups defined to the left \"${e}\"`);return r.hasNumberedRef=!0,k(i?d+1-o:o,{orphan:a})};if(n){const o=/^(?<sign>-?)0*(?<num>[1-9]\\d*)$/.exec(t);if(o)return s(+o.groups.num,!!o.groups.sign);if(/[-+]/.test(t))throw new Error(`Invalid backref name \"${e}\"`);if(!r.namedGroupsByName.has(t))throw new Error(`Group name not defined to the left \"${e}\"`);return k(t)}return s(+t)}function ee(e,r,n){const{tokens:t,walk:s}=r,o=r.parent,i=o.body.at(-1),d=t[r.nextIndex];if(!n.isCheckingRangeEnd&&i&&i.type!==\"CharacterClass\"&&i.type!==\"CharacterClassRange\"&&d&&d.type!==\"CharacterClassOpen\"&&d.type!==\"CharacterClassClose\"&&d.type!==\"CharacterClassIntersector\"){const a=s(o,{...n,isCheckingRangeEnd:!0});if(i.type===\"Character\"&&a.type===\"Character\")return o.body.pop(),L(i,a);throw new Error(\"Invalid character class range\")}return m(H(\"-\"))}function re({negate:e},r,n){const{tokens:t,walk:s}=r,o=t[r.nextIndex],i=[C()];let d=z(o);for(;d.type!==\"CharacterClassClose\";){if(d.type===\"CharacterClassIntersector\")i.push(C()),r.nextIndex++;else{const l=i.at(-1);l.body.push(s(l,n))}d=z(t[r.nextIndex],o)}const a=C({negate:e});return i.length===1?a.body=i[0].body:(a.kind=\"intersection\",a.body=i.map(l=>l.body.length===1?l.body[0]:l)),r.nextIndex++,a}function ne({kind:e,negate:r,value:n},t){const{normalizeUnknownPropertyNames:s,skipPropertyNameValidation:o,unicodePropertyMap:i}=t;if(e===\"property\"){const d=w(n);if(x.has(d)&&!i?.has(d))e=\"posix\",n=d;else return Q(n,{negate:r,normalizeUnknownPropertyNames:s,skipPropertyNameValidation:o,unicodePropertyMap:i})}return e===\"posix\"?R(n,{negate:r}):E(e,{negate:r})}function te(e,r,n){const{tokens:t,capturingGroups:s,namedGroupsByName:o,skipLookbehindValidation:i,walk:d}=r,a=ie(e),l=a.type===\"AbsenceFunction\",c=$(a),f=c&&a.negate;if(a.type===\"CapturingGroup\"&&(s.push(a),a.name&&Z(o,a.name,[]).push(a)),l&&n.isInAbsenceFunction)throw new Error(\"Nested absence function not supported by Oniguruma\");let p=D(t[r.nextIndex]);for(;p.type!==\"GroupClose\";){if(p.type===\"Alternator\")a.body.push(b()),r.nextIndex++;else{const N=a.body.at(-1),u=d(N,{...n,isInAbsenceFunction:n.isInAbsenceFunction||l,isInLookbehind:n.isInLookbehind||c,isInNegLookbehind:n.isInNegLookbehind||f});if(N.body.push(u),(c||n.isInLookbehind)&&!i){const v=\"Lookbehind includes a pattern not allowed by Oniguruma\";if(f||n.isInNegLookbehind){if(M(u)||u.type===\"CapturingGroup\")throw new Error(v)}else if(M(u)||$(u)&&u.negate)throw new Error(v)}}p=D(t[r.nextIndex])}return r.nextIndex++,a}function oe({kind:e,min:r,max:n},t){const s=t.parent,o=s.body.at(-1);if(!o||!S(o))throw new Error(\"Quantifier requires a repeatable token\");const i=_(e,r,n,o);return s.body.pop(),i}function ae({raw:e},r){const{capturingGroups:n,subroutines:t}=r;let s=e.slice(3,-1);const o=/^(?<sign>[-+]?)0*(?<num>[1-9]\\d*)$/.exec(s);if(o){const d=+o.groups.num,a=n.length;if(r.hasNumberedRef=!0,s={\"\":d,\"+\":a+d,\"-\":a+1-d}[o.groups.sign],s<1)throw new Error(\"Invalid subroutine number\")}else s===\"0\"&&(s=0);const i=O(s);return t.push(i),i}function G(e,r){if(e!==\"repeater\")throw new Error(`Unexpected absence function kind \"${e}\"`);return{type:\"AbsenceFunction\",kind:e,body:h(r?.body)}}function b(e){return{type:\"Alternative\",body:V(e?.body)}}function F(e,r){const n={type:\"Assertion\",kind:e};return(e===\"word_boundary\"||e===\"text_segment_boundary\")&&(n.negate=!!r?.negate),n}function k(e,r){const n=!!r?.orphan;return{type:\"Backreference\",ref:e,...n&&{orphan:n}}}function P(e,r){const n={name:void 0,isSubroutined:!1,...r};if(n.name!==void 0&&!se(n.name))throw new Error(`Group name \"${n.name}\" invalid in Oniguruma`);return{type:\"CapturingGroup\",number:e,...n.name&&{name:n.name},...n.isSubroutined&&{isSubroutined:n.isSubroutined},body:h(r?.body)}}function m(e,r){const n={useLastValid:!1,...r};if(e>1114111){const t=e.toString(16);if(n.useLastValid)e=1114111;else throw e>1310719?new Error(`Invalid code point out of range \"\\\\x{${t}}\"`):new Error(`Invalid code point out of range in JS \"\\\\x{${t}}\"`)}return{type:\"Character\",value:e}}function C(e){const r={kind:\"union\",negate:!1,...e};return{type:\"CharacterClass\",kind:r.kind,negate:r.negate,body:V(e?.body)}}function L(e,r){if(r.value<e.value)throw new Error(\"Character class range out of order\");return{type:\"CharacterClassRange\",min:e,max:r}}function E(e,r){const n=!!r?.negate,t={type:\"CharacterSet\",kind:e};return(e===\"digit\"||e===\"hex\"||e===\"newline\"||e===\"space\"||e===\"word\")&&(t.negate=n),(e===\"text_segment\"||e===\"newline\"&&!n)&&(t.variableLength=!0),t}function I(e,r={}){if(e===\"keep\")return{type:\"Directive\",kind:e};if(e===\"flags\")return{type:\"Directive\",kind:e,flags:g(r.flags)};throw new Error(`Unexpected directive kind \"${e}\"`)}function T(e){return{type:\"Flags\",...e}}function A(e){const r=e?.atomic,n=e?.flags;if(r&&n)throw new Error(\"Atomic group cannot have flags\");return{type:\"Group\",...r&&{atomic:r},...n&&{flags:n},body:h(e?.body)}}function K(e){const r={behind:!1,negate:!1,...e};return{type:\"LookaroundAssertion\",kind:r.behind?\"lookbehind\":\"lookahead\",negate:r.negate,body:h(e?.body)}}function U(e,r,n){return{type:\"NamedCallout\",kind:e,tag:r,arguments:n}}function R(e,r){const n=!!r?.negate;if(!x.has(e))throw new Error(`Invalid POSIX class \"${e}\"`);return{type:\"CharacterSet\",kind:\"posix\",value:e,negate:n}}function _(e,r,n,t){if(r>n)throw new Error(\"Invalid reversed quantifier range\");return{type:\"Quantifier\",kind:e,min:r,max:n,body:t}}function B(e,r){return{type:\"Regex\",body:h(r?.body),flags:e}}function O(e){return{type:\"Subroutine\",ref:e}}function Q(e,r){const n={negate:!1,normalizeUnknownPropertyNames:!1,skipPropertyNameValidation:!1,unicodePropertyMap:null,...r};let t=n.unicodePropertyMap?.get(w(e));if(!t){if(n.normalizeUnknownPropertyNames)t=de(e);else if(n.unicodePropertyMap&&!n.skipPropertyNameValidation)throw new Error(y`Invalid Unicode property \"\\p{${e}}\"`)}return{type:\"CharacterSet\",kind:\"property\",value:t??e,negate:n.negate}}function ie({flags:e,kind:r,name:n,negate:t,number:s}){switch(r){case\"absence_repeater\":return G(\"repeater\");case\"atomic\":return A({atomic:!0});case\"capturing\":return P(s,{name:n});case\"group\":return A({flags:e});case\"lookahead\":case\"lookbehind\":return K({behind:r===\"lookbehind\",negate:t});default:throw new Error(`Unexpected group kind \"${r}\"`)}}function h(e){if(e===void 0)e=[b()];else if(!Array.isArray(e)||!e.length||!e.every(r=>r.type===\"Alternative\"))throw new Error(\"Invalid body; expected array of one or more Alternative nodes\");return e}function V(e){if(e===void 0)e=[];else if(!Array.isArray(e)||!e.every(r=>!!r.type))throw new Error(\"Invalid body; expected array of nodes\");return e}function M(e){return e.type===\"LookaroundAssertion\"&&e.kind===\"lookahead\"}function $(e){return e.type===\"LookaroundAssertion\"&&e.kind===\"lookbehind\"}function se(e){return/^[\\p{Alpha}\\p{Pc}][^)]*$/u.test(e)}function de(e){return e.trim().replace(/[- _]+/g,\"_\").replace(/[A-Z][a-z]+(?=[A-Z])/g,\"$&_\").replace(/[A-Za-z]+/g,r=>r[0].toUpperCase()+r.slice(1).toLowerCase())}function w(e){return e.replace(/[- _]+/g,\"\").toLowerCase()}function z(e,r){return g(e,`${r?.type===\"Character\"&&r.value===93?\"Empty\":\"Unclosed\"} character class`)}function D(e){return g(e,\"Unclosed group\")}export{G as createAbsenceFunction,b as createAlternative,F as createAssertion,k as createBackreference,P as createCapturingGroup,m as createCharacter,C as createCharacterClass,L as createCharacterClassRange,E as createCharacterSet,I as createDirective,T as createFlags,A as createGroup,K as createLookaroundAssertion,U as createNamedCallout,R as createPosixClass,_ as createQuantifier,B as createRegex,O as createSubroutine,Q as createUnicodeProperty,Y as hasOnlyChild,j as isAlternativeContainer,S as isQuantifiable,J as parse,w as slug};\n//# sourceMappingURL=parse.js.map\n","\"use strict\";import{throwIfNullish as A}from\"../utils.js\";function S(a,v,N=null){function u(e,s){for(let t=0;t<e.length;t++){const r=n(e[t],s,t,e);t=Math.max(-1,t+r)}}function n(e,s=null,t=null,r=null){let i=0,c=!1;const d={node:e,parent:s,key:t,container:r,root:a,remove(){f(r).splice(Math.max(0,l(t)+i),1),i--,c=!0},removeAllNextSiblings(){return f(r).splice(l(t)+1)},removeAllPrevSiblings(){const o=l(t)+i;return i-=o,f(r).splice(0,Math.max(0,o))},replaceWith(o,y={}){const b=!!y.traverse;r?r[Math.max(0,l(t)+i)]=o:A(s,\"Can't replace root node\")[t]=o,b&&n(o,s,t,r),c=!0},replaceWithMultiple(o,y={}){const b=!!y.traverse;if(f(r).splice(Math.max(0,l(t)+i),1,...o),i+=o.length-1,b){let g=0;for(let x=0;x<o.length;x++)g+=n(o[x],s,l(t)+x+g,r)}c=!0},skip(){c=!0}},{type:m}=e,h=v[\"*\"],p=v[m],R=typeof h==\"function\"?h:h?.enter,P=typeof p==\"function\"?p:p?.enter;if(R?.(d,N),P?.(d,N),!c)switch(m){case\"AbsenceFunction\":case\"CapturingGroup\":case\"Group\":u(e.body,e);break;case\"Alternative\":case\"CharacterClass\":u(e.body,e);break;case\"Assertion\":case\"Backreference\":case\"Character\":case\"CharacterSet\":case\"Directive\":case\"Flags\":case\"NamedCallout\":case\"Subroutine\":break;case\"CharacterClassRange\":n(e.min,e,\"min\"),n(e.max,e,\"max\");break;case\"LookaroundAssertion\":u(e.body,e);break;case\"Quantifier\":n(e.body,e,\"body\");break;case\"Regex\":u(e.body,e),n(e.flags,e,\"flags\");break;default:throw new Error(`Unexpected node type \"${m}\"`)}return p?.exit?.(d,N),h?.exit?.(d,N),i}return n(a),a}function f(a){if(!Array.isArray(a))throw new Error(\"Container expected\");return a}function l(a){if(typeof a!=\"number\")throw new Error(\"Numeric key expected\");return a}export{S as traverse};\n//# sourceMappingURL=traverse.js.map\n","// Separating some utils for improved tree shaking of the `./internals` export\n\nconst noncapturingDelim = String.raw`\\(\\?(?:[:=!>A-Za-z\\-]|<[=!]|\\(DEFINE\\))`;\n\n/**\nUpdates the array in place by incrementing each value greater than or equal to the threshold.\n@param {Array<number>} arr\n@param {number} threshold\n*/\nfunction incrementIfAtLeast(arr, threshold) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= threshold) {\n      arr[i]++;\n    }\n  }\n}\n\n/**\n@param {string} str\n@param {number} pos\n@param {string} oldValue\n@param {string} newValue\n@returns {string}\n*/\nfunction spliceStr(str, pos, oldValue, newValue) {\n  return str.slice(0, pos) + newValue + str.slice(pos + oldValue.length);\n}\n\nexport {\n  incrementIfAtLeast,\n  noncapturingDelim,\n  spliceStr,\n};\n","// Constant properties for tracking regex syntax context\nexport const Context = Object.freeze({\n  DEFAULT: 'DEFAULT',\n  CHAR_CLASS: 'CHAR_CLASS',\n});\n\n/**\nReplaces all unescaped instances of a regex pattern in the given context, using a replacement\nstring or callback.\n\nDoesn't skip over complete multicharacter tokens (only `\\` plus its folowing char) so must be used\nwith knowledge of what's safe to do given regex syntax. Assumes UnicodeSets-mode syntax.\n@param {string} expression Search target\n@param {string} needle Search as a regex pattern, with flags `su` applied\n@param {string | (match: RegExpExecArray, details: {\n  context: 'DEFAULT' | 'CHAR_CLASS';\n  negated: boolean;\n}) => string} replacement\n@param {'DEFAULT' | 'CHAR_CLASS'} [context] All contexts if not specified\n@returns {string} Updated expression\n@example\nconst str = '.\\\\.\\\\\\\\.[[\\\\.].].';\nreplaceUnescaped(str, '\\\\.', '@');\n// → '@\\\\.\\\\\\\\@[[\\\\.]@]@'\nreplaceUnescaped(str, '\\\\.', '@', Context.DEFAULT);\n// → '@\\\\.\\\\\\\\@[[\\\\.].]@'\nreplaceUnescaped(str, '\\\\.', '@', Context.CHAR_CLASS);\n// → '.\\\\.\\\\\\\\.[[\\\\.]@].'\n*/\nexport function replaceUnescaped(expression, needle, replacement, context) {\n  const re = new RegExp(String.raw`${needle}|(?<$skip>\\[\\^?|\\\\?.)`, 'gsu');\n  const negated = [false];\n  let numCharClassesOpen = 0;\n  let result = '';\n  for (const match of expression.matchAll(re)) {\n    const {0: m, groups: {$skip}} = match;\n    if (!$skip && (!context || (context === Context.DEFAULT) === !numCharClassesOpen)) {\n      if (replacement instanceof Function) {\n        result += replacement(match, {\n          context: numCharClassesOpen ? Context.CHAR_CLASS : Context.DEFAULT,\n          negated: negated[negated.length - 1],\n        });\n      } else {\n        result += replacement;\n      }\n      continue;\n    }\n    if (m[0] === '[') {\n      numCharClassesOpen++;\n      negated.push(m[1] === '^');\n    } else if (m === ']' && numCharClassesOpen) {\n      numCharClassesOpen--;\n      negated.pop();\n    }\n    result += m;\n  }\n  return result;\n}\n\n/**\nRuns a callback for each unescaped instance of a regex pattern in the given context.\n\nDoesn't skip over complete multicharacter tokens (only `\\` plus its folowing char) so must be used\nwith knowledge of what's safe to do given regex syntax. Assumes UnicodeSets-mode syntax.\n@param {string} expression Search target\n@param {string} needle Search as a regex pattern, with flags `su` applied\n@param {(match: RegExpExecArray, details: {\n  context: 'DEFAULT' | 'CHAR_CLASS';\n  negated: boolean;\n}) => void} callback\n@param {'DEFAULT' | 'CHAR_CLASS'} [context] All contexts if not specified\n*/\nexport function forEachUnescaped(expression, needle, callback, context) {\n  // Do this the easy way\n  replaceUnescaped(expression, needle, callback, context);\n}\n\n/**\nReturns a match object for the first unescaped instance of a regex pattern in the given context, or\n`null`.\n\nDoesn't skip over complete multicharacter tokens (only `\\` plus its folowing char) so must be used\nwith knowledge of what's safe to do given regex syntax. Assumes UnicodeSets-mode syntax.\n@param {string} expression Search target\n@param {string} needle Search as a regex pattern, with flags `su` applied\n@param {number} [pos] Offset to start the search\n@param {'DEFAULT' | 'CHAR_CLASS'} [context] All contexts if not specified\n@returns {RegExpExecArray | null}\n*/\nexport function execUnescaped(expression, needle, pos = 0, context) {\n  // Quick partial test; avoid the loop if not needed\n  if (!(new RegExp(needle, 'su').test(expression))) {\n    return null;\n  }\n  const re = new RegExp(`${needle}|(?<$skip>\\\\\\\\?.)`, 'gsu');\n  re.lastIndex = pos;\n  let numCharClassesOpen = 0;\n  let match;\n  while (match = re.exec(expression)) {\n    const {0: m, groups: {$skip}} = match;\n    if (!$skip && (!context || (context === Context.DEFAULT) === !numCharClassesOpen)) {\n      return match;\n    }\n    if (m === '[') {\n      numCharClassesOpen++;\n    } else if (m === ']' && numCharClassesOpen) {\n      numCharClassesOpen--;\n    }\n    // Avoid an infinite loop on zero-length matches\n    if (re.lastIndex == match.index) {\n      re.lastIndex++;\n    }\n  }\n  return null;\n}\n\n/**\nChecks whether an unescaped instance of a regex pattern appears in the given context.\n\nDoesn't skip over complete multicharacter tokens (only `\\` plus its folowing char) so must be used\nwith knowledge of what's safe to do given regex syntax. Assumes UnicodeSets-mode syntax.\n@param {string} expression Search target\n@param {string} needle Search as a regex pattern, with flags `su` applied\n@param {'DEFAULT' | 'CHAR_CLASS'} [context] All contexts if not specified\n@returns {boolean} Whether the pattern was found\n*/\nexport function hasUnescaped(expression, needle, context) {\n  // Do this the easy way\n  return !!execUnescaped(expression, needle, 0, context);\n}\n\n/**\nExtracts the full contents of a group (subpattern) from the given expression, accounting for\nescaped characters, nested groups, and character classes. The group is identified by the position\nwhere its contents start (the string index just after the group's opening delimiter). Returns the\nrest of the string if the group is unclosed.\n\nAssumes UnicodeSets-mode syntax.\n@param {string} expression Search target\n@param {number} contentsStartPos\n@returns {string}\n*/\nexport function getGroupContents(expression, contentsStartPos) {\n  const token = /\\\\?./gsu;\n  token.lastIndex = contentsStartPos;\n  let contentsEndPos = expression.length;\n  let numCharClassesOpen = 0;\n  // Starting search within an open group, after the group's opening\n  let numGroupsOpen = 1;\n  let match;\n  while (match = token.exec(expression)) {\n    const [m] = match;\n    if (m === '[') {\n      numCharClassesOpen++;\n    } else if (!numCharClassesOpen) {\n      if (m === '(') {\n        numGroupsOpen++;\n      } else if (m === ')') {\n        numGroupsOpen--;\n        if (!numGroupsOpen) {\n          contentsEndPos = match.index;\n          break;\n        }\n      }\n    } else if (m === ']') {\n      numCharClassesOpen--;\n    }\n  }\n  return expression.slice(contentsStartPos, contentsEndPos);\n}\n","import {incrementIfAtLeast, noncapturingDelim, spliceStr} from './utils-internals.js';\nimport {Context, replaceUnescaped} from 'regex-utilities';\n\nconst atomicPluginToken = new RegExp(String.raw`(?<noncapturingStart>${noncapturingDelim})|(?<capturingStart>\\((?:\\?<[^>]+>)?)|\\\\?.`, 'gsu');\n\n/**\nApply transformations for atomic groups: `(?>…)`.\n@param {string} expression\n@param {import('./regex.js').PluginData} [data]\n@returns {Required<import('./regex.js').PluginResult>}\n*/\nfunction atomic(expression, data) {\n  const hiddenCaptures = data?.hiddenCaptures ?? [];\n  // Capture transfer is used by <github.com/slevithan/oniguruma-to-es>\n  let captureTransfers = data?.captureTransfers ?? new Map();\n  if (!/\\(\\?>/.test(expression)) {\n    return {\n      pattern: expression,\n      captureTransfers,\n      hiddenCaptures,\n    };\n  }\n\n  const aGDelim = '(?>';\n  const emulatedAGDelim = '(?:(?=(';\n  const captureNumMap = [0];\n  const addedHiddenCaptures = [];\n  let numCapturesBeforeAG = 0;\n  let numAGs = 0;\n  let aGPos = NaN;\n  let hasProcessedAG;\n  do {\n    hasProcessedAG = false;\n    let numCharClassesOpen = 0;\n    let numGroupsOpenInAG = 0;\n    let inAG = false;\n    let match;\n    atomicPluginToken.lastIndex = Number.isNaN(aGPos) ? 0 : aGPos + emulatedAGDelim.length;\n    while (match = atomicPluginToken.exec(expression)) {\n      const {0: m, index, groups: {capturingStart, noncapturingStart}} = match;\n      if (m === '[') {\n        numCharClassesOpen++;\n      } else if (!numCharClassesOpen) {\n\n        if (m === aGDelim && !inAG) {\n          aGPos = index;\n          inAG = true;\n        } else if (inAG && noncapturingStart) {\n          numGroupsOpenInAG++;\n        } else if (capturingStart) {\n          if (inAG) {\n            numGroupsOpenInAG++;\n          } else {\n            numCapturesBeforeAG++;\n            captureNumMap.push(numCapturesBeforeAG + numAGs);\n          }\n        } else if (m === ')' && inAG) {\n          if (!numGroupsOpenInAG) {\n            numAGs++;\n            const addedCaptureNum = numCapturesBeforeAG + numAGs;\n            // Replace `expression` and use `<$$N>` as a temporary wrapper for the backref so it\n            // can avoid backref renumbering afterward. Wrap the whole substitution (including the\n            // lookahead and following backref) in a noncapturing group to handle following\n            // quantifiers and literal digits\n            expression = `${expression.slice(0, aGPos)}${emulatedAGDelim}${\n                expression.slice(aGPos + aGDelim.length, index)\n              }))<$$${addedCaptureNum}>)${expression.slice(index + 1)}`;\n            hasProcessedAG = true;\n            addedHiddenCaptures.push(addedCaptureNum);\n            incrementIfAtLeast(hiddenCaptures, addedCaptureNum);\n            if (captureTransfers.size) {\n              const newCaptureTransfers = new Map();\n              captureTransfers.forEach((from, to) => {\n                newCaptureTransfers.set(\n                  to >= addedCaptureNum ? to + 1 : to,\n                  from.map(f => f >= addedCaptureNum ? f + 1 : f)\n                );\n              });\n              captureTransfers = newCaptureTransfers;\n            }\n            break;\n          }\n          numGroupsOpenInAG--;\n        }\n\n      } else if (m === ']') {\n        numCharClassesOpen--;\n      }\n    }\n  // Start over from the beginning of the atomic group's contents, in case the processed group\n  // contains additional atomic groups\n  } while (hasProcessedAG);\n\n  hiddenCaptures.push(...addedHiddenCaptures);\n\n  // Second pass to adjust numbered backrefs\n  expression = replaceUnescaped(\n    expression,\n    String.raw`\\\\(?<backrefNum>[1-9]\\d*)|<\\$\\$(?<wrappedBackrefNum>\\d+)>`,\n    ({0: m, groups: {backrefNum, wrappedBackrefNum}}) => {\n      if (backrefNum) {\n        const bNum = +backrefNum;\n        if (bNum > captureNumMap.length - 1) {\n          throw new Error(`Backref \"${m}\" greater than number of captures`);\n        }\n        return `\\\\${captureNumMap[bNum]}`;\n      }\n      return `\\\\${wrappedBackrefNum}`;\n    },\n    Context.DEFAULT\n  );\n\n  return {\n    pattern: expression,\n    captureTransfers,\n    hiddenCaptures,\n  };\n}\n\nconst baseQuantifier = String.raw`(?:[?*+]|\\{\\d+(?:,\\d*)?\\})`;\n// Complete tokenizer for base syntax; doesn't (need to) know about character-class-only syntax\nconst possessivePluginToken = new RegExp(String.raw`\n\\\\(?: \\d+\n  | c[A-Za-z]\n  | [gk]<[^>]+>\n  | [pPu]\\{[^\\}]+\\}\n  | u[A-Fa-f\\d]{4}\n  | x[A-Fa-f\\d]{2}\n  )\n| \\((?: \\? (?: [:=!>]\n  | <(?:[=!]|[^>]+>)\n  | [A-Za-z\\-]+:\n  | \\(DEFINE\\)\n  ))?\n| (?<qBase>${baseQuantifier})(?<qMod>[?+]?)(?<invalidQ>[?*+\\{]?)\n| \\\\?.\n`.replace(/\\s+/g, ''), 'gsu');\n\n/**\nTransform posessive quantifiers into atomic groups. The posessessive quantifiers are:\n`?+`, `*+`, `++`, `{N}+`, `{N,}+`, `{N,N}+`.\nThis follows Java, PCRE, Perl, and Python.\nPossessive quantifiers in Oniguruma and Onigmo are only: `?+`, `*+`, `++`.\n@param {string} expression\n@returns {import('./regex.js').PluginResult}\n*/\nfunction possessive(expression) {\n  if (!(new RegExp(`${baseQuantifier}\\\\+`).test(expression))) {\n    return {\n      pattern: expression,\n    };\n  }\n\n  const openGroupIndices = [];\n  let lastGroupIndex = null;\n  let lastCharClassIndex = null;\n  let lastToken = '';\n  let numCharClassesOpen = 0;\n  let match;\n  possessivePluginToken.lastIndex = 0;\n  while (match = possessivePluginToken.exec(expression)) {\n    const {0: m, index, groups: {qBase, qMod, invalidQ}} = match;\n    if (m === '[') {\n      if (!numCharClassesOpen) {\n        lastCharClassIndex = index;\n      }\n      numCharClassesOpen++;\n    } else if (m === ']') {\n      if (numCharClassesOpen) {\n        numCharClassesOpen--;\n      // Unmatched `]`\n      } else {\n        lastCharClassIndex = null;\n      }\n    } else if (!numCharClassesOpen) {\n\n      if (qMod === '+' && lastToken && !lastToken.startsWith('(')) {\n        // Invalid following quantifier would become valid via the wrapping group\n        if (invalidQ) {\n          throw new Error(`Invalid quantifier \"${m}\"`);\n        }\n        let charsAdded = -1; // -1 for removed trailing `+`\n        // Possessivizing fixed repetition quantifiers like `{2}` does't change their behavior, so\n        // avoid doing so (convert them to greedy)\n        if (/^\\{\\d+\\}$/.test(qBase)) {\n          expression = spliceStr(expression, index + qBase.length, qMod, '');\n        } else {\n          if (lastToken === ')' || lastToken === ']') {\n            const nodeIndex = lastToken === ')' ? lastGroupIndex : lastCharClassIndex;\n            // Unmatched `)` would break out of the wrapping group and mess with handling.\n            // Unmatched `]` wouldn't be a problem, but it's unnecessary to have dedicated support\n            // for unescaped `]++` since this won't work with flag u or v anyway\n            if (nodeIndex === null) {\n              throw new Error(`Invalid unmatched \"${lastToken}\"`);\n            }\n            expression = `${expression.slice(0, nodeIndex)}(?>${expression.slice(nodeIndex, index)}${qBase})${expression.slice(index + m.length)}`;\n          } else {\n            expression = `${expression.slice(0, index - lastToken.length)}(?>${lastToken}${qBase})${expression.slice(index + m.length)}`;\n          }\n          charsAdded += 4; // `(?>)`\n        }\n        possessivePluginToken.lastIndex += charsAdded;\n      } else if (m[0] === '(') {\n        openGroupIndices.push(index);\n      } else if (m === ')') {\n        lastGroupIndex = openGroupIndices.length ? openGroupIndices.pop() : null;\n      }\n\n    }\n    lastToken = m;\n  }\n\n  return {\n    pattern: expression,\n  };\n}\n\nexport {\n  atomic,\n  possessive,\n};\n","/**\nWorks the same as JavaScript's native `RegExp` constructor in all contexts, but automatically\nadjusts subpattern matches and indices (with flag `d`) to account for captures added as part of\nemulating extended syntax.\n*/\nclass RegExpSubclass extends RegExp {\n  // Avoid `#private` to allow for subclassing\n  /**\n  @private\n  @type {Map<number, {\n    hidden: true;\n  }>}\n  */\n  _captureMap;\n  /**\n  @overload\n  @param {string} expression\n  @param {string} [flags]\n  @param {{\n    hiddenCaptures?: Array<number>;\n  }} [options]\n  */\n  /**\n  @overload\n  @param {RegExpSubclass} expression\n  @param {string} [flags]\n  */\n  constructor(expression, flags, options) {\n    // Argument `options` isn't provided when regexes are copied via `new RegExpSubclass(regexp)`,\n    // including as part of the internal handling of string methods `matchAll` and `split`\n    if (expression instanceof RegExp) {\n      if (options) {\n        throw new Error('Cannot provide options when copying a regexp');\n      }\n      super(expression, flags);\n      if (expression instanceof RegExpSubclass) {\n        this._captureMap = expression._captureMap;\n      } else {\n        this._captureMap = new Map();\n      }\n    } else {\n      super(expression, flags);\n      const hiddenCaptures = options?.hiddenCaptures ?? [];\n      this._captureMap = createCaptureMap(hiddenCaptures);\n    }\n  }\n  /**\n  Called internally by all String/RegExp methods that use regexes.\n  @override\n  @param {string} str\n  @returns {RegExpExecArray | null}\n  */\n  exec(str) {\n    const match = super.exec(str);\n    if (!match || !this._captureMap.size) {\n      return match;\n    }\n    const matchCopy = [...match];\n    // Empty all but the first value of the array while preserving its other properties\n    match.length = 1;\n    let indicesCopy;\n    if (this.hasIndices) {\n      indicesCopy = [...match.indices];\n      match.indices.length = 1;\n    }\n    for (let i = 1; i < matchCopy.length; i++) {\n      if (!this._captureMap.get(i)?.hidden) {\n        match.push(matchCopy[i]);\n        if (this.hasIndices) {\n          match.indices.push(indicesCopy[i]);\n        }\n      }\n    }\n    return match;\n  }\n}\n\n/**\nBuild the capturing group map, with hidden captures marked to indicate their submatches shouldn't\nappear in match results.\n@param {Array<number>} hiddenCaptures\n@returns {Map<number, {\n  hidden: true;\n}>}\n*/\nfunction createCaptureMap(hiddenCaptures) {\n  const captureMap = new Map();\n  for (const num of hiddenCaptures) {\n    captureMap.set(num, {\n      hidden: true,\n    });\n  }\n  return captureMap;\n}\n\nexport {\n  RegExpSubclass,\n};\n","export {atomic, possessive} from './atomic.js';\nexport {RegExpSubclass} from './subclass.js';\n","import {Context, forEachUnescaped, getGroupContents, hasUnescaped, replaceUnescaped} from 'regex-utilities';\n\nconst r = String.raw;\nconst gRToken = r`\\\\g<(?<gRNameOrNum>[^>&]+)&R=(?<gRDepth>[^>]+)>`;\nconst recursiveToken = r`\\(\\?R=(?<rDepth>[^\\)]+)\\)|${gRToken}`;\nconst namedCaptureDelim = r`\\(\\?<(?![=!])(?<captureName>[^>]+)>`;\nconst captureDelim = r`${namedCaptureDelim}|(?<unnamed>\\()(?!\\?)`;\nconst token = new RegExp(r`${namedCaptureDelim}|${recursiveToken}|\\(\\?|\\\\?.`, 'gsu');\nconst overlappingRecursionMsg = 'Cannot use multiple overlapping recursions';\n\n/**\n@param {string} pattern\n@param {{\n  flags?: string;\n  captureTransfers?: Map<number, Array<number>>;\n  hiddenCaptures?: Array<number>;\n  mode?: 'plugin' | 'external';\n}} [data]\n@returns {{\n  pattern: string;\n  captureTransfers: Map<number, Array<number>>;\n  hiddenCaptures: Array<number>;\n}}\n*/\nfunction recursion(pattern, data) {\n  const {hiddenCaptures, mode} = {\n    hiddenCaptures: [],\n    mode: 'plugin',\n    ...data,\n  };\n  // Capture transfer is used by <github.com/slevithan/oniguruma-to-es>\n  let captureTransfers = data?.captureTransfers ?? new Map();\n  // Keep the initial fail-check (which avoids unneeded processing) as fast as possible by testing\n  // without the accuracy improvement of using `hasUnescaped` with `Context.DEFAULT`\n  if (!(new RegExp(recursiveToken, 'su').test(pattern))) {\n    return {\n      pattern,\n      captureTransfers,\n      hiddenCaptures,\n    };\n  }\n  if (mode === 'plugin' && hasUnescaped(pattern, r`\\(\\?\\(DEFINE\\)`, Context.DEFAULT)) {\n    throw new Error('DEFINE groups cannot be used with recursion');\n  }\n\n  const addedHiddenCaptures = [];\n  const hasNumberedBackref = hasUnescaped(pattern, r`\\\\[1-9]`, Context.DEFAULT);\n  const groupContentsStartPos = new Map();\n  const openGroups = [];\n  let hasRecursed = false;\n  let numCharClassesOpen = 0;\n  let numCapturesPassed = 0;\n  let match;\n  token.lastIndex = 0;\n  while ((match = token.exec(pattern))) {\n    const {0: m, groups: {captureName, rDepth, gRNameOrNum, gRDepth}} = match;\n    if (m === '[') {\n      numCharClassesOpen++;\n    } else if (!numCharClassesOpen) {\n\n      // `(?R=N)`\n      if (rDepth) {\n        assertMaxInBounds(rDepth);\n        if (hasRecursed) {\n          throw new Error(overlappingRecursionMsg);\n        }\n        if (hasNumberedBackref) {\n          // Could add support for numbered backrefs with extra effort, but it's probably not worth\n          // it. To trigger this error, the regex must include recursion and one of the following:\n          // - An interpolated regex that contains a numbered backref (since other numbered\n          //   backrefs are prevented by implicit flag n).\n          // - A numbered backref, when flag n is explicitly disabled.\n          // Note that Regex+'s extended syntax (atomic groups and sometimes subroutines) can also\n          // add numbered backrefs, but those work fine because external plugins like this one run\n          // *before* the transformation of built-in syntax extensions\n          throw new Error(\n            // When used in `external` mode by transpilers other than Regex+, backrefs might have\n            // gone through conversion from named to numbered, so avoid a misleading error\n            `${mode === 'external' ? 'Backrefs' : 'Numbered backrefs'} cannot be used with global recursion`\n          );\n        }\n        const left = pattern.slice(0, match.index);\n        const right = pattern.slice(token.lastIndex);\n        if (hasUnescaped(right, recursiveToken, Context.DEFAULT)) {\n          throw new Error(overlappingRecursionMsg);\n        }\n        const reps = +rDepth - 1;\n        pattern = makeRecursive(\n          left,\n          right,\n          reps,\n          false,\n          hiddenCaptures,\n          addedHiddenCaptures,\n          numCapturesPassed\n        );\n        captureTransfers = mapCaptureTransfers(\n          captureTransfers,\n          left,\n          reps,\n          addedHiddenCaptures.length,\n          0,\n          numCapturesPassed\n        );\n        // No need to parse further\n        break;\n      // `\\g<name&R=N>`, `\\g<number&R=N>`\n      } else if (gRNameOrNum) {\n        assertMaxInBounds(gRDepth);\n        let isWithinReffedGroup = false;\n        for (const g of openGroups) {\n          if (g.name === gRNameOrNum || g.num === +gRNameOrNum) {\n            isWithinReffedGroup = true;\n            if (g.hasRecursedWithin) {\n              throw new Error(overlappingRecursionMsg);\n            }\n            break;\n          }\n        }\n        if (!isWithinReffedGroup) {\n          throw new Error(r`Recursive \\g cannot be used outside the referenced group \"${\n            mode === 'external' ? gRNameOrNum : r`\\g<${gRNameOrNum}&R=${gRDepth}>`\n          }\"`);\n        }\n        const startPos = groupContentsStartPos.get(gRNameOrNum);\n        const groupContents = getGroupContents(pattern, startPos);\n        if (\n          hasNumberedBackref &&\n          hasUnescaped(groupContents, r`${namedCaptureDelim}|\\((?!\\?)`, Context.DEFAULT)\n        ) {\n          throw new Error(\n            // When used in `external` mode by transpilers other than Regex+, backrefs might have\n            // gone through conversion from named to numbered, so avoid a misleading error\n            `${mode === 'external' ? 'Backrefs' : 'Numbered backrefs'} cannot be used with recursion of capturing groups`\n          );\n        }\n        const groupContentsLeft = pattern.slice(startPos, match.index);\n        const groupContentsRight = groupContents.slice(groupContentsLeft.length + m.length);\n        const numAddedHiddenCapturesPreExpansion = addedHiddenCaptures.length;\n        const reps = +gRDepth - 1;\n        const expansion = makeRecursive(\n          groupContentsLeft,\n          groupContentsRight,\n          reps,\n          true,\n          hiddenCaptures,\n          addedHiddenCaptures,\n          numCapturesPassed\n        );\n        captureTransfers = mapCaptureTransfers(\n          captureTransfers,\n          groupContentsLeft,\n          reps,\n          addedHiddenCaptures.length - numAddedHiddenCapturesPreExpansion,\n          numAddedHiddenCapturesPreExpansion,\n          numCapturesPassed\n        );\n        const pre = pattern.slice(0, startPos);\n        const post = pattern.slice(startPos + groupContents.length);\n        // Modify the string we're looping over\n        pattern = `${pre}${expansion}${post}`;\n        // Step forward for the next loop iteration\n        token.lastIndex += expansion.length - m.length - groupContentsLeft.length - groupContentsRight.length;\n        openGroups.forEach(g => g.hasRecursedWithin = true);\n        hasRecursed = true;\n      } else if (captureName) {\n        numCapturesPassed++;\n        groupContentsStartPos.set(String(numCapturesPassed), token.lastIndex);\n        groupContentsStartPos.set(captureName, token.lastIndex);\n        openGroups.push({\n          num: numCapturesPassed,\n          name: captureName,\n        });\n      } else if (m[0] === '(') {\n        const isUnnamedCapture = m === '(';\n        if (isUnnamedCapture) {\n          numCapturesPassed++;\n          groupContentsStartPos.set(String(numCapturesPassed), token.lastIndex);\n        }\n        openGroups.push(isUnnamedCapture ? {num: numCapturesPassed} : {});\n      } else if (m === ')') {\n        openGroups.pop();\n      }\n\n    } else if (m === ']') {\n      numCharClassesOpen--;\n    }\n  }\n\n  hiddenCaptures.push(...addedHiddenCaptures);\n\n  return {\n    pattern,\n    captureTransfers,\n    hiddenCaptures,\n  };\n}\n\n/**\n@param {string} max\n*/\nfunction assertMaxInBounds(max) {\n  const errMsg = `Max depth must be integer between 2 and 100; used ${max}`;\n  if (!/^[1-9]\\d*$/.test(max)) {\n    throw new Error(errMsg);\n  }\n  max = +max;\n  if (max < 2 || max > 100) {\n    throw new Error(errMsg);\n  }\n}\n\n/**\n@param {string} left\n@param {string} right\n@param {number} reps\n@param {boolean} isSubpattern\n@param {Array<number>} hiddenCaptures\n@param {Array<number>} addedHiddenCaptures\n@param {number} numCapturesPassed\n@returns {string}\n*/\nfunction makeRecursive(\n  left,\n  right,\n  reps,\n  isSubpattern,\n  hiddenCaptures,\n  addedHiddenCaptures,\n  numCapturesPassed\n) {\n  const namesInRecursed = new Set();\n  // Can skip this work if not needed\n  if (isSubpattern) {\n    forEachUnescaped(left + right, namedCaptureDelim, ({groups: {captureName}}) => {\n      namesInRecursed.add(captureName);\n    }, Context.DEFAULT);\n  }\n  const rest = [\n    reps,\n    isSubpattern ? namesInRecursed : null,\n    hiddenCaptures,\n    addedHiddenCaptures,\n    numCapturesPassed,\n  ];\n  // Depth 2: 'left(?:left(?:)right)right'\n  // Depth 3: 'left(?:left(?:left(?:)right)right)right'\n  // Empty group in the middle separates tokens and absorbs a following quantifier if present\n  return `${left}${\n    repeatWithDepth(`(?:${left}`, 'forward', ...rest)\n  }(?:)${\n    repeatWithDepth(`${right})`, 'backward', ...rest)\n  }${right}`;\n}\n\n/**\n@param {string} pattern\n@param {'forward' | 'backward'} direction\n@param {number} reps\n@param {Set<string> | null} namesInRecursed\n@param {Array<number>} hiddenCaptures\n@param {Array<number>} addedHiddenCaptures\n@param {number} numCapturesPassed\n@returns {string}\n*/\nfunction repeatWithDepth(\n  pattern,\n  direction,\n  reps,\n  namesInRecursed,\n  hiddenCaptures,\n  addedHiddenCaptures,\n  numCapturesPassed\n) {\n  const startNum = 2;\n  const getDepthNum = i => direction === 'forward' ? (i + startNum) : (reps - i + startNum - 1);\n  let result = '';\n  for (let i = 0; i < reps; i++) {\n    const depthNum = getDepthNum(i);\n    result += replaceUnescaped(\n      pattern,\n      r`${captureDelim}|\\\\k<(?<backref>[^>]+)>`,\n      ({0: m, groups: {captureName, unnamed, backref}}) => {\n        if (backref && namesInRecursed && !namesInRecursed.has(backref)) {\n          // Don't alter backrefs to groups outside the recursed subpattern\n          return m;\n        }\n        const suffix = `_$${depthNum}`;\n        if (unnamed || captureName) {\n          const addedCaptureNum = numCapturesPassed + addedHiddenCaptures.length + 1;\n          addedHiddenCaptures.push(addedCaptureNum);\n          incrementIfAtLeast(hiddenCaptures, addedCaptureNum);\n          return unnamed ? m : `(?<${captureName}${suffix}>`;\n        }\n        return r`\\k<${backref}${suffix}>`;\n      },\n      Context.DEFAULT\n    );\n  }\n  return result;\n}\n\n/**\nUpdates the array in place by incrementing each value greater than or equal to the threshold.\n@param {Array<number>} arr\n@param {number} threshold\n*/\nfunction incrementIfAtLeast(arr, threshold) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= threshold) {\n      arr[i]++;\n    }\n  }\n}\n\n/**\n@param {Map<number, Array<number>>} captureTransfers\n@param {string} left\n@param {number} reps\n@param {number} numCapturesAddedInExpansion\n@param {number} numAddedHiddenCapturesPreExpansion\n@param {number} numCapturesPassed\n@returns {Map<number, Array<number>>}\n*/\nfunction mapCaptureTransfers(captureTransfers, left, reps, numCapturesAddedInExpansion, numAddedHiddenCapturesPreExpansion, numCapturesPassed) {\n  if (captureTransfers.size && numCapturesAddedInExpansion) {\n    let numCapturesInLeft = 0;\n    forEachUnescaped(left, captureDelim, () => numCapturesInLeft++, Context.DEFAULT);\n    // Is 0 for global recursion\n    const recursionDelimCaptureNum = numCapturesPassed - numCapturesInLeft + numAddedHiddenCapturesPreExpansion;\n    const newCaptureTransfers = new Map();\n    captureTransfers.forEach((from, to) => {\n      const numCapturesInRight = (numCapturesAddedInExpansion - (numCapturesInLeft * reps)) / reps;\n      const numCapturesAddedInLeft = numCapturesInLeft * reps;\n      const newTo = to > (recursionDelimCaptureNum + numCapturesInLeft) ? to + numCapturesAddedInExpansion : to;\n      const newFrom = [];\n      for (const f of from) {\n        // Before the recursed subpattern\n        if (f <= recursionDelimCaptureNum) {\n          newFrom.push(f);\n        // After the recursed subpattern\n        } else if (f > (recursionDelimCaptureNum + numCapturesInLeft + numCapturesInRight)) {\n          newFrom.push(f + numCapturesAddedInExpansion);\n        // Within the recursed subpattern, on the left of the recursion token\n        } else if (f <= (recursionDelimCaptureNum + numCapturesInLeft)) {\n          for (let i = 0; i <= reps; i++) {\n            newFrom.push(f + (numCapturesInLeft * i));\n          }\n        // Within the recursed subpattern, on the right of the recursion token\n        } else {\n          for (let i = 0; i <= reps; i++) {\n            newFrom.push(f + numCapturesAddedInLeft + (numCapturesInRight * i));\n          }\n        }\n      }\n      newCaptureTransfers.set(newTo, newFrom);\n    });\n    return newCaptureTransfers;\n  }\n  return captureTransfers;\n}\n\nexport {\n  recursion,\n};\n","// src/utils.js\nvar cp = String.fromCodePoint;\nvar r = String.raw;\nvar envFlags = {\n  flagGroups: (() => {\n    try {\n      new RegExp(\"(?i:)\");\n    } catch {\n      return false;\n    }\n    return true;\n  })(),\n  unicodeSets: (() => {\n    try {\n      new RegExp(\"\", \"v\");\n    } catch {\n      return false;\n    }\n    return true;\n  })()\n};\nenvFlags.bugFlagVLiteralHyphenIsRange = envFlags.unicodeSets ? (() => {\n  try {\n    new RegExp(r`[\\d\\-a]`, \"v\");\n  } catch {\n    return true;\n  }\n  return false;\n})() : false;\nenvFlags.bugNestedClassIgnoresNegation = envFlags.unicodeSets && new RegExp(\"[[^a]]\", \"v\").test(\"a\");\nfunction getNewCurrentFlags(current, { enable, disable }) {\n  return {\n    dotAll: !disable?.dotAll && !!(enable?.dotAll || current.dotAll),\n    ignoreCase: !disable?.ignoreCase && !!(enable?.ignoreCase || current.ignoreCase)\n  };\n}\nfunction getOrInsert(map, key, defaultValue) {\n  if (!map.has(key)) {\n    map.set(key, defaultValue);\n  }\n  return map.get(key);\n}\nfunction isMinTarget(target, min) {\n  return EsVersion[target] >= EsVersion[min];\n}\nfunction throwIfNullish(value, msg) {\n  if (value == null) {\n    throw new Error(msg ?? \"Value expected\");\n  }\n  return value;\n}\n\n// src/options.js\nvar EsVersion = {\n  ES2025: 2025,\n  ES2024: 2024,\n  ES2018: 2018\n};\nvar Target = (\n  /** @type {const} */\n  {\n    auto: \"auto\",\n    ES2025: \"ES2025\",\n    ES2024: \"ES2024\",\n    ES2018: \"ES2018\"\n  }\n);\nfunction getOptions(options = {}) {\n  if ({}.toString.call(options) !== \"[object Object]\") {\n    throw new Error(\"Unexpected options\");\n  }\n  if (options.target !== void 0 && !Target[options.target]) {\n    throw new Error(`Unexpected target \"${options.target}\"`);\n  }\n  const opts = {\n    // Sets the level of emulation rigor/strictness.\n    accuracy: \"default\",\n    // Disables advanced emulation that relies on returning a `RegExp` subclass, resulting in\n    // certain patterns not being emulatable.\n    avoidSubclass: false,\n    // Oniguruma flags; a string with `i`, `m`, `x`, `D`, `S`, `W`, `y{g}` in any order (all\n    // optional). Oniguruma's `m` is equivalent to JavaScript's `s` (`dotAll`).\n    flags: \"\",\n    // Include JavaScript flag `g` (`global`) in the result.\n    global: false,\n    // Include JavaScript flag `d` (`hasIndices`) in the result.\n    hasIndices: false,\n    // Delay regex construction until first use if the transpiled pattern is at least this length.\n    lazyCompileLength: Infinity,\n    // JavaScript version used for generated regexes. Using `auto` detects the best value based on\n    // your environment. Later targets allow faster processing, simpler generated source, and\n    // support for additional features.\n    target: \"auto\",\n    // Disables minifications that simplify the pattern without changing the meaning.\n    verbose: false,\n    ...options,\n    // Advanced options that override standard behavior, error checking, and flags when enabled.\n    rules: {\n      // Useful with TextMate grammars that merge backreferences across patterns.\n      allowOrphanBackrefs: false,\n      // Use ASCII `\\b` and `\\B`, which increases search performance of generated regexes.\n      asciiWordBoundaries: false,\n      // Allow unnamed captures and numbered calls (backreferences and subroutines) when using\n      // named capture. This is Oniguruma option `ONIG_OPTION_CAPTURE_GROUP`; on by default in\n      // `vscode-oniguruma`.\n      captureGroup: false,\n      // Change the recursion depth limit from Oniguruma's `20` to an integer `2`–`20`.\n      recursionLimit: 20,\n      // `^` as `\\A`; `$` as`\\Z`. Improves search performance of generated regexes without changing\n      // the meaning if searching line by line. This is Oniguruma option `ONIG_OPTION_SINGLELINE`.\n      singleline: false,\n      ...options.rules\n    }\n  };\n  if (opts.target === \"auto\") {\n    opts.target = envFlags.flagGroups ? \"ES2025\" : envFlags.unicodeSets ? \"ES2024\" : \"ES2018\";\n  }\n  return opts;\n}\n\n// src/unicode.js\nimport { slug } from \"oniguruma-parser/parser\";\nvar asciiSpaceChar = \"[\t-\\r ]\";\nvar CharsWithoutIgnoreCaseExpansion = /* @__PURE__ */ new Set([\n  cp(304),\n  // İ\n  cp(305)\n  // ı\n]);\nvar defaultWordChar = r`[\\p{L}\\p{M}\\p{N}\\p{Pc}]`;\nfunction getIgnoreCaseMatchChars(char) {\n  if (CharsWithoutIgnoreCaseExpansion.has(char)) {\n    return [char];\n  }\n  const set = /* @__PURE__ */ new Set();\n  const lower = char.toLowerCase();\n  const upper = lower.toUpperCase();\n  const title = LowerToTitleCaseMap.get(lower);\n  const altLower = LowerToAlternativeLowerCaseMap.get(lower);\n  const altUpper = LowerToAlternativeUpperCaseMap.get(lower);\n  if ([...upper].length === 1) {\n    set.add(upper);\n  }\n  altUpper && set.add(altUpper);\n  title && set.add(title);\n  set.add(lower);\n  altLower && set.add(altLower);\n  return [...set];\n}\nvar JsUnicodePropertyMap = /* @__PURE__ */ new Map(\n  `C Other\nCc Control cntrl\nCf Format\nCn Unassigned\nCo Private_Use\nCs Surrogate\nL Letter\nLC Cased_Letter\nLl Lowercase_Letter\nLm Modifier_Letter\nLo Other_Letter\nLt Titlecase_Letter\nLu Uppercase_Letter\nM Mark Combining_Mark\nMc Spacing_Mark\nMe Enclosing_Mark\nMn Nonspacing_Mark\nN Number\nNd Decimal_Number digit\nNl Letter_Number\nNo Other_Number\nP Punctuation punct\nPc Connector_Punctuation\nPd Dash_Punctuation\nPe Close_Punctuation\nPf Final_Punctuation\nPi Initial_Punctuation\nPo Other_Punctuation\nPs Open_Punctuation\nS Symbol\nSc Currency_Symbol\nSk Modifier_Symbol\nSm Math_Symbol\nSo Other_Symbol\nZ Separator\nZl Line_Separator\nZp Paragraph_Separator\nZs Space_Separator\nASCII\nASCII_Hex_Digit AHex\nAlphabetic Alpha\nAny\nAssigned\nBidi_Control Bidi_C\nBidi_Mirrored Bidi_M\nCase_Ignorable CI\nCased\nChanges_When_Casefolded CWCF\nChanges_When_Casemapped CWCM\nChanges_When_Lowercased CWL\nChanges_When_NFKC_Casefolded CWKCF\nChanges_When_Titlecased CWT\nChanges_When_Uppercased CWU\nDash\nDefault_Ignorable_Code_Point DI\nDeprecated Dep\nDiacritic Dia\nEmoji\nEmoji_Component EComp\nEmoji_Modifier EMod\nEmoji_Modifier_Base EBase\nEmoji_Presentation EPres\nExtended_Pictographic ExtPict\nExtender Ext\nGrapheme_Base Gr_Base\nGrapheme_Extend Gr_Ext\nHex_Digit Hex\nIDS_Binary_Operator IDSB\nIDS_Trinary_Operator IDST\nID_Continue IDC\nID_Start IDS\nIdeographic Ideo\nJoin_Control Join_C\nLogical_Order_Exception LOE\nLowercase Lower\nMath\nNoncharacter_Code_Point NChar\nPattern_Syntax Pat_Syn\nPattern_White_Space Pat_WS\nQuotation_Mark QMark\nRadical\nRegional_Indicator RI\nSentence_Terminal STerm\nSoft_Dotted SD\nTerminal_Punctuation Term\nUnified_Ideograph UIdeo\nUppercase Upper\nVariation_Selector VS\nWhite_Space space\nXID_Continue XIDC\nXID_Start XIDS`.split(/\\s/).map((p) => [slug(p), p])\n);\nvar LowerToAlternativeLowerCaseMap = /* @__PURE__ */ new Map([\n  [\"s\", cp(383)],\n  // s, ſ\n  [cp(383), \"s\"]\n  // ſ, s\n]);\nvar LowerToAlternativeUpperCaseMap = /* @__PURE__ */ new Map([\n  [cp(223), cp(7838)],\n  // ß, ẞ\n  [cp(107), cp(8490)],\n  // k, K (Kelvin)\n  [cp(229), cp(8491)],\n  // å, Å (Angstrom)\n  [cp(969), cp(8486)]\n  // ω, Ω (Ohm)\n]);\nvar LowerToTitleCaseMap = new Map([\n  titleEntry(453),\n  titleEntry(456),\n  titleEntry(459),\n  titleEntry(498),\n  ...titleRange(8072, 8079),\n  ...titleRange(8088, 8095),\n  ...titleRange(8104, 8111),\n  titleEntry(8124),\n  titleEntry(8140),\n  titleEntry(8188)\n]);\nvar PosixClassMap = /* @__PURE__ */ new Map([\n  [\"alnum\", r`[\\p{Alpha}\\p{Nd}]`],\n  [\"alpha\", r`\\p{Alpha}`],\n  [\"ascii\", r`\\p{ASCII}`],\n  [\"blank\", r`[\\p{Zs}\\t]`],\n  [\"cntrl\", r`\\p{Cc}`],\n  [\"digit\", r`\\p{Nd}`],\n  [\"graph\", r`[\\P{space}&&\\P{Cc}&&\\P{Cn}&&\\P{Cs}]`],\n  [\"lower\", r`\\p{Lower}`],\n  [\"print\", r`[[\\P{space}&&\\P{Cc}&&\\P{Cn}&&\\P{Cs}]\\p{Zs}]`],\n  [\"punct\", r`[\\p{P}\\p{S}]`],\n  // Updated value from Onig 6.9.9; changed from Unicode `\\p{punct}`\n  [\"space\", r`\\p{space}`],\n  [\"upper\", r`\\p{Upper}`],\n  [\"word\", r`[\\p{Alpha}\\p{M}\\p{Nd}\\p{Pc}]`],\n  [\"xdigit\", r`\\p{AHex}`]\n]);\nfunction range(start, end) {\n  const range2 = [];\n  for (let i = start; i <= end; i++) {\n    range2.push(i);\n  }\n  return range2;\n}\nfunction titleEntry(codePoint) {\n  const char = cp(codePoint);\n  return [char.toLowerCase(), char];\n}\nfunction titleRange(start, end) {\n  return range(start, end).map((codePoint) => titleEntry(codePoint));\n}\nvar UnicodePropertiesWithSpecificCase = /* @__PURE__ */ new Set([\n  \"Lower\",\n  \"Lowercase\",\n  \"Upper\",\n  \"Uppercase\",\n  \"Ll\",\n  \"Lowercase_Letter\",\n  \"Lt\",\n  \"Titlecase_Letter\",\n  \"Lu\",\n  \"Uppercase_Letter\"\n  // The `Changes_When_*` properties (and their aliases) could be included, but they're very rare.\n  // Some other properties include a handful of chars with specific cases only, but these chars are\n  // generally extreme edge cases and using such properties case insensitively generally produces\n  // undesired behavior anyway\n]);\n\n// src/transform.js\nimport { createAlternative, createAssertion, createBackreference, createCapturingGroup, createCharacter, createCharacterClass, createCharacterSet, createGroup, createLookaroundAssertion, createQuantifier, createSubroutine, createUnicodeProperty, hasOnlyChild, parse, slug as slug2 } from \"oniguruma-parser/parser\";\nimport { traverse } from \"oniguruma-parser/traverser\";\nfunction transform(ast, options) {\n  const opts = {\n    // A couple edge cases exist where options `accuracy` and `bestEffortTarget` are used:\n    // - `CharacterSet` kind `text_segment` (`\\X`): An exact representation would require heavy\n    //   Unicode data; a best-effort approximation requires knowing the target.\n    // - `CharacterSet` kind `posix` with values `graph` and `print`: Their complex Unicode\n    //   representations would be hard to change to ASCII versions after the fact in the generator\n    //   based on `target`/`accuracy`, so produce the appropriate structure here.\n    accuracy: \"default\",\n    asciiWordBoundaries: false,\n    avoidSubclass: false,\n    bestEffortTarget: \"ES2025\",\n    ...options\n  };\n  addParentProperties(ast);\n  const firstPassState = {\n    accuracy: opts.accuracy,\n    asciiWordBoundaries: opts.asciiWordBoundaries,\n    avoidSubclass: opts.avoidSubclass,\n    flagDirectivesByAlt: /* @__PURE__ */ new Map(),\n    jsGroupNameMap: /* @__PURE__ */ new Map(),\n    minTargetEs2024: isMinTarget(opts.bestEffortTarget, \"ES2024\"),\n    passedLookbehind: false,\n    strategy: null,\n    // Subroutines can appear before the groups they ref, so collect reffed nodes for a second pass \n    subroutineRefMap: /* @__PURE__ */ new Map(),\n    supportedGNodes: /* @__PURE__ */ new Set(),\n    digitIsAscii: ast.flags.digitIsAscii,\n    spaceIsAscii: ast.flags.spaceIsAscii,\n    wordIsAscii: ast.flags.wordIsAscii\n  };\n  traverse(ast, FirstPassVisitor, firstPassState);\n  const globalFlags = {\n    dotAll: ast.flags.dotAll,\n    ignoreCase: ast.flags.ignoreCase\n  };\n  const secondPassState = {\n    currentFlags: globalFlags,\n    prevFlags: null,\n    globalFlags,\n    groupOriginByCopy: /* @__PURE__ */ new Map(),\n    groupsByName: /* @__PURE__ */ new Map(),\n    multiplexCapturesToLeftByRef: /* @__PURE__ */ new Map(),\n    openRefs: /* @__PURE__ */ new Map(),\n    reffedNodesByReferencer: /* @__PURE__ */ new Map(),\n    subroutineRefMap: firstPassState.subroutineRefMap\n  };\n  traverse(ast, SecondPassVisitor, secondPassState);\n  const thirdPassState = {\n    groupsByName: secondPassState.groupsByName,\n    highestOrphanBackref: 0,\n    numCapturesToLeft: 0,\n    reffedNodesByReferencer: secondPassState.reffedNodesByReferencer\n  };\n  traverse(ast, ThirdPassVisitor, thirdPassState);\n  ast._originMap = secondPassState.groupOriginByCopy;\n  ast._strategy = firstPassState.strategy;\n  return ast;\n}\nvar FirstPassVisitor = {\n  AbsenceFunction({ node, parent, replaceWith }) {\n    const { body, kind } = node;\n    if (kind === \"repeater\") {\n      const innerGroup = createGroup();\n      innerGroup.body[0].body.push(\n        // Insert own alts as `body`\n        createLookaroundAssertion({ negate: true, body }),\n        createUnicodeProperty(\"Any\")\n      );\n      const outerGroup = createGroup();\n      outerGroup.body[0].body.push(\n        createQuantifier(\"greedy\", 0, Infinity, innerGroup)\n      );\n      replaceWith(setParentDeep(outerGroup, parent), { traverse: true });\n    } else {\n      throw new Error(`Unsupported absence function \"(?~|\"`);\n    }\n  },\n  Alternative: {\n    enter({ node, parent, key }, { flagDirectivesByAlt }) {\n      const flagDirectives = node.body.filter((el) => el.kind === \"flags\");\n      for (let i = key + 1; i < parent.body.length; i++) {\n        const forwardSiblingAlt = parent.body[i];\n        getOrInsert(flagDirectivesByAlt, forwardSiblingAlt, []).push(...flagDirectives);\n      }\n    },\n    exit({ node }, { flagDirectivesByAlt }) {\n      if (flagDirectivesByAlt.get(node)?.length) {\n        const flags = getCombinedFlagModsFromFlagNodes(flagDirectivesByAlt.get(node));\n        if (flags) {\n          const flagGroup = createGroup({ flags });\n          flagGroup.body[0].body = node.body;\n          node.body = [setParentDeep(flagGroup, node)];\n        }\n      }\n    }\n  },\n  Assertion({ node, parent, key, container, root, remove, replaceWith }, state) {\n    const { kind, negate } = node;\n    const { asciiWordBoundaries, avoidSubclass, supportedGNodes, wordIsAscii } = state;\n    if (kind === \"text_segment_boundary\") {\n      throw new Error(`Unsupported text segment boundary \"\\\\${negate ? \"Y\" : \"y\"}\"`);\n    } else if (kind === \"line_end\") {\n      replaceWith(setParentDeep(createLookaroundAssertion({ body: [\n        createAlternative({ body: [createAssertion(\"string_end\")] }),\n        createAlternative({ body: [createCharacter(10)] })\n        // `\\n`\n      ] }), parent));\n    } else if (kind === \"line_start\") {\n      replaceWith(setParentDeep(parseFragment(r`(?<=\\A|\\n(?!\\z))`, { skipLookbehindValidation: true }), parent));\n    } else if (kind === \"search_start\") {\n      if (supportedGNodes.has(node)) {\n        root.flags.sticky = true;\n        remove();\n      } else {\n        const prev = container[key - 1];\n        if (prev && isAlwaysNonZeroLength(prev)) {\n          replaceWith(setParentDeep(createLookaroundAssertion({ negate: true }), parent));\n        } else if (avoidSubclass) {\n          throw new Error(r`Uses \"\\G\" in a way that requires a subclass`);\n        } else {\n          replaceWith(setParent(createAssertion(\"string_start\"), parent));\n          state.strategy = \"clip_search\";\n        }\n      }\n    } else if (kind === \"string_end\" || kind === \"string_start\") {\n    } else if (kind === \"string_end_newline\") {\n      replaceWith(setParentDeep(parseFragment(r`(?=\\n?\\z)`), parent));\n    } else if (kind === \"word_boundary\") {\n      if (!wordIsAscii && !asciiWordBoundaries) {\n        const b = `(?:(?<=${defaultWordChar})(?!${defaultWordChar})|(?<!${defaultWordChar})(?=${defaultWordChar}))`;\n        const B = `(?:(?<=${defaultWordChar})(?=${defaultWordChar})|(?<!${defaultWordChar})(?!${defaultWordChar}))`;\n        replaceWith(setParentDeep(parseFragment(negate ? B : b), parent));\n      }\n    } else {\n      throw new Error(`Unexpected assertion kind \"${kind}\"`);\n    }\n  },\n  Backreference({ node }, { jsGroupNameMap }) {\n    let { ref } = node;\n    if (typeof ref === \"string\" && !isValidJsGroupName(ref)) {\n      ref = getAndStoreJsGroupName(ref, jsGroupNameMap);\n      node.ref = ref;\n    }\n  },\n  CapturingGroup({ node }, { jsGroupNameMap, subroutineRefMap }) {\n    let { name } = node;\n    if (name && !isValidJsGroupName(name)) {\n      name = getAndStoreJsGroupName(name, jsGroupNameMap);\n      node.name = name;\n    }\n    subroutineRefMap.set(node.number, node);\n    if (name) {\n      subroutineRefMap.set(name, node);\n    }\n  },\n  CharacterClassRange({ node, parent, replaceWith }) {\n    if (parent.kind === \"intersection\") {\n      const cc = createCharacterClass({ body: [node] });\n      replaceWith(setParentDeep(cc, parent), { traverse: true });\n    }\n  },\n  CharacterSet({ node, parent, replaceWith }, { accuracy, minTargetEs2024, digitIsAscii, spaceIsAscii, wordIsAscii }) {\n    const { kind, negate, value } = node;\n    if (digitIsAscii && (kind === \"digit\" || value === \"digit\")) {\n      replaceWith(setParent(createCharacterSet(\"digit\", { negate }), parent));\n      return;\n    }\n    if (spaceIsAscii && (kind === \"space\" || value === \"space\")) {\n      replaceWith(setParentDeep(setNegate(parseFragment(asciiSpaceChar), negate), parent));\n      return;\n    }\n    if (wordIsAscii && (kind === \"word\" || value === \"word\")) {\n      replaceWith(setParent(createCharacterSet(\"word\", { negate }), parent));\n      return;\n    }\n    if (kind === \"any\") {\n      replaceWith(setParent(createUnicodeProperty(\"Any\"), parent));\n    } else if (kind === \"digit\") {\n      replaceWith(setParent(createUnicodeProperty(\"Nd\", { negate }), parent));\n    } else if (kind === \"dot\") {\n    } else if (kind === \"text_segment\") {\n      if (accuracy === \"strict\") {\n        throw new Error(r`Use of \"\\X\" requires non-strict accuracy`);\n      }\n      const eBase = \"\\\\p{Emoji}(?:\\\\p{EMod}|\\\\uFE0F\\\\u20E3?|[\\\\x{E0020}-\\\\x{E007E}]+\\\\x{E007F})?\";\n      const emoji = r`\\p{RI}{2}|${eBase}(?:\\u200D${eBase})*`;\n      replaceWith(setParentDeep(parseFragment(\n        // Close approximation of an extended grapheme cluster; see: <unicode.org/reports/tr29/>\n        r`(?>\\r\\n|${minTargetEs2024 ? r`\\p{RGI_Emoji}` : emoji}|\\P{M}\\p{M}*)`,\n        // Allow JS property `RGI_Emoji` through\n        { skipPropertyNameValidation: true }\n      ), parent));\n    } else if (kind === \"hex\") {\n      replaceWith(setParent(createUnicodeProperty(\"AHex\", { negate }), parent));\n    } else if (kind === \"newline\") {\n      replaceWith(setParentDeep(parseFragment(negate ? \"[^\\n]\" : \"(?>\\r\\n?|[\\n\\v\\f\\x85\\u2028\\u2029])\"), parent));\n    } else if (kind === \"posix\") {\n      if (!minTargetEs2024 && (value === \"graph\" || value === \"print\")) {\n        if (accuracy === \"strict\") {\n          throw new Error(`POSIX class \"${value}\" requires min target ES2024 or non-strict accuracy`);\n        }\n        let ascii = {\n          graph: \"!-~\",\n          print: \" -~\"\n        }[value];\n        if (negate) {\n          ascii = `\\0-${cp(ascii.codePointAt(0) - 1)}${cp(ascii.codePointAt(2) + 1)}-\\u{10FFFF}`;\n        }\n        replaceWith(setParentDeep(parseFragment(`[${ascii}]`), parent));\n      } else {\n        replaceWith(setParentDeep(setNegate(parseFragment(PosixClassMap.get(value)), negate), parent));\n      }\n    } else if (kind === \"property\") {\n      if (!JsUnicodePropertyMap.has(slug2(value))) {\n        node.key = \"sc\";\n      }\n    } else if (kind === \"space\") {\n      replaceWith(setParent(createUnicodeProperty(\"space\", { negate }), parent));\n    } else if (kind === \"word\") {\n      replaceWith(setParentDeep(setNegate(parseFragment(defaultWordChar), negate), parent));\n    } else {\n      throw new Error(`Unexpected character set kind \"${kind}\"`);\n    }\n  },\n  Directive({ node, parent, root, remove, replaceWith, removeAllPrevSiblings, removeAllNextSiblings }) {\n    const { kind, flags } = node;\n    if (kind === \"flags\") {\n      if (!flags.enable && !flags.disable) {\n        remove();\n      } else {\n        const flagGroup = createGroup({ flags });\n        flagGroup.body[0].body = removeAllNextSiblings();\n        replaceWith(setParentDeep(flagGroup, parent), { traverse: true });\n      }\n    } else if (kind === \"keep\") {\n      const firstAlt = root.body[0];\n      const hasWrapperGroup = root.body.length === 1 && // Not emulatable if within a `CapturingGroup`\n      hasOnlyChild(firstAlt, { type: \"Group\" }) && firstAlt.body[0].body.length === 1;\n      const topLevel = hasWrapperGroup ? firstAlt.body[0] : root;\n      if (parent.parent !== topLevel || topLevel.body.length > 1) {\n        throw new Error(r`Uses \"\\K\" in a way that's unsupported`);\n      }\n      const lookbehind = createLookaroundAssertion({ behind: true });\n      lookbehind.body[0].body = removeAllPrevSiblings();\n      replaceWith(setParentDeep(lookbehind, parent));\n    } else {\n      throw new Error(`Unexpected directive kind \"${kind}\"`);\n    }\n  },\n  Flags({ node, parent }) {\n    if (node.posixIsAscii) {\n      throw new Error('Unsupported flag \"P\"');\n    }\n    if (node.textSegmentMode === \"word\") {\n      throw new Error('Unsupported flag \"y{w}\"');\n    }\n    [\n      \"digitIsAscii\",\n      // Flag D\n      \"extended\",\n      // Flag x\n      \"posixIsAscii\",\n      // Flag P\n      \"spaceIsAscii\",\n      // Flag S\n      \"wordIsAscii\",\n      // Flag W\n      \"textSegmentMode\"\n      // Flag y{g} or y{w}\n    ].forEach((f) => delete node[f]);\n    Object.assign(node, {\n      // JS flag g; no Onig equiv\n      global: false,\n      // JS flag d; no Onig equiv\n      hasIndices: false,\n      // JS flag m; no Onig equiv but its behavior is always on in Onig. Onig's only line break\n      // char is line feed, unlike JS, so this flag isn't used since it would produce inaccurate\n      // results (also allows `^` and `$` to be used in the generator for string start and end)\n      multiline: false,\n      // JS flag y; no Onig equiv, but used for `\\G` emulation\n      sticky: node.sticky ?? false\n      // Note: Regex+ doesn't allow explicitly adding flags it handles implicitly, so leave out\n      // properties `unicode` (JS flag u) and `unicodeSets` (JS flag v). Keep the existing values\n      // for `ignoreCase` (flag i) and `dotAll` (JS flag s, but Onig flag m)\n    });\n    parent.options = {\n      disable: {\n        // Onig uses different rules for flag x than Regex+, so disable the implicit flag\n        x: true,\n        // Onig has no flag to control \"named capture only\" mode but contextually applies its\n        // behavior when named capturing is used, so disable Regex+'s implicit flag for it\n        n: true\n      },\n      force: {\n        // Always add flag v because we're generating an AST that relies on it (it enables JS\n        // support for Onig features nested classes, intersection, Unicode properties, etc.).\n        // However, the generator might disable flag v based on its `target` option\n        v: true\n      }\n    };\n  },\n  Group({ node }) {\n    if (!node.flags) {\n      return;\n    }\n    const { enable, disable } = node.flags;\n    enable?.extended && delete enable.extended;\n    disable?.extended && delete disable.extended;\n    enable?.dotAll && disable?.dotAll && delete enable.dotAll;\n    enable?.ignoreCase && disable?.ignoreCase && delete enable.ignoreCase;\n    enable && !Object.keys(enable).length && delete node.flags.enable;\n    disable && !Object.keys(disable).length && delete node.flags.disable;\n    !node.flags.enable && !node.flags.disable && delete node.flags;\n  },\n  LookaroundAssertion({ node }, state) {\n    const { kind } = node;\n    if (kind === \"lookbehind\") {\n      state.passedLookbehind = true;\n    }\n  },\n  NamedCallout({ node, parent, replaceWith }) {\n    const { kind } = node;\n    if (kind === \"fail\") {\n      replaceWith(setParentDeep(createLookaroundAssertion({ negate: true }), parent));\n    } else {\n      throw new Error(`Unsupported named callout \"(*${kind.toUpperCase()}\"`);\n    }\n  },\n  Quantifier({ node }) {\n    if (node.body.type === \"Quantifier\") {\n      const group = createGroup();\n      group.body[0].body.push(node.body);\n      node.body = setParentDeep(group, node);\n    }\n  },\n  Regex: {\n    enter({ node }, { supportedGNodes }) {\n      const leadingGs = [];\n      let hasAltWithLeadG = false;\n      let hasAltWithoutLeadG = false;\n      for (const alt of node.body) {\n        if (alt.body.length === 1 && alt.body[0].kind === \"search_start\") {\n          alt.body.pop();\n        } else {\n          const leadingG = getLeadingG(alt.body);\n          if (leadingG) {\n            hasAltWithLeadG = true;\n            Array.isArray(leadingG) ? leadingGs.push(...leadingG) : leadingGs.push(leadingG);\n          } else {\n            hasAltWithoutLeadG = true;\n          }\n        }\n      }\n      if (hasAltWithLeadG && !hasAltWithoutLeadG) {\n        leadingGs.forEach((g) => supportedGNodes.add(g));\n      }\n    },\n    exit(_, { accuracy, passedLookbehind, strategy }) {\n      if (accuracy === \"strict\" && passedLookbehind && strategy) {\n        throw new Error(r`Uses \"\\G\" in a way that requires non-strict accuracy`);\n      }\n    }\n  },\n  Subroutine({ node }, { jsGroupNameMap }) {\n    let { ref } = node;\n    if (typeof ref === \"string\" && !isValidJsGroupName(ref)) {\n      ref = getAndStoreJsGroupName(ref, jsGroupNameMap);\n      node.ref = ref;\n    }\n  }\n};\nvar SecondPassVisitor = {\n  Backreference({ node }, { multiplexCapturesToLeftByRef, reffedNodesByReferencer }) {\n    const { orphan, ref } = node;\n    if (!orphan) {\n      reffedNodesByReferencer.set(node, [...multiplexCapturesToLeftByRef.get(ref).map(({ node: node2 }) => node2)]);\n    }\n  },\n  CapturingGroup: {\n    enter({\n      node,\n      parent,\n      replaceWith,\n      skip\n    }, {\n      groupOriginByCopy,\n      groupsByName,\n      multiplexCapturesToLeftByRef,\n      openRefs,\n      reffedNodesByReferencer\n    }) {\n      const origin = groupOriginByCopy.get(node);\n      if (origin && openRefs.has(node.number)) {\n        const recursion2 = setParent(createRecursion(node.number), parent);\n        reffedNodesByReferencer.set(recursion2, openRefs.get(node.number));\n        replaceWith(recursion2);\n        return;\n      }\n      openRefs.set(node.number, node);\n      multiplexCapturesToLeftByRef.set(node.number, []);\n      if (node.name) {\n        getOrInsert(multiplexCapturesToLeftByRef, node.name, []);\n      }\n      const multiplexNodes = multiplexCapturesToLeftByRef.get(node.name ?? node.number);\n      for (let i = 0; i < multiplexNodes.length; i++) {\n        const multiplex = multiplexNodes[i];\n        if (\n          // This group is from subroutine expansion, and there's a multiplex value from either the\n          // origin node or a prior subroutine expansion group with the same origin\n          origin === multiplex.node || origin && origin === multiplex.origin || // This group is not from subroutine expansion, and it comes after a subroutine expansion\n          // group that refers to this group\n          node === multiplex.origin\n        ) {\n          multiplexNodes.splice(i, 1);\n          break;\n        }\n      }\n      multiplexCapturesToLeftByRef.get(node.number).push({ node, origin });\n      if (node.name) {\n        multiplexCapturesToLeftByRef.get(node.name).push({ node, origin });\n      }\n      if (node.name) {\n        const groupsWithSameName = getOrInsert(groupsByName, node.name, /* @__PURE__ */ new Map());\n        let hasDuplicateNameToRemove = false;\n        if (origin) {\n          hasDuplicateNameToRemove = true;\n        } else {\n          for (const groupInfo of groupsWithSameName.values()) {\n            if (!groupInfo.hasDuplicateNameToRemove) {\n              hasDuplicateNameToRemove = true;\n              break;\n            }\n          }\n        }\n        groupsByName.get(node.name).set(node, { node, hasDuplicateNameToRemove });\n      }\n    },\n    exit({ node }, { openRefs }) {\n      openRefs.delete(node.number);\n    }\n  },\n  Group: {\n    enter({ node }, state) {\n      state.prevFlags = state.currentFlags;\n      if (node.flags) {\n        state.currentFlags = getNewCurrentFlags(state.currentFlags, node.flags);\n      }\n    },\n    exit(_, state) {\n      state.currentFlags = state.prevFlags;\n    }\n  },\n  Subroutine({ node, parent, replaceWith }, state) {\n    const { isRecursive, ref } = node;\n    if (isRecursive) {\n      let reffed = parent;\n      while (reffed = reffed.parent) {\n        if (reffed.type === \"CapturingGroup\" && (reffed.name === ref || reffed.number === ref)) {\n          break;\n        }\n      }\n      state.reffedNodesByReferencer.set(node, reffed);\n      return;\n    }\n    const reffedGroupNode = state.subroutineRefMap.get(ref);\n    const isGlobalRecursion = ref === 0;\n    const expandedSubroutine = isGlobalRecursion ? createRecursion(0) : (\n      // The reffed group might itself contain subroutines, which are expanded during sub-traversal\n      cloneCapturingGroup(reffedGroupNode, state.groupOriginByCopy, null)\n    );\n    let replacement = expandedSubroutine;\n    if (!isGlobalRecursion) {\n      const reffedGroupFlagMods = getCombinedFlagModsFromFlagNodes(getAllParents(\n        reffedGroupNode,\n        (p) => p.type === \"Group\" && !!p.flags\n      ));\n      const reffedGroupFlags = reffedGroupFlagMods ? getNewCurrentFlags(state.globalFlags, reffedGroupFlagMods) : state.globalFlags;\n      if (!areFlagsEqual(reffedGroupFlags, state.currentFlags)) {\n        replacement = createGroup({\n          flags: getFlagModsFromFlags(reffedGroupFlags)\n        });\n        replacement.body[0].body.push(expandedSubroutine);\n      }\n    }\n    replaceWith(setParentDeep(replacement, parent), { traverse: !isGlobalRecursion });\n  }\n};\nvar ThirdPassVisitor = {\n  Backreference({ node, parent, replaceWith }, state) {\n    if (node.orphan) {\n      state.highestOrphanBackref = Math.max(state.highestOrphanBackref, node.ref);\n      return;\n    }\n    const reffedNodes = state.reffedNodesByReferencer.get(node);\n    const participants = reffedNodes.filter((reffed) => canParticipateWithNode(reffed, node));\n    if (!participants.length) {\n      replaceWith(setParentDeep(createLookaroundAssertion({ negate: true }), parent));\n    } else if (participants.length > 1) {\n      const group = createGroup({\n        atomic: true,\n        body: participants.reverse().map((reffed) => createAlternative({\n          body: [createBackreference(reffed.number)]\n        }))\n      });\n      replaceWith(setParentDeep(group, parent));\n    } else {\n      node.ref = participants[0].number;\n    }\n  },\n  CapturingGroup({ node }, state) {\n    node.number = ++state.numCapturesToLeft;\n    if (node.name) {\n      if (state.groupsByName.get(node.name).get(node).hasDuplicateNameToRemove) {\n        delete node.name;\n      }\n    }\n  },\n  Regex: {\n    exit({ node }, state) {\n      const numCapsNeeded = Math.max(state.highestOrphanBackref - state.numCapturesToLeft, 0);\n      for (let i = 0; i < numCapsNeeded; i++) {\n        const emptyCapture = createCapturingGroup();\n        node.body.at(-1).body.push(emptyCapture);\n      }\n    }\n  },\n  Subroutine({ node }, state) {\n    if (!node.isRecursive || node.ref === 0) {\n      return;\n    }\n    node.ref = state.reffedNodesByReferencer.get(node).number;\n  }\n};\nfunction addParentProperties(root) {\n  traverse(root, {\n    \"*\"({ node, parent }) {\n      node.parent = parent;\n    }\n  });\n}\nfunction areFlagsEqual(a, b) {\n  return a.dotAll === b.dotAll && a.ignoreCase === b.ignoreCase;\n}\nfunction canParticipateWithNode(capture, node) {\n  let rightmostPoint = node;\n  do {\n    if (rightmostPoint.type === \"Regex\") {\n      return false;\n    }\n    if (rightmostPoint.type === \"Alternative\") {\n      continue;\n    }\n    if (rightmostPoint === capture) {\n      return false;\n    }\n    const kidsOfParent = getKids(rightmostPoint.parent);\n    for (const kid of kidsOfParent) {\n      if (kid === rightmostPoint) {\n        break;\n      }\n      if (kid === capture || isAncestorOf(kid, capture)) {\n        return true;\n      }\n    }\n  } while (rightmostPoint = rightmostPoint.parent);\n  throw new Error(\"Unexpected path\");\n}\nfunction cloneCapturingGroup(obj, originMap, up, up2) {\n  const store = Array.isArray(obj) ? [] : {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (key === \"parent\") {\n      store.parent = Array.isArray(up) ? up2 : up;\n    } else if (value && typeof value === \"object\") {\n      store[key] = cloneCapturingGroup(value, originMap, store, up);\n    } else {\n      if (key === \"type\" && value === \"CapturingGroup\") {\n        originMap.set(store, originMap.get(obj) ?? obj);\n      }\n      store[key] = value;\n    }\n  }\n  return store;\n}\nfunction createRecursion(ref) {\n  const node = createSubroutine(ref);\n  node.isRecursive = true;\n  return node;\n}\nfunction getAllParents(node, filterFn) {\n  const results = [];\n  while (node = node.parent) {\n    if (!filterFn || filterFn(node)) {\n      results.push(node);\n    }\n  }\n  return results;\n}\nfunction getAndStoreJsGroupName(name, map) {\n  if (map.has(name)) {\n    return map.get(name);\n  }\n  const jsName = `$${map.size}_${name.replace(/^[^$_\\p{IDS}]|[^$\\u200C\\u200D\\p{IDC}]/ug, \"_\")}`;\n  map.set(name, jsName);\n  return jsName;\n}\nfunction getCombinedFlagModsFromFlagNodes(flagNodes) {\n  const flagProps = [\"dotAll\", \"ignoreCase\"];\n  const combinedFlags = { enable: {}, disable: {} };\n  flagNodes.forEach(({ flags }) => {\n    flagProps.forEach((prop) => {\n      if (flags.enable?.[prop]) {\n        delete combinedFlags.disable[prop];\n        combinedFlags.enable[prop] = true;\n      }\n      if (flags.disable?.[prop]) {\n        combinedFlags.disable[prop] = true;\n      }\n    });\n  });\n  if (!Object.keys(combinedFlags.enable).length) {\n    delete combinedFlags.enable;\n  }\n  if (!Object.keys(combinedFlags.disable).length) {\n    delete combinedFlags.disable;\n  }\n  if (combinedFlags.enable || combinedFlags.disable) {\n    return combinedFlags;\n  }\n  return null;\n}\nfunction getFlagModsFromFlags({ dotAll, ignoreCase }) {\n  const mods = {};\n  if (dotAll || ignoreCase) {\n    mods.enable = {};\n    dotAll && (mods.enable.dotAll = true);\n    ignoreCase && (mods.enable.ignoreCase = true);\n  }\n  if (!dotAll || !ignoreCase) {\n    mods.disable = {};\n    !dotAll && (mods.disable.dotAll = true);\n    !ignoreCase && (mods.disable.ignoreCase = true);\n  }\n  return mods;\n}\nfunction getKids(node) {\n  if (!node) {\n    throw new Error(\"Node expected\");\n  }\n  const { body } = node;\n  return Array.isArray(body) ? body : body ? [body] : null;\n}\nfunction getLeadingG(els) {\n  const firstToConsider = els.find((el) => el.kind === \"search_start\" || isLoneGLookaround(el, { negate: false }) || !isAlwaysZeroLength(el));\n  if (!firstToConsider) {\n    return null;\n  }\n  if (firstToConsider.kind === \"search_start\") {\n    return firstToConsider;\n  }\n  if (firstToConsider.type === \"LookaroundAssertion\") {\n    return firstToConsider.body[0].body[0];\n  }\n  if (firstToConsider.type === \"CapturingGroup\" || firstToConsider.type === \"Group\") {\n    const gNodesForGroup = [];\n    for (const alt of firstToConsider.body) {\n      const leadingG = getLeadingG(alt.body);\n      if (!leadingG) {\n        return null;\n      }\n      Array.isArray(leadingG) ? gNodesForGroup.push(...leadingG) : gNodesForGroup.push(leadingG);\n    }\n    return gNodesForGroup;\n  }\n  return null;\n}\nfunction isAncestorOf(node, descendant) {\n  const kids = getKids(node) ?? [];\n  for (const kid of kids) {\n    if (kid === descendant || isAncestorOf(kid, descendant)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isAlwaysZeroLength({ type }) {\n  return type === \"Assertion\" || type === \"Directive\" || type === \"LookaroundAssertion\";\n}\nfunction isAlwaysNonZeroLength(node) {\n  const types = [\n    \"Character\",\n    \"CharacterClass\",\n    \"CharacterSet\"\n  ];\n  return types.includes(node.type) || node.type === \"Quantifier\" && node.min && types.includes(node.body.type);\n}\nfunction isLoneGLookaround(node, options) {\n  const opts = {\n    negate: null,\n    ...options\n  };\n  return node.type === \"LookaroundAssertion\" && (opts.negate === null || node.negate === opts.negate) && node.body.length === 1 && hasOnlyChild(node.body[0], {\n    type: \"Assertion\",\n    kind: \"search_start\"\n  });\n}\nfunction isValidJsGroupName(name) {\n  return /^[$_\\p{IDS}][$\\u200C\\u200D\\p{IDC}]*$/u.test(name);\n}\nfunction parseFragment(pattern, options) {\n  const ast = parse(pattern, {\n    ...options,\n    // Providing a custom set of Unicode property names avoids converting some JS Unicode\n    // properties (ex: `\\p{Alpha}`) to Onig POSIX classes\n    unicodePropertyMap: JsUnicodePropertyMap\n  });\n  const alts = ast.body;\n  if (alts.length > 1 || alts[0].body.length > 1) {\n    return createGroup({ body: alts });\n  }\n  return alts[0].body[0];\n}\nfunction setNegate(node, negate) {\n  node.negate = negate;\n  return node;\n}\nfunction setParent(node, parent) {\n  node.parent = parent;\n  return node;\n}\nfunction setParentDeep(node, parent) {\n  addParentProperties(node);\n  node.parent = parent;\n  return node;\n}\n\n// src/generate.js\nimport { createAlternative as createAlternative2, createCharacter as createCharacter2, createGroup as createGroup2 } from \"oniguruma-parser/parser\";\nimport { traverse as traverse2 } from \"oniguruma-parser/traverser\";\nfunction generate(ast, options) {\n  const opts = getOptions(options);\n  const minTargetEs2024 = isMinTarget(opts.target, \"ES2024\");\n  const minTargetEs2025 = isMinTarget(opts.target, \"ES2025\");\n  const recursionLimit = opts.rules.recursionLimit;\n  if (!Number.isInteger(recursionLimit) || recursionLimit < 2 || recursionLimit > 20) {\n    throw new Error(\"Invalid recursionLimit; use 2-20\");\n  }\n  let hasCaseInsensitiveNode = null;\n  let hasCaseSensitiveNode = null;\n  if (!minTargetEs2025) {\n    const iStack = [ast.flags.ignoreCase];\n    traverse2(ast, FlagModifierVisitor, {\n      getCurrentModI: () => iStack.at(-1),\n      popModI() {\n        iStack.pop();\n      },\n      pushModI(isIOn) {\n        iStack.push(isIOn);\n      },\n      setHasCasedChar() {\n        if (iStack.at(-1)) {\n          hasCaseInsensitiveNode = true;\n        } else {\n          hasCaseSensitiveNode = true;\n        }\n      }\n    });\n  }\n  const appliedGlobalFlags = {\n    dotAll: ast.flags.dotAll,\n    // - Turn global flag i on if a case insensitive node was used and no case sensitive nodes were\n    //   used (to avoid unnecessary node expansion).\n    // - Turn global flag i off if a case sensitive node was used (since case sensitivity can't be\n    //   forced without the use of ES2025 flag groups)\n    ignoreCase: !!((ast.flags.ignoreCase || hasCaseInsensitiveNode) && !hasCaseSensitiveNode)\n  };\n  let lastNode = ast;\n  const state = {\n    accuracy: opts.accuracy,\n    appliedGlobalFlags,\n    captureMap: /* @__PURE__ */ new Map(),\n    currentFlags: {\n      dotAll: ast.flags.dotAll,\n      ignoreCase: ast.flags.ignoreCase\n    },\n    inCharClass: false,\n    lastNode,\n    originMap: ast._originMap,\n    recursionLimit,\n    useAppliedIgnoreCase: !!(!minTargetEs2025 && hasCaseInsensitiveNode && hasCaseSensitiveNode),\n    useFlagMods: minTargetEs2025,\n    useFlagV: minTargetEs2024,\n    verbose: opts.verbose\n  };\n  function gen(node) {\n    state.lastNode = lastNode;\n    lastNode = node;\n    const fn = throwIfNullish(generator[node.type], `Unexpected node type \"${node.type}\"`);\n    return fn(node, state, gen);\n  }\n  const result = {\n    pattern: ast.body.map(gen).join(\"|\"),\n    // Could reset `lastNode` at this point via `lastNode = ast`, but it isn't needed by flags\n    flags: gen(ast.flags),\n    options: { ...ast.options }\n  };\n  if (!minTargetEs2024) {\n    delete result.options.force.v;\n    result.options.disable.v = true;\n    result.options.unicodeSetsPlugin = null;\n  }\n  result._captureTransfers = /* @__PURE__ */ new Map();\n  result._hiddenCaptures = [];\n  state.captureMap.forEach((value, key) => {\n    if (value.hidden) {\n      result._hiddenCaptures.push(key);\n    }\n    if (value.transferTo) {\n      getOrInsert(result._captureTransfers, value.transferTo, []).push(key);\n    }\n  });\n  return result;\n}\nvar FlagModifierVisitor = {\n  \"*\": {\n    enter({ node }, state) {\n      if (isAnyGroup(node)) {\n        const currentModI = state.getCurrentModI();\n        state.pushModI(\n          node.flags ? getNewCurrentFlags({ ignoreCase: currentModI }, node.flags).ignoreCase : currentModI\n        );\n      }\n    },\n    exit({ node }, state) {\n      if (isAnyGroup(node)) {\n        state.popModI();\n      }\n    }\n  },\n  Backreference(_, state) {\n    state.setHasCasedChar();\n  },\n  Character({ node }, state) {\n    if (charHasCase(cp(node.value))) {\n      state.setHasCasedChar();\n    }\n  },\n  CharacterClassRange({ node, skip }, state) {\n    skip();\n    if (getCasesOutsideCharClassRange(node, { firstOnly: true }).length) {\n      state.setHasCasedChar();\n    }\n  },\n  CharacterSet({ node }, state) {\n    if (node.kind === \"property\" && UnicodePropertiesWithSpecificCase.has(node.value)) {\n      state.setHasCasedChar();\n    }\n  }\n};\nvar generator = {\n  /**\n  @param {AlternativeNode} node\n  */\n  Alternative({ body }, _, gen) {\n    return body.map(gen).join(\"\");\n  },\n  /**\n  @param {AssertionNode} node\n  */\n  Assertion({ kind, negate }) {\n    if (kind === \"string_end\") {\n      return \"$\";\n    }\n    if (kind === \"string_start\") {\n      return \"^\";\n    }\n    if (kind === \"word_boundary\") {\n      return negate ? r`\\B` : r`\\b`;\n    }\n    throw new Error(`Unexpected assertion kind \"${kind}\"`);\n  },\n  /**\n  @param {BackreferenceNode} node\n  */\n  Backreference({ ref }, state) {\n    if (typeof ref !== \"number\") {\n      throw new Error(\"Unexpected named backref in transformed AST\");\n    }\n    if (!state.useFlagMods && state.accuracy === \"strict\" && state.currentFlags.ignoreCase && !state.captureMap.get(ref).ignoreCase) {\n      throw new Error(\"Use of case-insensitive backref to case-sensitive group requires target ES2025 or non-strict accuracy\");\n    }\n    return \"\\\\\" + ref;\n  },\n  /**\n  @param {CapturingGroupNode} node\n  */\n  CapturingGroup(node, state, gen) {\n    const { body, name, number } = node;\n    const data = { ignoreCase: state.currentFlags.ignoreCase };\n    const origin = state.originMap.get(node);\n    if (origin) {\n      data.hidden = true;\n      if (number > origin.number) {\n        data.transferTo = origin.number;\n      }\n    }\n    state.captureMap.set(number, data);\n    return `(${name ? `?<${name}>` : \"\"}${body.map(gen).join(\"|\")})`;\n  },\n  /**\n  @param {CharacterNode} node\n  */\n  Character({ value }, state) {\n    const char = cp(value);\n    const escaped = getCharEscape(value, {\n      escDigit: state.lastNode.type === \"Backreference\",\n      inCharClass: state.inCharClass,\n      useFlagV: state.useFlagV\n    });\n    if (escaped !== char) {\n      return escaped;\n    }\n    if (state.useAppliedIgnoreCase && state.currentFlags.ignoreCase && charHasCase(char)) {\n      const cases = getIgnoreCaseMatchChars(char);\n      return state.inCharClass ? cases.join(\"\") : cases.length > 1 ? `[${cases.join(\"\")}]` : cases[0];\n    }\n    return char;\n  },\n  /**\n  @param {CharacterClassNode} node\n  */\n  CharacterClass(node, state, gen) {\n    const { kind, negate, parent } = node;\n    let { body } = node;\n    if (kind === \"intersection\" && !state.useFlagV) {\n      throw new Error(\"Use of class intersection requires min target ES2024\");\n    }\n    if (envFlags.bugFlagVLiteralHyphenIsRange && state.useFlagV && body.some(isLiteralHyphen)) {\n      body = [createCharacter2(45), ...body.filter((kid) => !isLiteralHyphen(kid))];\n    }\n    const genClass = () => `[${negate ? \"^\" : \"\"}${body.map(gen).join(kind === \"intersection\" ? \"&&\" : \"\")}]`;\n    if (!state.inCharClass) {\n      if (\n        // Already established `kind !== 'intersection'` if `!state.useFlagV`; don't check again\n        (!state.useFlagV || envFlags.bugNestedClassIgnoresNegation) && !negate\n      ) {\n        const negatedChildClasses = body.filter(\n          (kid) => kid.type === \"CharacterClass\" && kid.kind === \"union\" && kid.negate\n        );\n        if (negatedChildClasses.length) {\n          const group = createGroup2();\n          const groupFirstAlt = group.body[0];\n          group.parent = parent;\n          groupFirstAlt.parent = group;\n          body = body.filter((kid) => !negatedChildClasses.includes(kid));\n          node.body = body;\n          if (body.length) {\n            node.parent = groupFirstAlt;\n            groupFirstAlt.body.push(node);\n          } else {\n            group.body.pop();\n          }\n          negatedChildClasses.forEach((cc) => {\n            const newAlt = createAlternative2({ body: [cc] });\n            cc.parent = newAlt;\n            newAlt.parent = group;\n            group.body.push(newAlt);\n          });\n          return gen(group);\n        }\n      }\n      state.inCharClass = true;\n      const result = genClass();\n      state.inCharClass = false;\n      return result;\n    }\n    const firstEl = body[0];\n    if (\n      // Already established that the parent is a char class via `inCharClass`; don't check again\n      kind === \"union\" && !negate && firstEl && // Allows many nested classes to work with `target` ES2018 which doesn't support nesting\n      ((!state.useFlagV || !state.verbose) && parent.kind === \"union\" && !(envFlags.bugFlagVLiteralHyphenIsRange && state.useFlagV) || !state.verbose && parent.kind === \"intersection\" && // JS doesn't allow intersection with union or ranges\n      body.length === 1 && firstEl.type !== \"CharacterClassRange\")\n    ) {\n      return body.map(gen).join(\"\");\n    }\n    if (!state.useFlagV && parent.type === \"CharacterClass\") {\n      throw new Error(\"Use of nested character class requires min target ES2024\");\n    }\n    return genClass();\n  },\n  /**\n  @param {CharacterClassRangeNode} node\n  */\n  CharacterClassRange(node, state) {\n    const min = node.min.value;\n    const max = node.max.value;\n    const escOpts = {\n      escDigit: false,\n      inCharClass: true,\n      useFlagV: state.useFlagV\n    };\n    const minStr = getCharEscape(min, escOpts);\n    const maxStr = getCharEscape(max, escOpts);\n    const extraChars = /* @__PURE__ */ new Set();\n    if (state.useAppliedIgnoreCase && state.currentFlags.ignoreCase) {\n      const charsOutsideRange = getCasesOutsideCharClassRange(node);\n      const ranges = getCodePointRangesFromChars(charsOutsideRange);\n      ranges.forEach((value) => {\n        extraChars.add(\n          Array.isArray(value) ? `${getCharEscape(value[0], escOpts)}-${getCharEscape(value[1], escOpts)}` : getCharEscape(value, escOpts)\n        );\n      });\n    }\n    return `${minStr}-${maxStr}${[...extraChars].join(\"\")}`;\n  },\n  /**\n  @param {CharacterSetNode} node\n  */\n  CharacterSet({ kind, negate, value, key }, state) {\n    if (kind === \"dot\") {\n      return state.currentFlags.dotAll ? state.appliedGlobalFlags.dotAll || state.useFlagMods ? \".\" : \"[^]\" : (\n        // Onig's only line break char is line feed, unlike JS\n        r`[^\\n]`\n      );\n    }\n    if (kind === \"digit\") {\n      return negate ? r`\\D` : r`\\d`;\n    }\n    if (kind === \"property\") {\n      if (state.useAppliedIgnoreCase && state.currentFlags.ignoreCase && UnicodePropertiesWithSpecificCase.has(value)) {\n        throw new Error(`Unicode property \"${value}\" can't be case-insensitive when other chars have specific case`);\n      }\n      return `${negate ? r`\\P` : r`\\p`}{${key ? `${key}=` : \"\"}${value}}`;\n    }\n    if (kind === \"word\") {\n      return negate ? r`\\W` : r`\\w`;\n    }\n    throw new Error(`Unexpected character set kind \"${kind}\"`);\n  },\n  /**\n  @param {FlagsNode} node\n  */\n  Flags(node, state) {\n    return (\n      // The transformer should never turn on the properties for flags d, g, m since Onig doesn't\n      // have equivs. Flag m is never used since Onig uses different line break chars than JS\n      // (node.hasIndices ? 'd' : '') +\n      // (node.global ? 'g' : '') +\n      // (node.multiline ? 'm' : '') +\n      (state.appliedGlobalFlags.ignoreCase ? \"i\" : \"\") + (node.dotAll ? \"s\" : \"\") + (node.sticky ? \"y\" : \"\")\n    );\n  },\n  /**\n  @param {GroupNode} node\n  */\n  Group({ atomic: atomic2, body, flags, parent }, state, gen) {\n    const currentFlags = state.currentFlags;\n    if (flags) {\n      state.currentFlags = getNewCurrentFlags(currentFlags, flags);\n    }\n    const contents = body.map(gen).join(\"|\");\n    const result = !state.verbose && body.length === 1 && // Single alt\n    parent.type !== \"Quantifier\" && !atomic2 && (!state.useFlagMods || !flags) ? contents : `(?${getGroupPrefix(atomic2, flags, state.useFlagMods)}${contents})`;\n    state.currentFlags = currentFlags;\n    return result;\n  },\n  /**\n  @param {LookaroundAssertionNode} node\n  */\n  LookaroundAssertion({ body, kind, negate }, _, gen) {\n    const prefix = `${kind === \"lookahead\" ? \"\" : \"<\"}${negate ? \"!\" : \"=\"}`;\n    return `(?${prefix}${body.map(gen).join(\"|\")})`;\n  },\n  /**\n  @param {QuantifierNode} node\n  */\n  Quantifier(node, _, gen) {\n    return gen(node.body) + getQuantifierStr(node);\n  },\n  /**\n  @param {SubroutineNode & {isRecursive: true}} node\n  */\n  Subroutine({ isRecursive, ref }, state) {\n    if (!isRecursive) {\n      throw new Error(\"Unexpected non-recursive subroutine in transformed AST\");\n    }\n    const limit = state.recursionLimit;\n    return ref === 0 ? `(?R=${limit})` : r`\\g<${ref}&R=${limit}>`;\n  }\n};\nvar BaseEscapeChars = /* @__PURE__ */ new Set([\n  \"$\",\n  \"(\",\n  \")\",\n  \"*\",\n  \"+\",\n  \".\",\n  \"?\",\n  \"[\",\n  \"\\\\\",\n  \"]\",\n  \"^\",\n  \"{\",\n  \"|\",\n  \"}\"\n]);\nvar CharClassEscapeChars = /* @__PURE__ */ new Set([\n  \"-\",\n  \"\\\\\",\n  \"]\",\n  \"^\",\n  // Literal `[` doesn't require escaping with flag u, but this can help work around regex source\n  // linters and regex syntax processors that expect unescaped `[` to create a nested class\n  \"[\"\n]);\nvar CharClassEscapeCharsFlagV = /* @__PURE__ */ new Set([\n  \"(\",\n  \")\",\n  \"-\",\n  \"/\",\n  \"[\",\n  \"\\\\\",\n  \"]\",\n  \"^\",\n  \"{\",\n  \"|\",\n  \"}\",\n  // Double punctuators; also includes already-listed `-` and `^`\n  \"!\",\n  \"#\",\n  \"$\",\n  \"%\",\n  \"&\",\n  \"*\",\n  \"+\",\n  \",\",\n  \".\",\n  \":\",\n  \";\",\n  \"<\",\n  \"=\",\n  \">\",\n  \"?\",\n  \"@\",\n  \"`\",\n  \"~\"\n]);\nvar CharCodeEscapeMap = /* @__PURE__ */ new Map([\n  [9, r`\\t`],\n  // horizontal tab\n  [10, r`\\n`],\n  // line feed\n  [11, r`\\v`],\n  // vertical tab\n  [12, r`\\f`],\n  // form feed\n  [13, r`\\r`],\n  // carriage return\n  [8232, r`\\u2028`],\n  // line separator\n  [8233, r`\\u2029`],\n  // paragraph separator\n  [65279, r`\\uFEFF`]\n  // ZWNBSP/BOM\n]);\nvar casedRe = /^\\p{Cased}$/u;\nfunction charHasCase(char) {\n  return casedRe.test(char);\n}\nfunction getCasesOutsideCharClassRange(node, options) {\n  const firstOnly = !!options?.firstOnly;\n  const min = node.min.value;\n  const max = node.max.value;\n  const found = [];\n  if (min < 65 && (max === 65535 || max >= 131071) || min === 65536 && max >= 131071) {\n    return found;\n  }\n  for (let i = min; i <= max; i++) {\n    const char = cp(i);\n    if (!charHasCase(char)) {\n      continue;\n    }\n    const charsOutsideRange = getIgnoreCaseMatchChars(char).filter((caseOfChar) => {\n      const num = caseOfChar.codePointAt(0);\n      return num < min || num > max;\n    });\n    if (charsOutsideRange.length) {\n      found.push(...charsOutsideRange);\n      if (firstOnly) {\n        break;\n      }\n    }\n  }\n  return found;\n}\nfunction getCharEscape(codePoint, { escDigit, inCharClass, useFlagV }) {\n  if (CharCodeEscapeMap.has(codePoint)) {\n    return CharCodeEscapeMap.get(codePoint);\n  }\n  if (\n    // Control chars, etc.; condition modeled on the Chrome developer console's display for strings\n    codePoint < 32 || codePoint > 126 && codePoint < 160 || // Unicode planes 4-16; unassigned, special purpose, and private use area\n    codePoint > 262143 || // Avoid corrupting a preceding backref by immediately following it with a literal digit\n    escDigit && isDigitCharCode(codePoint)\n  ) {\n    return codePoint > 255 ? `\\\\u{${codePoint.toString(16).toUpperCase()}}` : `\\\\x${codePoint.toString(16).toUpperCase().padStart(2, \"0\")}`;\n  }\n  const escapeChars = inCharClass ? useFlagV ? CharClassEscapeCharsFlagV : CharClassEscapeChars : BaseEscapeChars;\n  const char = cp(codePoint);\n  return (escapeChars.has(char) ? \"\\\\\" : \"\") + char;\n}\nfunction getCodePointRangesFromChars(chars) {\n  const codePoints = chars.map((char) => char.codePointAt(0)).sort((a, b) => a - b);\n  const values = [];\n  let start = null;\n  for (let i = 0; i < codePoints.length; i++) {\n    if (codePoints[i + 1] === codePoints[i] + 1) {\n      start ??= codePoints[i];\n    } else if (start === null) {\n      values.push(codePoints[i]);\n    } else {\n      values.push([start, codePoints[i]]);\n      start = null;\n    }\n  }\n  return values;\n}\nfunction getGroupPrefix(atomic2, flagMods, useFlagMods) {\n  if (atomic2) {\n    return \">\";\n  }\n  let mods = \"\";\n  if (flagMods && useFlagMods) {\n    const { enable, disable } = flagMods;\n    mods = (enable?.ignoreCase ? \"i\" : \"\") + (enable?.dotAll ? \"s\" : \"\") + (disable ? \"-\" : \"\") + (disable?.ignoreCase ? \"i\" : \"\") + (disable?.dotAll ? \"s\" : \"\");\n  }\n  return `${mods}:`;\n}\nfunction getQuantifierStr({ kind, max, min }) {\n  let base;\n  if (!min && max === 1) {\n    base = \"?\";\n  } else if (!min && max === Infinity) {\n    base = \"*\";\n  } else if (min === 1 && max === Infinity) {\n    base = \"+\";\n  } else if (min === max) {\n    base = `{${min}}`;\n  } else {\n    base = `{${min},${max === Infinity ? \"\" : max}}`;\n  }\n  return base + {\n    greedy: \"\",\n    lazy: \"?\",\n    possessive: \"+\"\n  }[kind];\n}\nfunction isAnyGroup({ type }) {\n  return type === \"CapturingGroup\" || type === \"Group\" || type === \"LookaroundAssertion\";\n}\nfunction isDigitCharCode(value) {\n  return value > 47 && value < 58;\n}\nfunction isLiteralHyphen({ type, value }) {\n  return type === \"Character\" && value === 45;\n}\n\n// src/subclass.js\nvar EmulatedRegExp = class _EmulatedRegExp extends RegExp {\n  /**\n  @type {Map<number, {\n    hidden?: true;\n    transferTo?: number;\n  }>}\n  */\n  #captureMap = /* @__PURE__ */ new Map();\n  /**\n  @type {RegExp | EmulatedRegExp | null}\n  */\n  #compiled = null;\n  /**\n  @type {string}\n  */\n  #pattern;\n  /**\n  @type {Map<number, string>?}\n  */\n  #nameMap = null;\n  /**\n  @type {string?}\n  */\n  #strategy = null;\n  /**\n  Can be used to serialize the instance.\n  @type {EmulatedRegExpOptions}\n  */\n  rawOptions = {};\n  // Override the getter with one that works with lazy-compiled regexes\n  get source() {\n    return this.#pattern || \"(?:)\";\n  }\n  /**\n  @overload\n  @param {string} pattern\n  @param {string} [flags]\n  @param {EmulatedRegExpOptions} [options]\n  */\n  /**\n  @overload\n  @param {EmulatedRegExp} pattern\n  @param {string} [flags]\n  */\n  constructor(pattern, flags, options) {\n    const lazyCompile = !!options?.lazyCompile;\n    if (pattern instanceof RegExp) {\n      if (options) {\n        throw new Error(\"Cannot provide options when copying a regexp\");\n      }\n      const re = pattern;\n      super(re, flags);\n      this.#pattern = re.source;\n      if (re instanceof _EmulatedRegExp) {\n        this.#captureMap = re.#captureMap;\n        this.#nameMap = re.#nameMap;\n        this.#strategy = re.#strategy;\n        this.rawOptions = re.rawOptions;\n      }\n    } else {\n      const opts = {\n        hiddenCaptures: [],\n        strategy: null,\n        transfers: [],\n        ...options\n      };\n      super(lazyCompile ? \"\" : pattern, flags);\n      this.#pattern = pattern;\n      this.#captureMap = createCaptureMap(opts.hiddenCaptures, opts.transfers);\n      this.#strategy = opts.strategy;\n      this.rawOptions = options ?? {};\n    }\n    if (!lazyCompile) {\n      this.#compiled = this;\n    }\n  }\n  /**\n  Called internally by all String/RegExp methods that use regexes.\n  @override\n  @param {string} str\n  @returns {RegExpExecArray?}\n  */\n  exec(str) {\n    if (!this.#compiled) {\n      const { lazyCompile, ...rest } = this.rawOptions;\n      this.#compiled = new _EmulatedRegExp(this.#pattern, this.flags, rest);\n    }\n    const useLastIndex = this.global || this.sticky;\n    const pos = this.lastIndex;\n    if (this.#strategy === \"clip_search\" && useLastIndex && pos) {\n      this.lastIndex = 0;\n      const match = this.#execCore(str.slice(pos));\n      if (match) {\n        adjustMatchDetailsForOffset(match, pos, str, this.hasIndices);\n        this.lastIndex += pos;\n      }\n      return match;\n    }\n    return this.#execCore(str);\n  }\n  /**\n  Adds support for hidden and transfer captures.\n  @param {string} str\n  @returns\n  */\n  #execCore(str) {\n    this.#compiled.lastIndex = this.lastIndex;\n    const match = super.exec.call(this.#compiled, str);\n    this.lastIndex = this.#compiled.lastIndex;\n    if (!match || !this.#captureMap.size) {\n      return match;\n    }\n    const matchCopy = [...match];\n    match.length = 1;\n    let indicesCopy;\n    if (this.hasIndices) {\n      indicesCopy = [...match.indices];\n      match.indices.length = 1;\n    }\n    const mappedNums = [0];\n    for (let i = 1; i < matchCopy.length; i++) {\n      const { hidden, transferTo } = this.#captureMap.get(i) ?? {};\n      if (hidden) {\n        mappedNums.push(null);\n      } else {\n        mappedNums.push(match.length);\n        match.push(matchCopy[i]);\n        if (this.hasIndices) {\n          match.indices.push(indicesCopy[i]);\n        }\n      }\n      if (transferTo && matchCopy[i] !== void 0) {\n        const to = mappedNums[transferTo];\n        if (!to) {\n          throw new Error(`Invalid capture transfer to \"${to}\"`);\n        }\n        match[to] = matchCopy[i];\n        if (this.hasIndices) {\n          match.indices[to] = indicesCopy[i];\n        }\n        if (match.groups) {\n          if (!this.#nameMap) {\n            this.#nameMap = createNameMap(this.source);\n          }\n          const name = this.#nameMap.get(transferTo);\n          if (name) {\n            match.groups[name] = matchCopy[i];\n            if (this.hasIndices) {\n              match.indices.groups[name] = indicesCopy[i];\n            }\n          }\n        }\n      }\n    }\n    return match;\n  }\n};\nfunction adjustMatchDetailsForOffset(match, offset, input, hasIndices) {\n  match.index += offset;\n  match.input = input;\n  if (hasIndices) {\n    const indices = match.indices;\n    for (let i = 0; i < indices.length; i++) {\n      const arr = indices[i];\n      if (arr) {\n        indices[i] = [arr[0] + offset, arr[1] + offset];\n      }\n    }\n    const groupIndices = indices.groups;\n    if (groupIndices) {\n      Object.keys(groupIndices).forEach((key) => {\n        const arr = groupIndices[key];\n        if (arr) {\n          groupIndices[key] = [arr[0] + offset, arr[1] + offset];\n        }\n      });\n    }\n  }\n}\nfunction createCaptureMap(hiddenCaptures, transfers) {\n  const captureMap = /* @__PURE__ */ new Map();\n  for (const num of hiddenCaptures) {\n    captureMap.set(num, {\n      hidden: true\n    });\n  }\n  for (const [to, from] of transfers) {\n    for (const num of from) {\n      getOrInsert(captureMap, num, {}).transferTo = to;\n    }\n  }\n  return captureMap;\n}\nfunction createNameMap(pattern) {\n  const re = /(?<capture>\\((?:\\?<(?![=!])(?<name>[^>]+)>|(?!\\?)))|\\\\?./gsu;\n  const map = /* @__PURE__ */ new Map();\n  let numCharClassesOpen = 0;\n  let numCaptures = 0;\n  let match;\n  while (match = re.exec(pattern)) {\n    const { 0: m, groups: { capture, name } } = match;\n    if (m === \"[\") {\n      numCharClassesOpen++;\n    } else if (!numCharClassesOpen) {\n      if (capture) {\n        numCaptures++;\n        if (name) {\n          map.set(numCaptures, name);\n        }\n      }\n    } else if (m === \"]\") {\n      numCharClassesOpen--;\n    }\n  }\n  return map;\n}\n\n// src/index.js\nimport { parse as parse2 } from \"oniguruma-parser/parser\";\nimport { atomic, possessive } from \"regex/internals\";\nimport { recursion } from \"regex-recursion\";\nfunction toRegExp(pattern, options) {\n  const d = toRegExpDetails(pattern, options);\n  if (d.options) {\n    return new EmulatedRegExp(d.pattern, d.flags, d.options);\n  }\n  return new RegExp(d.pattern, d.flags);\n}\nfunction toRegExpDetails(pattern, options) {\n  const opts = getOptions(options);\n  const onigurumaAst = parse2(pattern, {\n    flags: opts.flags,\n    normalizeUnknownPropertyNames: true,\n    rules: {\n      captureGroup: opts.rules.captureGroup,\n      singleline: opts.rules.singleline\n    },\n    skipBackrefValidation: opts.rules.allowOrphanBackrefs,\n    unicodePropertyMap: JsUnicodePropertyMap\n  });\n  const regexPlusAst = transform(onigurumaAst, {\n    accuracy: opts.accuracy,\n    asciiWordBoundaries: opts.rules.asciiWordBoundaries,\n    avoidSubclass: opts.avoidSubclass,\n    bestEffortTarget: opts.target\n  });\n  const generated = generate(regexPlusAst, opts);\n  const recursionResult = recursion(generated.pattern, {\n    captureTransfers: generated._captureTransfers,\n    hiddenCaptures: generated._hiddenCaptures,\n    mode: \"external\"\n  });\n  const possessiveResult = possessive(recursionResult.pattern);\n  const atomicResult = atomic(possessiveResult.pattern, {\n    captureTransfers: recursionResult.captureTransfers,\n    hiddenCaptures: recursionResult.hiddenCaptures\n  });\n  const details = {\n    pattern: atomicResult.pattern,\n    flags: `${opts.hasIndices ? \"d\" : \"\"}${opts.global ? \"g\" : \"\"}${generated.flags}${generated.options.disable.v ? \"u\" : \"v\"}`\n  };\n  if (opts.avoidSubclass) {\n    if (opts.lazyCompileLength !== Infinity) {\n      throw new Error(\"Lazy compilation requires subclass\");\n    }\n  } else {\n    const hiddenCaptures = atomicResult.hiddenCaptures.sort((a, b) => a - b);\n    const transfers = Array.from(atomicResult.captureTransfers);\n    const strategy = regexPlusAst._strategy;\n    const lazyCompile = details.pattern.length >= opts.lazyCompileLength;\n    if (hiddenCaptures.length || transfers.length || strategy || lazyCompile) {\n      details.options = {\n        ...hiddenCaptures.length && { hiddenCaptures },\n        ...transfers.length && { transfers },\n        ...strategy && { strategy },\n        ...lazyCompile && { lazyCompile }\n      };\n    }\n  }\n  return details;\n}\nexport {\n  EmulatedRegExp,\n  toRegExp,\n  toRegExpDetails\n};\n//# sourceMappingURL=index.js.map\n","const MAX = 4294967295;\nclass JavaScriptScanner {\n  constructor(patterns, options = {}) {\n    this.patterns = patterns;\n    this.options = options;\n    const {\n      forgiving = false,\n      cache,\n      regexConstructor\n    } = options;\n    if (!regexConstructor) {\n      throw new Error(\"Option `regexConstructor` is not provided\");\n    }\n    this.regexps = patterns.map((p) => {\n      if (typeof p !== \"string\") {\n        return p;\n      }\n      const cached = cache?.get(p);\n      if (cached) {\n        if (cached instanceof RegExp) {\n          return cached;\n        }\n        if (forgiving)\n          return null;\n        throw cached;\n      }\n      try {\n        const regex = regexConstructor(p);\n        cache?.set(p, regex);\n        return regex;\n      } catch (e) {\n        cache?.set(p, e);\n        if (forgiving)\n          return null;\n        throw e;\n      }\n    });\n  }\n  regexps;\n  findNextMatchSync(string, startPosition, _options) {\n    const str = typeof string === \"string\" ? string : string.content;\n    const pending = [];\n    function toResult(index, match, offset = 0) {\n      return {\n        index,\n        captureIndices: match.indices.map((indice) => {\n          if (indice == null) {\n            return {\n              start: MAX,\n              end: MAX,\n              length: 0\n            };\n          }\n          return {\n            start: indice[0] + offset,\n            end: indice[1] + offset,\n            length: indice[1] - indice[0]\n          };\n        })\n      };\n    }\n    for (let i = 0; i < this.regexps.length; i++) {\n      const regexp = this.regexps[i];\n      if (!regexp)\n        continue;\n      try {\n        regexp.lastIndex = startPosition;\n        const match = regexp.exec(str);\n        if (!match)\n          continue;\n        if (match.index === startPosition) {\n          return toResult(i, match, 0);\n        }\n        pending.push([i, match, 0]);\n      } catch (e) {\n        if (this.options.forgiving)\n          continue;\n        throw e;\n      }\n    }\n    if (pending.length) {\n      const minIndex = Math.min(...pending.map((m) => m[1].index));\n      for (const [i, match, offset] of pending) {\n        if (match.index === minIndex) {\n          return toResult(i, match, offset);\n        }\n      }\n    }\n    return null;\n  }\n}\n\nexport { JavaScriptScanner as J };\n","import { toRegExp } from 'oniguruma-to-es';\nimport { J as JavaScriptScanner } from './shared/engine-javascript.hzpS1_41.mjs';\n\nfunction defaultJavaScriptRegexConstructor(pattern, options) {\n  return toRegExp(\n    pattern,\n    {\n      global: true,\n      hasIndices: true,\n      // This has no benefit for the standard JS engine, but it avoids a perf penalty for\n      // precompiled grammars when constructing extremely long patterns that aren't always used\n      lazyCompileLength: 3e3,\n      rules: {\n        // Needed since TextMate grammars merge backrefs across patterns\n        allowOrphanBackrefs: true,\n        // Improves search performance for generated regexes\n        asciiWordBoundaries: true,\n        // Follow `vscode-oniguruma` which enables this Oniguruma option by default\n        captureGroup: true,\n        // Oniguruma uses depth limit `20`; lowered here to keep regexes shorter and maybe\n        // sometimes faster, but can be increased if issues reported due to low limit\n        recursionLimit: 5,\n        // Oniguruma option for `^`->`\\A`, `$`->`\\Z`; improves search performance without any\n        // change in meaning since TM grammars search line by line\n        singleline: true\n      },\n      ...options\n    }\n  );\n}\nfunction createJavaScriptRegexEngine(options = {}) {\n  const _options = Object.assign(\n    {\n      target: \"auto\",\n      cache: /* @__PURE__ */ new Map()\n    },\n    options\n  );\n  _options.regexConstructor ||= (pattern) => defaultJavaScriptRegexConstructor(pattern, { target: _options.target });\n  return {\n    createScanner(patterns) {\n      return new JavaScriptScanner(patterns, _options);\n    },\n    createString(s) {\n      return {\n        content: s\n      };\n    }\n  };\n}\n\nexport { createJavaScriptRegexEngine, defaultJavaScriptRegexConstructor };\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","const bundledLanguagesInfo = [\n  {\n    \"id\": \"abap\",\n    \"name\": \"ABAP\",\n    \"import\": () => import('@shikijs/langs/abap')\n  },\n  {\n    \"id\": \"actionscript-3\",\n    \"name\": \"ActionScript\",\n    \"import\": () => import('@shikijs/langs/actionscript-3')\n  },\n  {\n    \"id\": \"ada\",\n    \"name\": \"Ada\",\n    \"import\": () => import('@shikijs/langs/ada')\n  },\n  {\n    \"id\": \"angular-html\",\n    \"name\": \"Angular HTML\",\n    \"import\": () => import('@shikijs/langs/angular-html')\n  },\n  {\n    \"id\": \"angular-ts\",\n    \"name\": \"Angular TypeScript\",\n    \"import\": () => import('@shikijs/langs/angular-ts')\n  },\n  {\n    \"id\": \"apache\",\n    \"name\": \"Apache Conf\",\n    \"import\": () => import('@shikijs/langs/apache')\n  },\n  {\n    \"id\": \"apex\",\n    \"name\": \"Apex\",\n    \"import\": () => import('@shikijs/langs/apex')\n  },\n  {\n    \"id\": \"apl\",\n    \"name\": \"APL\",\n    \"import\": () => import('@shikijs/langs/apl')\n  },\n  {\n    \"id\": \"applescript\",\n    \"name\": \"AppleScript\",\n    \"import\": () => import('@shikijs/langs/applescript')\n  },\n  {\n    \"id\": \"ara\",\n    \"name\": \"Ara\",\n    \"import\": () => import('@shikijs/langs/ara')\n  },\n  {\n    \"id\": \"asciidoc\",\n    \"name\": \"AsciiDoc\",\n    \"aliases\": [\n      \"adoc\"\n    ],\n    \"import\": () => import('@shikijs/langs/asciidoc')\n  },\n  {\n    \"id\": \"asm\",\n    \"name\": \"Assembly\",\n    \"import\": () => import('@shikijs/langs/asm')\n  },\n  {\n    \"id\": \"astro\",\n    \"name\": \"Astro\",\n    \"import\": () => import('@shikijs/langs/astro')\n  },\n  {\n    \"id\": \"awk\",\n    \"name\": \"AWK\",\n    \"import\": () => import('@shikijs/langs/awk')\n  },\n  {\n    \"id\": \"ballerina\",\n    \"name\": \"Ballerina\",\n    \"import\": () => import('@shikijs/langs/ballerina')\n  },\n  {\n    \"id\": \"bat\",\n    \"name\": \"Batch File\",\n    \"aliases\": [\n      \"batch\"\n    ],\n    \"import\": () => import('@shikijs/langs/bat')\n  },\n  {\n    \"id\": \"beancount\",\n    \"name\": \"Beancount\",\n    \"import\": () => import('@shikijs/langs/beancount')\n  },\n  {\n    \"id\": \"berry\",\n    \"name\": \"Berry\",\n    \"aliases\": [\n      \"be\"\n    ],\n    \"import\": () => import('@shikijs/langs/berry')\n  },\n  {\n    \"id\": \"bibtex\",\n    \"name\": \"BibTeX\",\n    \"import\": () => import('@shikijs/langs/bibtex')\n  },\n  {\n    \"id\": \"bicep\",\n    \"name\": \"Bicep\",\n    \"import\": () => import('@shikijs/langs/bicep')\n  },\n  {\n    \"id\": \"blade\",\n    \"name\": \"Blade\",\n    \"import\": () => import('@shikijs/langs/blade')\n  },\n  {\n    \"id\": \"bsl\",\n    \"name\": \"1C (Enterprise)\",\n    \"aliases\": [\n      \"1c\"\n    ],\n    \"import\": () => import('@shikijs/langs/bsl')\n  },\n  {\n    \"id\": \"c\",\n    \"name\": \"C\",\n    \"import\": () => import('@shikijs/langs/c')\n  },\n  {\n    \"id\": \"cadence\",\n    \"name\": \"Cadence\",\n    \"aliases\": [\n      \"cdc\"\n    ],\n    \"import\": () => import('@shikijs/langs/cadence')\n  },\n  {\n    \"id\": \"cairo\",\n    \"name\": \"Cairo\",\n    \"import\": () => import('@shikijs/langs/cairo')\n  },\n  {\n    \"id\": \"clarity\",\n    \"name\": \"Clarity\",\n    \"import\": () => import('@shikijs/langs/clarity')\n  },\n  {\n    \"id\": \"clojure\",\n    \"name\": \"Clojure\",\n    \"aliases\": [\n      \"clj\"\n    ],\n    \"import\": () => import('@shikijs/langs/clojure')\n  },\n  {\n    \"id\": \"cmake\",\n    \"name\": \"CMake\",\n    \"import\": () => import('@shikijs/langs/cmake')\n  },\n  {\n    \"id\": \"cobol\",\n    \"name\": \"COBOL\",\n    \"import\": () => import('@shikijs/langs/cobol')\n  },\n  {\n    \"id\": \"codeowners\",\n    \"name\": \"CODEOWNERS\",\n    \"import\": () => import('@shikijs/langs/codeowners')\n  },\n  {\n    \"id\": \"codeql\",\n    \"name\": \"CodeQL\",\n    \"aliases\": [\n      \"ql\"\n    ],\n    \"import\": () => import('@shikijs/langs/codeql')\n  },\n  {\n    \"id\": \"coffee\",\n    \"name\": \"CoffeeScript\",\n    \"aliases\": [\n      \"coffeescript\"\n    ],\n    \"import\": () => import('@shikijs/langs/coffee')\n  },\n  {\n    \"id\": \"common-lisp\",\n    \"name\": \"Common Lisp\",\n    \"aliases\": [\n      \"lisp\"\n    ],\n    \"import\": () => import('@shikijs/langs/common-lisp')\n  },\n  {\n    \"id\": \"coq\",\n    \"name\": \"Coq\",\n    \"import\": () => import('@shikijs/langs/coq')\n  },\n  {\n    \"id\": \"cpp\",\n    \"name\": \"C++\",\n    \"aliases\": [\n      \"c++\"\n    ],\n    \"import\": () => import('@shikijs/langs/cpp')\n  },\n  {\n    \"id\": \"crystal\",\n    \"name\": \"Crystal\",\n    \"import\": () => import('@shikijs/langs/crystal')\n  },\n  {\n    \"id\": \"csharp\",\n    \"name\": \"C#\",\n    \"aliases\": [\n      \"c#\",\n      \"cs\"\n    ],\n    \"import\": () => import('@shikijs/langs/csharp')\n  },\n  {\n    \"id\": \"css\",\n    \"name\": \"CSS\",\n    \"import\": () => import('@shikijs/langs/css')\n  },\n  {\n    \"id\": \"csv\",\n    \"name\": \"CSV\",\n    \"import\": () => import('@shikijs/langs/csv')\n  },\n  {\n    \"id\": \"cue\",\n    \"name\": \"CUE\",\n    \"import\": () => import('@shikijs/langs/cue')\n  },\n  {\n    \"id\": \"cypher\",\n    \"name\": \"Cypher\",\n    \"aliases\": [\n      \"cql\"\n    ],\n    \"import\": () => import('@shikijs/langs/cypher')\n  },\n  {\n    \"id\": \"d\",\n    \"name\": \"D\",\n    \"import\": () => import('@shikijs/langs/d')\n  },\n  {\n    \"id\": \"dart\",\n    \"name\": \"Dart\",\n    \"import\": () => import('@shikijs/langs/dart')\n  },\n  {\n    \"id\": \"dax\",\n    \"name\": \"DAX\",\n    \"import\": () => import('@shikijs/langs/dax')\n  },\n  {\n    \"id\": \"desktop\",\n    \"name\": \"Desktop\",\n    \"import\": () => import('@shikijs/langs/desktop')\n  },\n  {\n    \"id\": \"diff\",\n    \"name\": \"Diff\",\n    \"import\": () => import('@shikijs/langs/diff')\n  },\n  {\n    \"id\": \"docker\",\n    \"name\": \"Dockerfile\",\n    \"aliases\": [\n      \"dockerfile\"\n    ],\n    \"import\": () => import('@shikijs/langs/docker')\n  },\n  {\n    \"id\": \"dotenv\",\n    \"name\": \"dotEnv\",\n    \"import\": () => import('@shikijs/langs/dotenv')\n  },\n  {\n    \"id\": \"dream-maker\",\n    \"name\": \"Dream Maker\",\n    \"import\": () => import('@shikijs/langs/dream-maker')\n  },\n  {\n    \"id\": \"edge\",\n    \"name\": \"Edge\",\n    \"import\": () => import('@shikijs/langs/edge')\n  },\n  {\n    \"id\": \"elixir\",\n    \"name\": \"Elixir\",\n    \"import\": () => import('@shikijs/langs/elixir')\n  },\n  {\n    \"id\": \"elm\",\n    \"name\": \"Elm\",\n    \"import\": () => import('@shikijs/langs/elm')\n  },\n  {\n    \"id\": \"emacs-lisp\",\n    \"name\": \"Emacs Lisp\",\n    \"aliases\": [\n      \"elisp\"\n    ],\n    \"import\": () => import('@shikijs/langs/emacs-lisp')\n  },\n  {\n    \"id\": \"erb\",\n    \"name\": \"ERB\",\n    \"import\": () => import('@shikijs/langs/erb')\n  },\n  {\n    \"id\": \"erlang\",\n    \"name\": \"Erlang\",\n    \"aliases\": [\n      \"erl\"\n    ],\n    \"import\": () => import('@shikijs/langs/erlang')\n  },\n  {\n    \"id\": \"fennel\",\n    \"name\": \"Fennel\",\n    \"import\": () => import('@shikijs/langs/fennel')\n  },\n  {\n    \"id\": \"fish\",\n    \"name\": \"Fish\",\n    \"import\": () => import('@shikijs/langs/fish')\n  },\n  {\n    \"id\": \"fluent\",\n    \"name\": \"Fluent\",\n    \"aliases\": [\n      \"ftl\"\n    ],\n    \"import\": () => import('@shikijs/langs/fluent')\n  },\n  {\n    \"id\": \"fortran-fixed-form\",\n    \"name\": \"Fortran (Fixed Form)\",\n    \"aliases\": [\n      \"f\",\n      \"for\",\n      \"f77\"\n    ],\n    \"import\": () => import('@shikijs/langs/fortran-fixed-form')\n  },\n  {\n    \"id\": \"fortran-free-form\",\n    \"name\": \"Fortran (Free Form)\",\n    \"aliases\": [\n      \"f90\",\n      \"f95\",\n      \"f03\",\n      \"f08\",\n      \"f18\"\n    ],\n    \"import\": () => import('@shikijs/langs/fortran-free-form')\n  },\n  {\n    \"id\": \"fsharp\",\n    \"name\": \"F#\",\n    \"aliases\": [\n      \"f#\",\n      \"fs\"\n    ],\n    \"import\": () => import('@shikijs/langs/fsharp')\n  },\n  {\n    \"id\": \"gdresource\",\n    \"name\": \"GDResource\",\n    \"import\": () => import('@shikijs/langs/gdresource')\n  },\n  {\n    \"id\": \"gdscript\",\n    \"name\": \"GDScript\",\n    \"import\": () => import('@shikijs/langs/gdscript')\n  },\n  {\n    \"id\": \"gdshader\",\n    \"name\": \"GDShader\",\n    \"import\": () => import('@shikijs/langs/gdshader')\n  },\n  {\n    \"id\": \"genie\",\n    \"name\": \"Genie\",\n    \"import\": () => import('@shikijs/langs/genie')\n  },\n  {\n    \"id\": \"gherkin\",\n    \"name\": \"Gherkin\",\n    \"import\": () => import('@shikijs/langs/gherkin')\n  },\n  {\n    \"id\": \"git-commit\",\n    \"name\": \"Git Commit Message\",\n    \"import\": () => import('@shikijs/langs/git-commit')\n  },\n  {\n    \"id\": \"git-rebase\",\n    \"name\": \"Git Rebase Message\",\n    \"import\": () => import('@shikijs/langs/git-rebase')\n  },\n  {\n    \"id\": \"gleam\",\n    \"name\": \"Gleam\",\n    \"import\": () => import('@shikijs/langs/gleam')\n  },\n  {\n    \"id\": \"glimmer-js\",\n    \"name\": \"Glimmer JS\",\n    \"aliases\": [\n      \"gjs\"\n    ],\n    \"import\": () => import('@shikijs/langs/glimmer-js')\n  },\n  {\n    \"id\": \"glimmer-ts\",\n    \"name\": \"Glimmer TS\",\n    \"aliases\": [\n      \"gts\"\n    ],\n    \"import\": () => import('@shikijs/langs/glimmer-ts')\n  },\n  {\n    \"id\": \"glsl\",\n    \"name\": \"GLSL\",\n    \"import\": () => import('@shikijs/langs/glsl')\n  },\n  {\n    \"id\": \"gnuplot\",\n    \"name\": \"Gnuplot\",\n    \"import\": () => import('@shikijs/langs/gnuplot')\n  },\n  {\n    \"id\": \"go\",\n    \"name\": \"Go\",\n    \"import\": () => import('@shikijs/langs/go')\n  },\n  {\n    \"id\": \"graphql\",\n    \"name\": \"GraphQL\",\n    \"aliases\": [\n      \"gql\"\n    ],\n    \"import\": () => import('@shikijs/langs/graphql')\n  },\n  {\n    \"id\": \"groovy\",\n    \"name\": \"Groovy\",\n    \"import\": () => import('@shikijs/langs/groovy')\n  },\n  {\n    \"id\": \"hack\",\n    \"name\": \"Hack\",\n    \"import\": () => import('@shikijs/langs/hack')\n  },\n  {\n    \"id\": \"haml\",\n    \"name\": \"Ruby Haml\",\n    \"import\": () => import('@shikijs/langs/haml')\n  },\n  {\n    \"id\": \"handlebars\",\n    \"name\": \"Handlebars\",\n    \"aliases\": [\n      \"hbs\"\n    ],\n    \"import\": () => import('@shikijs/langs/handlebars')\n  },\n  {\n    \"id\": \"haskell\",\n    \"name\": \"Haskell\",\n    \"aliases\": [\n      \"hs\"\n    ],\n    \"import\": () => import('@shikijs/langs/haskell')\n  },\n  {\n    \"id\": \"haxe\",\n    \"name\": \"Haxe\",\n    \"import\": () => import('@shikijs/langs/haxe')\n  },\n  {\n    \"id\": \"hcl\",\n    \"name\": \"HashiCorp HCL\",\n    \"import\": () => import('@shikijs/langs/hcl')\n  },\n  {\n    \"id\": \"hjson\",\n    \"name\": \"Hjson\",\n    \"import\": () => import('@shikijs/langs/hjson')\n  },\n  {\n    \"id\": \"hlsl\",\n    \"name\": \"HLSL\",\n    \"import\": () => import('@shikijs/langs/hlsl')\n  },\n  {\n    \"id\": \"html\",\n    \"name\": \"HTML\",\n    \"import\": () => import('@shikijs/langs/html')\n  },\n  {\n    \"id\": \"html-derivative\",\n    \"name\": \"HTML (Derivative)\",\n    \"import\": () => import('@shikijs/langs/html-derivative')\n  },\n  {\n    \"id\": \"http\",\n    \"name\": \"HTTP\",\n    \"import\": () => import('@shikijs/langs/http')\n  },\n  {\n    \"id\": \"hxml\",\n    \"name\": \"HXML\",\n    \"import\": () => import('@shikijs/langs/hxml')\n  },\n  {\n    \"id\": \"hy\",\n    \"name\": \"Hy\",\n    \"import\": () => import('@shikijs/langs/hy')\n  },\n  {\n    \"id\": \"imba\",\n    \"name\": \"Imba\",\n    \"import\": () => import('@shikijs/langs/imba')\n  },\n  {\n    \"id\": \"ini\",\n    \"name\": \"INI\",\n    \"aliases\": [\n      \"properties\"\n    ],\n    \"import\": () => import('@shikijs/langs/ini')\n  },\n  {\n    \"id\": \"java\",\n    \"name\": \"Java\",\n    \"import\": () => import('@shikijs/langs/java')\n  },\n  {\n    \"id\": \"javascript\",\n    \"name\": \"JavaScript\",\n    \"aliases\": [\n      \"js\"\n    ],\n    \"import\": () => import('@shikijs/langs/javascript')\n  },\n  {\n    \"id\": \"jinja\",\n    \"name\": \"Jinja\",\n    \"import\": () => import('@shikijs/langs/jinja')\n  },\n  {\n    \"id\": \"jison\",\n    \"name\": \"Jison\",\n    \"import\": () => import('@shikijs/langs/jison')\n  },\n  {\n    \"id\": \"json\",\n    \"name\": \"JSON\",\n    \"import\": () => import('@shikijs/langs/json')\n  },\n  {\n    \"id\": \"json5\",\n    \"name\": \"JSON5\",\n    \"import\": () => import('@shikijs/langs/json5')\n  },\n  {\n    \"id\": \"jsonc\",\n    \"name\": \"JSON with Comments\",\n    \"import\": () => import('@shikijs/langs/jsonc')\n  },\n  {\n    \"id\": \"jsonl\",\n    \"name\": \"JSON Lines\",\n    \"import\": () => import('@shikijs/langs/jsonl')\n  },\n  {\n    \"id\": \"jsonnet\",\n    \"name\": \"Jsonnet\",\n    \"import\": () => import('@shikijs/langs/jsonnet')\n  },\n  {\n    \"id\": \"jssm\",\n    \"name\": \"JSSM\",\n    \"aliases\": [\n      \"fsl\"\n    ],\n    \"import\": () => import('@shikijs/langs/jssm')\n  },\n  {\n    \"id\": \"jsx\",\n    \"name\": \"JSX\",\n    \"import\": () => import('@shikijs/langs/jsx')\n  },\n  {\n    \"id\": \"julia\",\n    \"name\": \"Julia\",\n    \"aliases\": [\n      \"jl\"\n    ],\n    \"import\": () => import('@shikijs/langs/julia')\n  },\n  {\n    \"id\": \"kotlin\",\n    \"name\": \"Kotlin\",\n    \"aliases\": [\n      \"kt\",\n      \"kts\"\n    ],\n    \"import\": () => import('@shikijs/langs/kotlin')\n  },\n  {\n    \"id\": \"kusto\",\n    \"name\": \"Kusto\",\n    \"aliases\": [\n      \"kql\"\n    ],\n    \"import\": () => import('@shikijs/langs/kusto')\n  },\n  {\n    \"id\": \"latex\",\n    \"name\": \"LaTeX\",\n    \"import\": () => import('@shikijs/langs/latex')\n  },\n  {\n    \"id\": \"lean\",\n    \"name\": \"Lean 4\",\n    \"aliases\": [\n      \"lean4\"\n    ],\n    \"import\": () => import('@shikijs/langs/lean')\n  },\n  {\n    \"id\": \"less\",\n    \"name\": \"Less\",\n    \"import\": () => import('@shikijs/langs/less')\n  },\n  {\n    \"id\": \"liquid\",\n    \"name\": \"Liquid\",\n    \"import\": () => import('@shikijs/langs/liquid')\n  },\n  {\n    \"id\": \"llvm\",\n    \"name\": \"LLVM IR\",\n    \"import\": () => import('@shikijs/langs/llvm')\n  },\n  {\n    \"id\": \"log\",\n    \"name\": \"Log file\",\n    \"import\": () => import('@shikijs/langs/log')\n  },\n  {\n    \"id\": \"logo\",\n    \"name\": \"Logo\",\n    \"import\": () => import('@shikijs/langs/logo')\n  },\n  {\n    \"id\": \"lua\",\n    \"name\": \"Lua\",\n    \"import\": () => import('@shikijs/langs/lua')\n  },\n  {\n    \"id\": \"luau\",\n    \"name\": \"Luau\",\n    \"import\": () => import('@shikijs/langs/luau')\n  },\n  {\n    \"id\": \"make\",\n    \"name\": \"Makefile\",\n    \"aliases\": [\n      \"makefile\"\n    ],\n    \"import\": () => import('@shikijs/langs/make')\n  },\n  {\n    \"id\": \"markdown\",\n    \"name\": \"Markdown\",\n    \"aliases\": [\n      \"md\"\n    ],\n    \"import\": () => import('@shikijs/langs/markdown')\n  },\n  {\n    \"id\": \"marko\",\n    \"name\": \"Marko\",\n    \"import\": () => import('@shikijs/langs/marko')\n  },\n  {\n    \"id\": \"matlab\",\n    \"name\": \"MATLAB\",\n    \"import\": () => import('@shikijs/langs/matlab')\n  },\n  {\n    \"id\": \"mdc\",\n    \"name\": \"MDC\",\n    \"import\": () => import('@shikijs/langs/mdc')\n  },\n  {\n    \"id\": \"mdx\",\n    \"name\": \"MDX\",\n    \"import\": () => import('@shikijs/langs/mdx')\n  },\n  {\n    \"id\": \"mermaid\",\n    \"name\": \"Mermaid\",\n    \"aliases\": [\n      \"mmd\"\n    ],\n    \"import\": () => import('@shikijs/langs/mermaid')\n  },\n  {\n    \"id\": \"mipsasm\",\n    \"name\": \"MIPS Assembly\",\n    \"aliases\": [\n      \"mips\"\n    ],\n    \"import\": () => import('@shikijs/langs/mipsasm')\n  },\n  {\n    \"id\": \"mojo\",\n    \"name\": \"Mojo\",\n    \"import\": () => import('@shikijs/langs/mojo')\n  },\n  {\n    \"id\": \"move\",\n    \"name\": \"Move\",\n    \"import\": () => import('@shikijs/langs/move')\n  },\n  {\n    \"id\": \"narrat\",\n    \"name\": \"Narrat Language\",\n    \"aliases\": [\n      \"nar\"\n    ],\n    \"import\": () => import('@shikijs/langs/narrat')\n  },\n  {\n    \"id\": \"nextflow\",\n    \"name\": \"Nextflow\",\n    \"aliases\": [\n      \"nf\"\n    ],\n    \"import\": () => import('@shikijs/langs/nextflow')\n  },\n  {\n    \"id\": \"nginx\",\n    \"name\": \"Nginx\",\n    \"import\": () => import('@shikijs/langs/nginx')\n  },\n  {\n    \"id\": \"nim\",\n    \"name\": \"Nim\",\n    \"import\": () => import('@shikijs/langs/nim')\n  },\n  {\n    \"id\": \"nix\",\n    \"name\": \"Nix\",\n    \"import\": () => import('@shikijs/langs/nix')\n  },\n  {\n    \"id\": \"nushell\",\n    \"name\": \"nushell\",\n    \"aliases\": [\n      \"nu\"\n    ],\n    \"import\": () => import('@shikijs/langs/nushell')\n  },\n  {\n    \"id\": \"objective-c\",\n    \"name\": \"Objective-C\",\n    \"aliases\": [\n      \"objc\"\n    ],\n    \"import\": () => import('@shikijs/langs/objective-c')\n  },\n  {\n    \"id\": \"objective-cpp\",\n    \"name\": \"Objective-C++\",\n    \"import\": () => import('@shikijs/langs/objective-cpp')\n  },\n  {\n    \"id\": \"ocaml\",\n    \"name\": \"OCaml\",\n    \"import\": () => import('@shikijs/langs/ocaml')\n  },\n  {\n    \"id\": \"pascal\",\n    \"name\": \"Pascal\",\n    \"import\": () => import('@shikijs/langs/pascal')\n  },\n  {\n    \"id\": \"perl\",\n    \"name\": \"Perl\",\n    \"import\": () => import('@shikijs/langs/perl')\n  },\n  {\n    \"id\": \"php\",\n    \"name\": \"PHP\",\n    \"import\": () => import('@shikijs/langs/php')\n  },\n  {\n    \"id\": \"plsql\",\n    \"name\": \"PL/SQL\",\n    \"import\": () => import('@shikijs/langs/plsql')\n  },\n  {\n    \"id\": \"po\",\n    \"name\": \"Gettext PO\",\n    \"aliases\": [\n      \"pot\",\n      \"potx\"\n    ],\n    \"import\": () => import('@shikijs/langs/po')\n  },\n  {\n    \"id\": \"polar\",\n    \"name\": \"Polar\",\n    \"import\": () => import('@shikijs/langs/polar')\n  },\n  {\n    \"id\": \"postcss\",\n    \"name\": \"PostCSS\",\n    \"import\": () => import('@shikijs/langs/postcss')\n  },\n  {\n    \"id\": \"powerquery\",\n    \"name\": \"PowerQuery\",\n    \"import\": () => import('@shikijs/langs/powerquery')\n  },\n  {\n    \"id\": \"powershell\",\n    \"name\": \"PowerShell\",\n    \"aliases\": [\n      \"ps\",\n      \"ps1\"\n    ],\n    \"import\": () => import('@shikijs/langs/powershell')\n  },\n  {\n    \"id\": \"prisma\",\n    \"name\": \"Prisma\",\n    \"import\": () => import('@shikijs/langs/prisma')\n  },\n  {\n    \"id\": \"prolog\",\n    \"name\": \"Prolog\",\n    \"import\": () => import('@shikijs/langs/prolog')\n  },\n  {\n    \"id\": \"proto\",\n    \"name\": \"Protocol Buffer 3\",\n    \"aliases\": [\n      \"protobuf\"\n    ],\n    \"import\": () => import('@shikijs/langs/proto')\n  },\n  {\n    \"id\": \"pug\",\n    \"name\": \"Pug\",\n    \"aliases\": [\n      \"jade\"\n    ],\n    \"import\": () => import('@shikijs/langs/pug')\n  },\n  {\n    \"id\": \"puppet\",\n    \"name\": \"Puppet\",\n    \"import\": () => import('@shikijs/langs/puppet')\n  },\n  {\n    \"id\": \"purescript\",\n    \"name\": \"PureScript\",\n    \"import\": () => import('@shikijs/langs/purescript')\n  },\n  {\n    \"id\": \"python\",\n    \"name\": \"Python\",\n    \"aliases\": [\n      \"py\"\n    ],\n    \"import\": () => import('@shikijs/langs/python')\n  },\n  {\n    \"id\": \"qml\",\n    \"name\": \"QML\",\n    \"import\": () => import('@shikijs/langs/qml')\n  },\n  {\n    \"id\": \"qmldir\",\n    \"name\": \"QML Directory\",\n    \"import\": () => import('@shikijs/langs/qmldir')\n  },\n  {\n    \"id\": \"qss\",\n    \"name\": \"Qt Style Sheets\",\n    \"import\": () => import('@shikijs/langs/qss')\n  },\n  {\n    \"id\": \"r\",\n    \"name\": \"R\",\n    \"import\": () => import('@shikijs/langs/r')\n  },\n  {\n    \"id\": \"racket\",\n    \"name\": \"Racket\",\n    \"import\": () => import('@shikijs/langs/racket')\n  },\n  {\n    \"id\": \"raku\",\n    \"name\": \"Raku\",\n    \"aliases\": [\n      \"perl6\"\n    ],\n    \"import\": () => import('@shikijs/langs/raku')\n  },\n  {\n    \"id\": \"razor\",\n    \"name\": \"ASP.NET Razor\",\n    \"import\": () => import('@shikijs/langs/razor')\n  },\n  {\n    \"id\": \"reg\",\n    \"name\": \"Windows Registry Script\",\n    \"import\": () => import('@shikijs/langs/reg')\n  },\n  {\n    \"id\": \"regexp\",\n    \"name\": \"RegExp\",\n    \"aliases\": [\n      \"regex\"\n    ],\n    \"import\": () => import('@shikijs/langs/regexp')\n  },\n  {\n    \"id\": \"rel\",\n    \"name\": \"Rel\",\n    \"import\": () => import('@shikijs/langs/rel')\n  },\n  {\n    \"id\": \"riscv\",\n    \"name\": \"RISC-V\",\n    \"import\": () => import('@shikijs/langs/riscv')\n  },\n  {\n    \"id\": \"rst\",\n    \"name\": \"reStructuredText\",\n    \"import\": () => import('@shikijs/langs/rst')\n  },\n  {\n    \"id\": \"ruby\",\n    \"name\": \"Ruby\",\n    \"aliases\": [\n      \"rb\"\n    ],\n    \"import\": () => import('@shikijs/langs/ruby')\n  },\n  {\n    \"id\": \"rust\",\n    \"name\": \"Rust\",\n    \"aliases\": [\n      \"rs\"\n    ],\n    \"import\": () => import('@shikijs/langs/rust')\n  },\n  {\n    \"id\": \"sas\",\n    \"name\": \"SAS\",\n    \"import\": () => import('@shikijs/langs/sas')\n  },\n  {\n    \"id\": \"sass\",\n    \"name\": \"Sass\",\n    \"import\": () => import('@shikijs/langs/sass')\n  },\n  {\n    \"id\": \"scala\",\n    \"name\": \"Scala\",\n    \"import\": () => import('@shikijs/langs/scala')\n  },\n  {\n    \"id\": \"scheme\",\n    \"name\": \"Scheme\",\n    \"import\": () => import('@shikijs/langs/scheme')\n  },\n  {\n    \"id\": \"scss\",\n    \"name\": \"SCSS\",\n    \"import\": () => import('@shikijs/langs/scss')\n  },\n  {\n    \"id\": \"sdbl\",\n    \"name\": \"1C (Query)\",\n    \"aliases\": [\n      \"1c-query\"\n    ],\n    \"import\": () => import('@shikijs/langs/sdbl')\n  },\n  {\n    \"id\": \"shaderlab\",\n    \"name\": \"ShaderLab\",\n    \"aliases\": [\n      \"shader\"\n    ],\n    \"import\": () => import('@shikijs/langs/shaderlab')\n  },\n  {\n    \"id\": \"shellscript\",\n    \"name\": \"Shell\",\n    \"aliases\": [\n      \"bash\",\n      \"sh\",\n      \"shell\",\n      \"zsh\"\n    ],\n    \"import\": () => import('@shikijs/langs/shellscript')\n  },\n  {\n    \"id\": \"shellsession\",\n    \"name\": \"Shell Session\",\n    \"aliases\": [\n      \"console\"\n    ],\n    \"import\": () => import('@shikijs/langs/shellsession')\n  },\n  {\n    \"id\": \"smalltalk\",\n    \"name\": \"Smalltalk\",\n    \"import\": () => import('@shikijs/langs/smalltalk')\n  },\n  {\n    \"id\": \"solidity\",\n    \"name\": \"Solidity\",\n    \"import\": () => import('@shikijs/langs/solidity')\n  },\n  {\n    \"id\": \"soy\",\n    \"name\": \"Closure Templates\",\n    \"aliases\": [\n      \"closure-templates\"\n    ],\n    \"import\": () => import('@shikijs/langs/soy')\n  },\n  {\n    \"id\": \"sparql\",\n    \"name\": \"SPARQL\",\n    \"import\": () => import('@shikijs/langs/sparql')\n  },\n  {\n    \"id\": \"splunk\",\n    \"name\": \"Splunk Query Language\",\n    \"aliases\": [\n      \"spl\"\n    ],\n    \"import\": () => import('@shikijs/langs/splunk')\n  },\n  {\n    \"id\": \"sql\",\n    \"name\": \"SQL\",\n    \"import\": () => import('@shikijs/langs/sql')\n  },\n  {\n    \"id\": \"ssh-config\",\n    \"name\": \"SSH Config\",\n    \"import\": () => import('@shikijs/langs/ssh-config')\n  },\n  {\n    \"id\": \"stata\",\n    \"name\": \"Stata\",\n    \"import\": () => import('@shikijs/langs/stata')\n  },\n  {\n    \"id\": \"stylus\",\n    \"name\": \"Stylus\",\n    \"aliases\": [\n      \"styl\"\n    ],\n    \"import\": () => import('@shikijs/langs/stylus')\n  },\n  {\n    \"id\": \"svelte\",\n    \"name\": \"Svelte\",\n    \"import\": () => import('@shikijs/langs/svelte')\n  },\n  {\n    \"id\": \"swift\",\n    \"name\": \"Swift\",\n    \"import\": () => import('@shikijs/langs/swift')\n  },\n  {\n    \"id\": \"system-verilog\",\n    \"name\": \"SystemVerilog\",\n    \"import\": () => import('@shikijs/langs/system-verilog')\n  },\n  {\n    \"id\": \"systemd\",\n    \"name\": \"Systemd Units\",\n    \"import\": () => import('@shikijs/langs/systemd')\n  },\n  {\n    \"id\": \"talonscript\",\n    \"name\": \"TalonScript\",\n    \"aliases\": [\n      \"talon\"\n    ],\n    \"import\": () => import('@shikijs/langs/talonscript')\n  },\n  {\n    \"id\": \"tasl\",\n    \"name\": \"Tasl\",\n    \"import\": () => import('@shikijs/langs/tasl')\n  },\n  {\n    \"id\": \"tcl\",\n    \"name\": \"Tcl\",\n    \"import\": () => import('@shikijs/langs/tcl')\n  },\n  {\n    \"id\": \"templ\",\n    \"name\": \"Templ\",\n    \"import\": () => import('@shikijs/langs/templ')\n  },\n  {\n    \"id\": \"terraform\",\n    \"name\": \"Terraform\",\n    \"aliases\": [\n      \"tf\",\n      \"tfvars\"\n    ],\n    \"import\": () => import('@shikijs/langs/terraform')\n  },\n  {\n    \"id\": \"tex\",\n    \"name\": \"TeX\",\n    \"import\": () => import('@shikijs/langs/tex')\n  },\n  {\n    \"id\": \"toml\",\n    \"name\": \"TOML\",\n    \"import\": () => import('@shikijs/langs/toml')\n  },\n  {\n    \"id\": \"ts-tags\",\n    \"name\": \"TypeScript with Tags\",\n    \"aliases\": [\n      \"lit\"\n    ],\n    \"import\": () => import('@shikijs/langs/ts-tags')\n  },\n  {\n    \"id\": \"tsv\",\n    \"name\": \"TSV\",\n    \"import\": () => import('@shikijs/langs/tsv')\n  },\n  {\n    \"id\": \"tsx\",\n    \"name\": \"TSX\",\n    \"import\": () => import('@shikijs/langs/tsx')\n  },\n  {\n    \"id\": \"turtle\",\n    \"name\": \"Turtle\",\n    \"import\": () => import('@shikijs/langs/turtle')\n  },\n  {\n    \"id\": \"twig\",\n    \"name\": \"Twig\",\n    \"import\": () => import('@shikijs/langs/twig')\n  },\n  {\n    \"id\": \"typescript\",\n    \"name\": \"TypeScript\",\n    \"aliases\": [\n      \"ts\"\n    ],\n    \"import\": () => import('@shikijs/langs/typescript')\n  },\n  {\n    \"id\": \"typespec\",\n    \"name\": \"TypeSpec\",\n    \"aliases\": [\n      \"tsp\"\n    ],\n    \"import\": () => import('@shikijs/langs/typespec')\n  },\n  {\n    \"id\": \"typst\",\n    \"name\": \"Typst\",\n    \"aliases\": [\n      \"typ\"\n    ],\n    \"import\": () => import('@shikijs/langs/typst')\n  },\n  {\n    \"id\": \"v\",\n    \"name\": \"V\",\n    \"import\": () => import('@shikijs/langs/v')\n  },\n  {\n    \"id\": \"vala\",\n    \"name\": \"Vala\",\n    \"import\": () => import('@shikijs/langs/vala')\n  },\n  {\n    \"id\": \"vb\",\n    \"name\": \"Visual Basic\",\n    \"aliases\": [\n      \"cmd\"\n    ],\n    \"import\": () => import('@shikijs/langs/vb')\n  },\n  {\n    \"id\": \"verilog\",\n    \"name\": \"Verilog\",\n    \"import\": () => import('@shikijs/langs/verilog')\n  },\n  {\n    \"id\": \"vhdl\",\n    \"name\": \"VHDL\",\n    \"import\": () => import('@shikijs/langs/vhdl')\n  },\n  {\n    \"id\": \"viml\",\n    \"name\": \"Vim Script\",\n    \"aliases\": [\n      \"vim\",\n      \"vimscript\"\n    ],\n    \"import\": () => import('@shikijs/langs/viml')\n  },\n  {\n    \"id\": \"vue\",\n    \"name\": \"Vue\",\n    \"import\": () => import('@shikijs/langs/vue')\n  },\n  {\n    \"id\": \"vue-html\",\n    \"name\": \"Vue HTML\",\n    \"import\": () => import('@shikijs/langs/vue-html')\n  },\n  {\n    \"id\": \"vyper\",\n    \"name\": \"Vyper\",\n    \"aliases\": [\n      \"vy\"\n    ],\n    \"import\": () => import('@shikijs/langs/vyper')\n  },\n  {\n    \"id\": \"wasm\",\n    \"name\": \"WebAssembly\",\n    \"import\": () => import('@shikijs/langs/wasm')\n  },\n  {\n    \"id\": \"wenyan\",\n    \"name\": \"Wenyan\",\n    \"aliases\": [\n      \"\\u6587\\u8A00\"\n    ],\n    \"import\": () => import('@shikijs/langs/wenyan')\n  },\n  {\n    \"id\": \"wgsl\",\n    \"name\": \"WGSL\",\n    \"import\": () => import('@shikijs/langs/wgsl')\n  },\n  {\n    \"id\": \"wikitext\",\n    \"name\": \"Wikitext\",\n    \"aliases\": [\n      \"mediawiki\",\n      \"wiki\"\n    ],\n    \"import\": () => import('@shikijs/langs/wikitext')\n  },\n  {\n    \"id\": \"wit\",\n    \"name\": \"WebAssembly Interface Types\",\n    \"import\": () => import('@shikijs/langs/wit')\n  },\n  {\n    \"id\": \"wolfram\",\n    \"name\": \"Wolfram\",\n    \"aliases\": [\n      \"wl\"\n    ],\n    \"import\": () => import('@shikijs/langs/wolfram')\n  },\n  {\n    \"id\": \"xml\",\n    \"name\": \"XML\",\n    \"import\": () => import('@shikijs/langs/xml')\n  },\n  {\n    \"id\": \"xsl\",\n    \"name\": \"XSL\",\n    \"import\": () => import('@shikijs/langs/xsl')\n  },\n  {\n    \"id\": \"yaml\",\n    \"name\": \"YAML\",\n    \"aliases\": [\n      \"yml\"\n    ],\n    \"import\": () => import('@shikijs/langs/yaml')\n  },\n  {\n    \"id\": \"zenscript\",\n    \"name\": \"ZenScript\",\n    \"import\": () => import('@shikijs/langs/zenscript')\n  },\n  {\n    \"id\": \"zig\",\n    \"name\": \"Zig\",\n    \"import\": () => import('@shikijs/langs/zig')\n  }\n];\nconst bundledLanguagesBase = Object.fromEntries(bundledLanguagesInfo.map((i) => [i.id, i.import]));\nconst bundledLanguagesAlias = Object.fromEntries(bundledLanguagesInfo.flatMap((i) => i.aliases?.map((a) => [a, i.import]) || []));\nconst bundledLanguages = {\n  ...bundledLanguagesBase,\n  ...bundledLanguagesAlias\n};\n\nexport { bundledLanguages, bundledLanguagesAlias, bundledLanguagesBase, bundledLanguagesInfo };\n","const bundledThemesInfo = [\n  {\n    \"id\": \"andromeeda\",\n    \"displayName\": \"Andromeeda\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/andromeeda')\n  },\n  {\n    \"id\": \"aurora-x\",\n    \"displayName\": \"Aurora X\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/aurora-x')\n  },\n  {\n    \"id\": \"ayu-dark\",\n    \"displayName\": \"Ayu Dark\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/ayu-dark')\n  },\n  {\n    \"id\": \"catppuccin-frappe\",\n    \"displayName\": \"Catppuccin Frapp\\xE9\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/catppuccin-frappe')\n  },\n  {\n    \"id\": \"catppuccin-latte\",\n    \"displayName\": \"Catppuccin Latte\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/catppuccin-latte')\n  },\n  {\n    \"id\": \"catppuccin-macchiato\",\n    \"displayName\": \"Catppuccin Macchiato\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/catppuccin-macchiato')\n  },\n  {\n    \"id\": \"catppuccin-mocha\",\n    \"displayName\": \"Catppuccin Mocha\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/catppuccin-mocha')\n  },\n  {\n    \"id\": \"dark-plus\",\n    \"displayName\": \"Dark Plus\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/dark-plus')\n  },\n  {\n    \"id\": \"dracula\",\n    \"displayName\": \"Dracula Theme\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/dracula')\n  },\n  {\n    \"id\": \"dracula-soft\",\n    \"displayName\": \"Dracula Theme Soft\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/dracula-soft')\n  },\n  {\n    \"id\": \"everforest-dark\",\n    \"displayName\": \"Everforest Dark\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/everforest-dark')\n  },\n  {\n    \"id\": \"everforest-light\",\n    \"displayName\": \"Everforest Light\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/everforest-light')\n  },\n  {\n    \"id\": \"github-dark\",\n    \"displayName\": \"GitHub Dark\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/github-dark')\n  },\n  {\n    \"id\": \"github-dark-default\",\n    \"displayName\": \"GitHub Dark Default\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/github-dark-default')\n  },\n  {\n    \"id\": \"github-dark-dimmed\",\n    \"displayName\": \"GitHub Dark Dimmed\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/github-dark-dimmed')\n  },\n  {\n    \"id\": \"github-dark-high-contrast\",\n    \"displayName\": \"GitHub Dark High Contrast\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/github-dark-high-contrast')\n  },\n  {\n    \"id\": \"github-light\",\n    \"displayName\": \"GitHub Light\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/github-light')\n  },\n  {\n    \"id\": \"github-light-default\",\n    \"displayName\": \"GitHub Light Default\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/github-light-default')\n  },\n  {\n    \"id\": \"github-light-high-contrast\",\n    \"displayName\": \"GitHub Light High Contrast\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/github-light-high-contrast')\n  },\n  {\n    \"id\": \"gruvbox-dark-hard\",\n    \"displayName\": \"Gruvbox Dark Hard\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/gruvbox-dark-hard')\n  },\n  {\n    \"id\": \"gruvbox-dark-medium\",\n    \"displayName\": \"Gruvbox Dark Medium\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/gruvbox-dark-medium')\n  },\n  {\n    \"id\": \"gruvbox-dark-soft\",\n    \"displayName\": \"Gruvbox Dark Soft\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/gruvbox-dark-soft')\n  },\n  {\n    \"id\": \"gruvbox-light-hard\",\n    \"displayName\": \"Gruvbox Light Hard\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/gruvbox-light-hard')\n  },\n  {\n    \"id\": \"gruvbox-light-medium\",\n    \"displayName\": \"Gruvbox Light Medium\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/gruvbox-light-medium')\n  },\n  {\n    \"id\": \"gruvbox-light-soft\",\n    \"displayName\": \"Gruvbox Light Soft\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/gruvbox-light-soft')\n  },\n  {\n    \"id\": \"houston\",\n    \"displayName\": \"Houston\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/houston')\n  },\n  {\n    \"id\": \"kanagawa-dragon\",\n    \"displayName\": \"Kanagawa Dragon\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/kanagawa-dragon')\n  },\n  {\n    \"id\": \"kanagawa-lotus\",\n    \"displayName\": \"Kanagawa Lotus\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/kanagawa-lotus')\n  },\n  {\n    \"id\": \"kanagawa-wave\",\n    \"displayName\": \"Kanagawa Wave\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/kanagawa-wave')\n  },\n  {\n    \"id\": \"laserwave\",\n    \"displayName\": \"LaserWave\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/laserwave')\n  },\n  {\n    \"id\": \"light-plus\",\n    \"displayName\": \"Light Plus\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/light-plus')\n  },\n  {\n    \"id\": \"material-theme\",\n    \"displayName\": \"Material Theme\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/material-theme')\n  },\n  {\n    \"id\": \"material-theme-darker\",\n    \"displayName\": \"Material Theme Darker\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/material-theme-darker')\n  },\n  {\n    \"id\": \"material-theme-lighter\",\n    \"displayName\": \"Material Theme Lighter\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/material-theme-lighter')\n  },\n  {\n    \"id\": \"material-theme-ocean\",\n    \"displayName\": \"Material Theme Ocean\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/material-theme-ocean')\n  },\n  {\n    \"id\": \"material-theme-palenight\",\n    \"displayName\": \"Material Theme Palenight\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/material-theme-palenight')\n  },\n  {\n    \"id\": \"min-dark\",\n    \"displayName\": \"Min Dark\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/min-dark')\n  },\n  {\n    \"id\": \"min-light\",\n    \"displayName\": \"Min Light\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/min-light')\n  },\n  {\n    \"id\": \"monokai\",\n    \"displayName\": \"Monokai\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/monokai')\n  },\n  {\n    \"id\": \"night-owl\",\n    \"displayName\": \"Night Owl\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/night-owl')\n  },\n  {\n    \"id\": \"nord\",\n    \"displayName\": \"Nord\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/nord')\n  },\n  {\n    \"id\": \"one-dark-pro\",\n    \"displayName\": \"One Dark Pro\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/one-dark-pro')\n  },\n  {\n    \"id\": \"one-light\",\n    \"displayName\": \"One Light\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/one-light')\n  },\n  {\n    \"id\": \"plastic\",\n    \"displayName\": \"Plastic\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/plastic')\n  },\n  {\n    \"id\": \"poimandres\",\n    \"displayName\": \"Poimandres\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/poimandres')\n  },\n  {\n    \"id\": \"red\",\n    \"displayName\": \"Red\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/red')\n  },\n  {\n    \"id\": \"rose-pine\",\n    \"displayName\": \"Ros\\xE9 Pine\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/rose-pine')\n  },\n  {\n    \"id\": \"rose-pine-dawn\",\n    \"displayName\": \"Ros\\xE9 Pine Dawn\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/rose-pine-dawn')\n  },\n  {\n    \"id\": \"rose-pine-moon\",\n    \"displayName\": \"Ros\\xE9 Pine Moon\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/rose-pine-moon')\n  },\n  {\n    \"id\": \"slack-dark\",\n    \"displayName\": \"Slack Dark\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/slack-dark')\n  },\n  {\n    \"id\": \"slack-ochin\",\n    \"displayName\": \"Slack Ochin\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/slack-ochin')\n  },\n  {\n    \"id\": \"snazzy-light\",\n    \"displayName\": \"Snazzy Light\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/snazzy-light')\n  },\n  {\n    \"id\": \"solarized-dark\",\n    \"displayName\": \"Solarized Dark\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/solarized-dark')\n  },\n  {\n    \"id\": \"solarized-light\",\n    \"displayName\": \"Solarized Light\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/solarized-light')\n  },\n  {\n    \"id\": \"synthwave-84\",\n    \"displayName\": \"Synthwave '84\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/synthwave-84')\n  },\n  {\n    \"id\": \"tokyo-night\",\n    \"displayName\": \"Tokyo Night\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/tokyo-night')\n  },\n  {\n    \"id\": \"vesper\",\n    \"displayName\": \"Vesper\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/vesper')\n  },\n  {\n    \"id\": \"vitesse-black\",\n    \"displayName\": \"Vitesse Black\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/vitesse-black')\n  },\n  {\n    \"id\": \"vitesse-dark\",\n    \"displayName\": \"Vitesse Dark\",\n    \"type\": \"dark\",\n    \"import\": () => import('@shikijs/themes/vitesse-dark')\n  },\n  {\n    \"id\": \"vitesse-light\",\n    \"displayName\": \"Vitesse Light\",\n    \"type\": \"light\",\n    \"import\": () => import('@shikijs/themes/vitesse-light')\n  }\n];\nconst bundledThemes = Object.fromEntries(bundledThemesInfo.map((i) => [i.id, i.import]));\n\nexport { bundledThemes, bundledThemesInfo };\n","class ShikiError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ShikiError\";\n  }\n}\n\nfunction getHeapMax() {\n  return 2147483648;\n}\nfunction _emscripten_get_now() {\n  return typeof performance !== \"undefined\" ? performance.now() : Date.now();\n}\nconst alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;\nasync function main(init) {\n  let wasmMemory;\n  let buffer;\n  const binding = {};\n  function updateGlobalBufferAndViews(buf) {\n    buffer = buf;\n    binding.HEAPU8 = new Uint8Array(buf);\n    binding.HEAPU32 = new Uint32Array(buf);\n  }\n  function _emscripten_memcpy_big(dest, src, num) {\n    binding.HEAPU8.copyWithin(dest, src, src + num);\n  }\n  function emscripten_realloc_buffer(size) {\n    try {\n      wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);\n      updateGlobalBufferAndViews(wasmMemory.buffer);\n      return 1;\n    } catch {\n    }\n  }\n  function _emscripten_resize_heap(requestedSize) {\n    const oldSize = binding.HEAPU8.length;\n    requestedSize = requestedSize >>> 0;\n    const maxHeapSize = getHeapMax();\n    if (requestedSize > maxHeapSize)\n      return false;\n    for (let cutDown = 1; cutDown <= 4; cutDown *= 2) {\n      let overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n      overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n      const newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n      const replacement = emscripten_realloc_buffer(newSize);\n      if (replacement)\n        return true;\n    }\n    return false;\n  }\n  const UTF8Decoder = typeof TextDecoder != \"undefined\" ? new TextDecoder(\"utf8\") : void 0;\n  function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead = 1024) {\n    const endIdx = idx + maxBytesToRead;\n    let endPtr = idx;\n    while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n    if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n      return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n    }\n    let str = \"\";\n    while (idx < endPtr) {\n      let u0 = heapOrArray[idx++];\n      if (!(u0 & 128)) {\n        str += String.fromCharCode(u0);\n        continue;\n      }\n      const u1 = heapOrArray[idx++] & 63;\n      if ((u0 & 224) === 192) {\n        str += String.fromCharCode((u0 & 31) << 6 | u1);\n        continue;\n      }\n      const u2 = heapOrArray[idx++] & 63;\n      if ((u0 & 240) === 224) {\n        u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n      } else {\n        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;\n      }\n      if (u0 < 65536) {\n        str += String.fromCharCode(u0);\n      } else {\n        const ch = u0 - 65536;\n        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n      }\n    }\n    return str;\n  }\n  function UTF8ToString(ptr, maxBytesToRead) {\n    return ptr ? UTF8ArrayToString(binding.HEAPU8, ptr, maxBytesToRead) : \"\";\n  }\n  const asmLibraryArg = {\n    emscripten_get_now: _emscripten_get_now,\n    emscripten_memcpy_big: _emscripten_memcpy_big,\n    emscripten_resize_heap: _emscripten_resize_heap,\n    fd_write: () => 0\n  };\n  async function createWasm() {\n    const info = {\n      env: asmLibraryArg,\n      wasi_snapshot_preview1: asmLibraryArg\n    };\n    const exports = await init(info);\n    wasmMemory = exports.memory;\n    updateGlobalBufferAndViews(wasmMemory.buffer);\n    Object.assign(binding, exports);\n    binding.UTF8ToString = UTF8ToString;\n  }\n  await createWasm();\n  return binding;\n}\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nlet onigBinding = null;\nfunction throwLastOnigError(onigBinding2) {\n  throw new ShikiError(onigBinding2.UTF8ToString(onigBinding2.getLastOnigError()));\n}\nclass UtfString {\n  constructor(str) {\n    __publicField(this, \"utf16Length\");\n    __publicField(this, \"utf8Length\");\n    __publicField(this, \"utf16Value\");\n    __publicField(this, \"utf8Value\");\n    __publicField(this, \"utf16OffsetToUtf8\");\n    __publicField(this, \"utf8OffsetToUtf16\");\n    const utf16Length = str.length;\n    const utf8Length = UtfString._utf8ByteLength(str);\n    const computeIndicesMapping = utf8Length !== utf16Length;\n    const utf16OffsetToUtf8 = computeIndicesMapping ? new Uint32Array(utf16Length + 1) : null;\n    if (computeIndicesMapping)\n      utf16OffsetToUtf8[utf16Length] = utf8Length;\n    const utf8OffsetToUtf16 = computeIndicesMapping ? new Uint32Array(utf8Length + 1) : null;\n    if (computeIndicesMapping)\n      utf8OffsetToUtf16[utf8Length] = utf16Length;\n    const utf8Value = new Uint8Array(utf8Length);\n    let i8 = 0;\n    for (let i16 = 0; i16 < utf16Length; i16++) {\n      const charCode = str.charCodeAt(i16);\n      let codePoint = charCode;\n      let wasSurrogatePair = false;\n      if (charCode >= 55296 && charCode <= 56319) {\n        if (i16 + 1 < utf16Length) {\n          const nextCharCode = str.charCodeAt(i16 + 1);\n          if (nextCharCode >= 56320 && nextCharCode <= 57343) {\n            codePoint = (charCode - 55296 << 10) + 65536 | nextCharCode - 56320;\n            wasSurrogatePair = true;\n          }\n        }\n      }\n      if (computeIndicesMapping) {\n        utf16OffsetToUtf8[i16] = i8;\n        if (wasSurrogatePair)\n          utf16OffsetToUtf8[i16 + 1] = i8;\n        if (codePoint <= 127) {\n          utf8OffsetToUtf16[i8 + 0] = i16;\n        } else if (codePoint <= 2047) {\n          utf8OffsetToUtf16[i8 + 0] = i16;\n          utf8OffsetToUtf16[i8 + 1] = i16;\n        } else if (codePoint <= 65535) {\n          utf8OffsetToUtf16[i8 + 0] = i16;\n          utf8OffsetToUtf16[i8 + 1] = i16;\n          utf8OffsetToUtf16[i8 + 2] = i16;\n        } else {\n          utf8OffsetToUtf16[i8 + 0] = i16;\n          utf8OffsetToUtf16[i8 + 1] = i16;\n          utf8OffsetToUtf16[i8 + 2] = i16;\n          utf8OffsetToUtf16[i8 + 3] = i16;\n        }\n      }\n      if (codePoint <= 127) {\n        utf8Value[i8++] = codePoint;\n      } else if (codePoint <= 2047) {\n        utf8Value[i8++] = 192 | (codePoint & 1984) >>> 6;\n        utf8Value[i8++] = 128 | (codePoint & 63) >>> 0;\n      } else if (codePoint <= 65535) {\n        utf8Value[i8++] = 224 | (codePoint & 61440) >>> 12;\n        utf8Value[i8++] = 128 | (codePoint & 4032) >>> 6;\n        utf8Value[i8++] = 128 | (codePoint & 63) >>> 0;\n      } else {\n        utf8Value[i8++] = 240 | (codePoint & 1835008) >>> 18;\n        utf8Value[i8++] = 128 | (codePoint & 258048) >>> 12;\n        utf8Value[i8++] = 128 | (codePoint & 4032) >>> 6;\n        utf8Value[i8++] = 128 | (codePoint & 63) >>> 0;\n      }\n      if (wasSurrogatePair)\n        i16++;\n    }\n    this.utf16Length = utf16Length;\n    this.utf8Length = utf8Length;\n    this.utf16Value = str;\n    this.utf8Value = utf8Value;\n    this.utf16OffsetToUtf8 = utf16OffsetToUtf8;\n    this.utf8OffsetToUtf16 = utf8OffsetToUtf16;\n  }\n  static _utf8ByteLength(str) {\n    let result = 0;\n    for (let i = 0, len = str.length; i < len; i++) {\n      const charCode = str.charCodeAt(i);\n      let codepoint = charCode;\n      let wasSurrogatePair = false;\n      if (charCode >= 55296 && charCode <= 56319) {\n        if (i + 1 < len) {\n          const nextCharCode = str.charCodeAt(i + 1);\n          if (nextCharCode >= 56320 && nextCharCode <= 57343) {\n            codepoint = (charCode - 55296 << 10) + 65536 | nextCharCode - 56320;\n            wasSurrogatePair = true;\n          }\n        }\n      }\n      if (codepoint <= 127)\n        result += 1;\n      else if (codepoint <= 2047)\n        result += 2;\n      else if (codepoint <= 65535)\n        result += 3;\n      else\n        result += 4;\n      if (wasSurrogatePair)\n        i++;\n    }\n    return result;\n  }\n  createString(onigBinding2) {\n    const result = onigBinding2.omalloc(this.utf8Length);\n    onigBinding2.HEAPU8.set(this.utf8Value, result);\n    return result;\n  }\n}\nconst _OnigString = class _OnigString {\n  constructor(str) {\n    __publicField(this, \"id\", ++_OnigString.LAST_ID);\n    __publicField(this, \"_onigBinding\");\n    __publicField(this, \"content\");\n    __publicField(this, \"utf16Length\");\n    __publicField(this, \"utf8Length\");\n    __publicField(this, \"utf16OffsetToUtf8\");\n    __publicField(this, \"utf8OffsetToUtf16\");\n    __publicField(this, \"ptr\");\n    if (!onigBinding)\n      throw new ShikiError(\"Must invoke loadWasm first.\");\n    this._onigBinding = onigBinding;\n    this.content = str;\n    const utfString = new UtfString(str);\n    this.utf16Length = utfString.utf16Length;\n    this.utf8Length = utfString.utf8Length;\n    this.utf16OffsetToUtf8 = utfString.utf16OffsetToUtf8;\n    this.utf8OffsetToUtf16 = utfString.utf8OffsetToUtf16;\n    if (this.utf8Length < 1e4 && !_OnigString._sharedPtrInUse) {\n      if (!_OnigString._sharedPtr)\n        _OnigString._sharedPtr = onigBinding.omalloc(1e4);\n      _OnigString._sharedPtrInUse = true;\n      onigBinding.HEAPU8.set(utfString.utf8Value, _OnigString._sharedPtr);\n      this.ptr = _OnigString._sharedPtr;\n    } else {\n      this.ptr = utfString.createString(onigBinding);\n    }\n  }\n  convertUtf8OffsetToUtf16(utf8Offset) {\n    if (this.utf8OffsetToUtf16) {\n      if (utf8Offset < 0)\n        return 0;\n      if (utf8Offset > this.utf8Length)\n        return this.utf16Length;\n      return this.utf8OffsetToUtf16[utf8Offset];\n    }\n    return utf8Offset;\n  }\n  convertUtf16OffsetToUtf8(utf16Offset) {\n    if (this.utf16OffsetToUtf8) {\n      if (utf16Offset < 0)\n        return 0;\n      if (utf16Offset > this.utf16Length)\n        return this.utf8Length;\n      return this.utf16OffsetToUtf8[utf16Offset];\n    }\n    return utf16Offset;\n  }\n  dispose() {\n    if (this.ptr === _OnigString._sharedPtr)\n      _OnigString._sharedPtrInUse = false;\n    else\n      this._onigBinding.ofree(this.ptr);\n  }\n};\n__publicField(_OnigString, \"LAST_ID\", 0);\n__publicField(_OnigString, \"_sharedPtr\", 0);\n// a pointer to a string of 10000 bytes\n__publicField(_OnigString, \"_sharedPtrInUse\", false);\nlet OnigString = _OnigString;\nclass OnigScanner {\n  constructor(patterns) {\n    __publicField(this, \"_onigBinding\");\n    __publicField(this, \"_ptr\");\n    if (!onigBinding)\n      throw new ShikiError(\"Must invoke loadWasm first.\");\n    const strPtrsArr = [];\n    const strLenArr = [];\n    for (let i = 0, len = patterns.length; i < len; i++) {\n      const utfString = new UtfString(patterns[i]);\n      strPtrsArr[i] = utfString.createString(onigBinding);\n      strLenArr[i] = utfString.utf8Length;\n    }\n    const strPtrsPtr = onigBinding.omalloc(4 * patterns.length);\n    onigBinding.HEAPU32.set(strPtrsArr, strPtrsPtr / 4);\n    const strLenPtr = onigBinding.omalloc(4 * patterns.length);\n    onigBinding.HEAPU32.set(strLenArr, strLenPtr / 4);\n    const scannerPtr = onigBinding.createOnigScanner(strPtrsPtr, strLenPtr, patterns.length);\n    for (let i = 0, len = patterns.length; i < len; i++)\n      onigBinding.ofree(strPtrsArr[i]);\n    onigBinding.ofree(strLenPtr);\n    onigBinding.ofree(strPtrsPtr);\n    if (scannerPtr === 0)\n      throwLastOnigError(onigBinding);\n    this._onigBinding = onigBinding;\n    this._ptr = scannerPtr;\n  }\n  dispose() {\n    this._onigBinding.freeOnigScanner(this._ptr);\n  }\n  findNextMatchSync(string, startPosition, arg) {\n    let options = 0 /* None */;\n    if (typeof arg === \"number\") {\n      options = arg;\n    }\n    if (typeof string === \"string\") {\n      string = new OnigString(string);\n      const result = this._findNextMatchSync(string, startPosition, false, options);\n      string.dispose();\n      return result;\n    }\n    return this._findNextMatchSync(string, startPosition, false, options);\n  }\n  _findNextMatchSync(string, startPosition, debugCall, options) {\n    const onigBinding2 = this._onigBinding;\n    const resultPtr = onigBinding2.findNextOnigScannerMatch(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);\n    if (resultPtr === 0) {\n      return null;\n    }\n    const HEAPU32 = onigBinding2.HEAPU32;\n    let offset = resultPtr / 4;\n    const index = HEAPU32[offset++];\n    const count = HEAPU32[offset++];\n    const captureIndices = [];\n    for (let i = 0; i < count; i++) {\n      const beg = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n      const end = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n      captureIndices[i] = {\n        start: beg,\n        end,\n        length: end - beg\n      };\n    }\n    return {\n      index,\n      captureIndices\n    };\n  }\n}\nfunction isInstantiatorOptionsObject(dataOrOptions) {\n  return typeof dataOrOptions.instantiator === \"function\";\n}\nfunction isInstantiatorModule(dataOrOptions) {\n  return typeof dataOrOptions.default === \"function\";\n}\nfunction isDataOptionsObject(dataOrOptions) {\n  return typeof dataOrOptions.data !== \"undefined\";\n}\nfunction isResponse(dataOrOptions) {\n  return typeof Response !== \"undefined\" && dataOrOptions instanceof Response;\n}\nfunction isArrayBuffer(data) {\n  return typeof ArrayBuffer !== \"undefined\" && (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) || typeof Buffer !== \"undefined\" && Buffer.isBuffer?.(data) || typeof SharedArrayBuffer !== \"undefined\" && data instanceof SharedArrayBuffer || typeof Uint32Array !== \"undefined\" && data instanceof Uint32Array;\n}\nlet initPromise;\nfunction loadWasm(options) {\n  if (initPromise)\n    return initPromise;\n  async function _load() {\n    onigBinding = await main(async (info) => {\n      let instance = options;\n      instance = await instance;\n      if (typeof instance === \"function\")\n        instance = await instance(info);\n      if (typeof instance === \"function\")\n        instance = await instance(info);\n      if (isInstantiatorOptionsObject(instance)) {\n        instance = await instance.instantiator(info);\n      } else if (isInstantiatorModule(instance)) {\n        instance = await instance.default(info);\n      } else {\n        if (isDataOptionsObject(instance))\n          instance = instance.data;\n        if (isResponse(instance)) {\n          if (typeof WebAssembly.instantiateStreaming === \"function\")\n            instance = await _makeResponseStreamingLoader(instance)(info);\n          else\n            instance = await _makeResponseNonStreamingLoader(instance)(info);\n        } else if (isArrayBuffer(instance)) {\n          instance = await _makeArrayBufferLoader(instance)(info);\n        } else if (instance instanceof WebAssembly.Module) {\n          instance = await _makeArrayBufferLoader(instance)(info);\n        } else if (\"default\" in instance && instance.default instanceof WebAssembly.Module) {\n          instance = await _makeArrayBufferLoader(instance.default)(info);\n        }\n      }\n      if (\"instance\" in instance)\n        instance = instance.instance;\n      if (\"exports\" in instance)\n        instance = instance.exports;\n      return instance;\n    });\n  }\n  initPromise = _load();\n  return initPromise;\n}\nfunction _makeArrayBufferLoader(data) {\n  return (importObject) => WebAssembly.instantiate(data, importObject);\n}\nfunction _makeResponseStreamingLoader(data) {\n  return (importObject) => WebAssembly.instantiateStreaming(data, importObject);\n}\nfunction _makeResponseNonStreamingLoader(data) {\n  return async (importObject) => {\n    const arrayBuffer = await data.arrayBuffer();\n    return WebAssembly.instantiate(arrayBuffer, importObject);\n  };\n}\n\nlet _defaultWasmLoader;\nfunction setDefaultWasmLoader(_loader) {\n  _defaultWasmLoader = _loader;\n}\nfunction getDefaultWasmLoader() {\n  return _defaultWasmLoader;\n}\nasync function createOnigurumaEngine(options) {\n  if (options)\n    await loadWasm(options);\n  return {\n    createScanner(patterns) {\n      return new OnigScanner(patterns.map((p) => typeof p === \"string\" ? p : p.source));\n    },\n    createString(s) {\n      return new OnigString(s);\n    }\n  };\n}\n\nexport { createOnigurumaEngine, getDefaultWasmLoader, loadWasm, setDefaultWasmLoader };\n","import { createSingletonShorthands, createdBundledHighlighter, guessEmbeddedLanguages } from '@shikijs/core';\nexport * from '@shikijs/core';\nimport { bundledLanguages } from './langs.mjs';\nexport { bundledLanguagesAlias, bundledLanguagesBase, bundledLanguagesInfo } from './langs.mjs';\nimport { bundledThemes } from './themes.mjs';\nexport { bundledThemesInfo } from './themes.mjs';\nimport { createOnigurumaEngine } from '@shikijs/engine-oniguruma';\n\nconst createHighlighter = /* @__PURE__ */ createdBundledHighlighter({\n  langs: bundledLanguages,\n  themes: bundledThemes,\n  engine: () => createOnigurumaEngine(import('shiki/wasm'))\n});\nconst {\n  codeToHtml,\n  codeToHast,\n  codeToTokens,\n  codeToTokensBase,\n  codeToTokensWithThemes,\n  getSingletonHighlighter,\n  getLastGrammarState\n} = /* @__PURE__ */ createSingletonShorthands(\n  createHighlighter,\n  { guessEmbeddedLanguages }\n);\n\nexport { bundledLanguages, bundledThemes, codeToHast, codeToHtml, codeToTokens, codeToTokensBase, codeToTokensWithThemes, createHighlighter, getLastGrammarState, getSingletonHighlighter };\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n"],"names":["exports","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","i","arr","Arr","curByte","len","charCodeAt","revLookup","fromByteArray","uint8","length","extraBytes","parts","len2","push","encodeChunk","start","end","output","lookup","num","join","Uint8Array","Array","code","indexOf","read","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","d","s","NaN","Math","pow","write","value","c","rt","isNaN","abs","Infinity","floor","log","LN2","key","FontStyle2","FindOption2","ShikiError","Error","constructor","message","name","mergeObjects","target","sources","forEach","source","CAPTURING_REGEX_SOURCE","RegexSource","hasCaptures","regexSource","lastIndex","test","replaceCaptures","captureSource","captureIndices","replace","match","index","commandIndex","command","capture","parseInt","result","substring","toLowerCase","toUpperCase","strArrCmp","a","b","len1","res","isValidHexColor","hex","escapeRegExpCharacters","CachedFn","fn","cache","Map","get","has","set","Theme","_colorMap","_defaults","_root","createFromRawTheme","colorMap","createFromParsedTheme","parseTheme","settings","isArray","resultLen","scopes","entry","scope","_scope","split","fontStyle","segments","j","lenJ","foreground","background","trim","parentScopes","slice","reverse","ParsedThemeRule","resolveParsedThemeRules","parsedThemeRules","sort","r","defaultFontStyle","defaultForeground","defaultBackground","incomingDefaults","shift","ColorMap","defaults","StyleAttributes","getId","root","ThemeTrieElement","ThemeTrieElementRule","rule","insert","_cachedMatchRoot","scopeName","getColorMap","getDefaults","scopePath","effectiveRule","matchingTrieElements","find","_scopePathMatchesParentScopes","scopePattern","scopeMustMatch","startsWith","parent","v","ScopeStack","_ScopeStack","path","scopeNames","from","getSegments","item","toString","extends","other","getExtensionIfDefined","base","foregroundId","backgroundId","FontStyle","_isFrozen","_lastColorId","_id2color","_color2id","Object","create","color","emptyParentScopes","freeze","_ThemeTrieElementRule","scopeDepth","clone","cloneArr","acceptOverwrite","console","_ThemeTrieElement","_mainRule","rulesWithParentScopes","_children","_rulesWithParentScopes","_cmpBySpecificity","aParentIndex","bParentIndex","parentScopeLengthDiff","head","tail","dotIndex","hasOwnProperty","rules","concat","child","_doInsertHere","EncodedTokenMetadata","_EncodedTokenMetadata","toBinaryStr","encodedTokenAttributes","padStart","print","languageId","getLanguageId","tokenType","getTokenType","getFontStyle","getForeground","getBackground","containsBalancedBrackets","_languageId","_tokenType","_containsBalancedBracketsBit","_fontStyle","_foreground","_background","createMatchers","selector","matchesName","regex","results","tokenizer","exec","next","token","priority","charAt","matcher","parseConjunction","parseOperand","expressionToNegate","matcherInput","expressionInParents","parseInnerExpression","matchers","some","matcher2","isIdentifier","identifiers","every","FindOption","disposeOnigString","str","dispose","TopLevelRuleReference","toKey","TopLevelRepositoryRuleReference","ruleName","ExternalReferenceCollector","_references","_seenReferenceKeys","Set","references","visitedRule","add","reference","ScopeDependencyProcessor","repo","initialScopeName","seenFullScopeRequests","Q","seenPartialScopeRequests","processQueue","q","deps","dep","collectReferencesOfReference","baseGrammarScopeName","selfGrammar","baseGrammar","collectExternalReferencesInTopLevelRule","collectExternalReferencesInTopLevelRepositoryRule","repository","injections","injection","context","collectExternalReferencesInRules","patterns","values","patternRepository","include","parseInclude","kind","newContext","BaseReference","SelfReference","RelativeReference","TopLevelReference","TopLevelRepositoryReference","indexOfSharp","HAS_BACK_REFERENCES","BACK_REFERENCING_END","Symbol","Rule","$location","id","_nameIsCapturing","_name","_contentNameIsCapturing","_contentName","contentName","debugName","location","basename","idx","lastIndexOf","substr","filename","line","getName","lineText","getContentName","CaptureRule","retokenizeCapturedWithRuleId","collectPatterns","grammar","out","compile","endRegexSource","compileAG","allowA","allowG","MatchRule","_match","captures","_cachedCompiledPatterns","RegExpSource","debugMatchRegExp","_getCachedCompiledPatterns","RegExpSourceList","IncludeOnlyRule","hasMissingPatterns","pattern","getRule","BeginEndRule","_begin","beginCaptures","_end","endHasBackReferences","endCaptures","applyEndPatternLast","begin","hasBackReferences","debugBeginRegExp","debugEndRegExp","getEndWithResolvedBackReferences","resolveBackReferences","unshift","setSource","BeginWhileRule","whileCaptures","_while","whileHasBackReferences","_cachedCompiledWhilePatterns","debugWhileRegExp","getWhileWithResolvedBackReferences","compileWhile","_getCachedCompiledWhilePatterns","compileWhileAG","RuleFactory","_RuleFactory","createCaptureRule","helper","registerRule","getCompiledRuleId","desc","$vscodeTextmateLocation","_compileCaptures","_compilePatterns","while","maximumCaptureId","captureId","numericCaptureId","ruleId","localIncludedRule","externalGrammarName","externalGrammarInclude","externalGrammar","getExternalGrammar","externalIncludedRule","$self","skipRule","_RegExpSource","hasAnchor","_anchorCache","regExpSource","lastPushedPos","pos","ch","nextCh","_buildAnchorCache","newSource","capturedValues","map","g1","A0_G0_result","A0_G1_result","A1_G0_result","A1_G1_result","A0_G0","A0_G1","A1_G0","A1_G1","resolveAnchors","_items","_hasAnchors","_cached","_disposeCaches","onigLib","regExps","CompiledRule","_resolveAnchors","scanner","createOnigScanner","findNextMatchSync","string","startPosition","options","BasicScopeAttributes","BasicScopeAttributesProvider","_BasicScopeAttributesProvider","_defaultAttributes","_embeddedLanguagesMatcher","initialLanguageId","embeddedLanguages","ScopeMatcher","entries","getDefaultAttributes","getBasicScopeAttributes","_NULL_SCOPE_METADATA","_getBasicScopeAttributes","_scopeToLanguage","_toStandardTokenType","STANDARD_TOKEN_TYPE_REGEXP","scopesRegExp","escapedScopes","process","env","TokenizeStringResult","stack","stoppedEarly","_tokenizeString","isFirstLine","linePos","lineTokens","checkWhileConditions","timeLimit","lineLength","content","STOP","anchorPosition","whileCheckResult","_checkWhileConditions","beginRuleCapturedEOL","whileRules","node","pop","nodeRule","whileRule","ruleScanner","findOptions","endRule","matchedRuleId","produce","handleCaptures","startTime","Date","now","elapsedTime","scanNext","matchRuleOrInjections","matchResult","matchRule","prepareRuleSearch","getInjections","injectionResult","matchInjections","bestMatchRuleId","bestMatchRating","Number","MAX_VALUE","bestMatchCaptureIndices","bestMatchResultPriority","contentNameScopesList","getScopeNames","matchRating","priorityMatch","matchResultScore","injectionResultScore","hasAdvanced","poppedRule","withContentNameScopesList","nameScopesList","popped","getAnchorPos","getEnterPos","_rule","beforePush","pushAttributed","pushedRule","withEndRule","hasSameRuleAs","matchingRule","safePop","lineTextContent","min","localStack","maxEnd","captureRule","captureIndex","endPos","produceFromScopes","stackClone","onigSubStr","createOnigString","captureRuleScopeName","captureRuleScopesList","LocalStackElement","collectInjections","ruleFactoryHelper","nameMatcher","debugSelector","identifers","scopesAreMatching","thisScopeName","identifier","Grammar","_rootScopeName","initialLanguage","tokenTypes","balancedBracketSelectors","grammarRepository","_onigLib","_basicScopeAttributesProvider","_rootId","_lastRuleId","_ruleId2desc","_includedGrammars","_grammarRepository","_grammar","initGrammar","_injections","_tokenTypeMatchers","keys","type","themeProvider","getMetadataForScope","_collectInjections","scopeName2","rawInjections","expression","injectionScopeNames","injectionGrammar","injectionScopeName","injectionSelector","i1","i2","factory","rawIncludedGrammar","$base","tokenizeLine","prevState","_tokenize","tokens","getResult","ruleStack","tokenizeLine2","getBinaryResult","emitBinaryTokens","StateStackImpl","NULL","reset","scopeList","rawDefaultMetadata","defaultStyle","defaultMetadata","rootScopeName","AttributedScopeStack","createRootAndLookUpScopeName","createRoot","onigLineText","LineTokens","doClone","something","cloneArray","RegExp","cloneObj","obj","_AttributedScopeStack","tokenAttributes","fromExtension","namesScopeList","current","frame","rawRootMetadata","rootStyle","themeMatch","resolvedTokenAttributes","mergeAttributes","equals","existingTokenAttributes","basicScopeAttributes","styleAttributes","_pushAttributed","rawMetadata","newPath","scopeThemeMatchResult","metadata","self","_StateStackImpl","enterPos","anchorPos","depth","_enterPos","_anchorPos","_stackElementBrand","_equals","_structuralEquals","_reset","el","_writeString","outIndex","contentNameScopeStack","toStateStackFrame","pushFrame","BalancedBracketSelectors","balancedBracketScopes","unbalancedBracketScopes","allowAny","flatMap","matchesAlways","matchesNever","excluder","includer","tokenTypeOverrides","_emitBinaryTokens","_tokenTypeOverrides","_lineText","_tokens","_binaryTokens","_lastTokenEndIndex","endIndex","scopesList","scopes2","startIndex","Uint32Array","SyncRegistry","theme","_theme","_grammars","_rawGrammars","_injectionGrammars","setTheme","addGrammar","targetScope","grammarForScopeName","rawGrammar","dist_Registry","_options","_syncRegistry","_ensureGrammarCache","loadGrammarWithEmbeddedLanguages","loadGrammarWithConfiguration","configuration","_loadGrammar","unbalancedBracketSelectors","loadGrammar","dependencyProcessor","_loadSingleGrammar","request","_grammarForScopeName","_doLoadSingleGrammar","INITIAL","htmlVoidElements","Schema","property","normal","space","merge","definitions","definition","assign","normalize","prototype","undefined","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","defined","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","types_boolean","increment","checks","types_namespaceObject","DefinedInfo","mask","check","properties","normals","info","transform","attributes","includes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","_","caseSensitiveTransform","caseInsensitiveTransform","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","src","srcDoc","srcLang","srcSet","step","style","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","compact","declare","event","face","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","order","orient","orientation","origin","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","property_information_html","property_information_svg","own","characterEntitiesLegacy","characterEntitiesHtml4","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","rang","loz","spades","clubs","hearts","diams","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","dangerous","to_named_own","characters","call","formatSmart","named","numeric","toHexadecimal","omit","String","fromCharCode","omitOptionalSemicolons","useNamedReferences","useShortestReferences","toNamed","character","decimal","toDecimal","stringifyEntities","core_core","subset","charactersToExpression","groups","basic","escapeOnly","pair","all","htmlCommentRegex","bogusCommentEntitySubset","commentEntitySubset","dash","valid","kebab","$0","camelcase","siblingAfter","siblings","siblingBefore","emptyChildren","includeWhitespace","children","lib","omission_own","omission","handlers","tagName","closing","body","caption","headOrColgroupOrCaption","colgroup","dd","dt","Boolean","li","optgroup","option","p","rp","rubyElement","tbody","td","cells","tfoot","th","thead","tr","opening","previous","seen","constants","unquoted","single","double","textEntitySubset","text_text","state","characterReferences","handle","zwitch","one","parameters","invalid","unknown","node_","comment","_1","_2","bogusComments","doctype","_3","upperDoctype","tightDoctype","element","last","schema","omitOptionalTags","selfClosing","closeEmptyElements","voids","serializeAttributes","serializeAttribute","Type","rest","dashes","allowParseErrors","allowDangerousCharacters","quote","comma_separated_tokens","P","space_separated_tokens","padLeft","tightCommaSeparatedLists","collapseEmptyAttributes","preferUnquoted","quoteSmart","ccount","w","alternative","tightAttributes","closeSelfClosing","tightSelfClosing","raw","allowDangerousHtml","emptyOptions","emptyCharacterReferences","lib_emptyChildren","lib_all","resolveColorReplacements","replacements","colorReplacements","themeName","applyColorReplacements","normalizeGetter","Promise","resolve","then","isPlainLang","isSpecialLang","isNoneTheme","addClassToHast","class","splitLines","preserveEnding","lines","guessEmbeddedLanguages","_lang","highlighter","langs","matchAll","bundle","getBundledLanguages","l","getTokenStyleObject","styles","Italic","Bold","decorations","Underline","Strikethrough","stringifyTokenStyle","_grammarStateMap","WeakMap","setLastGrammarStateToMap","getLastGrammarStateFromMap","GrammarState","_stacks","themes","_stack","initial","fromEntries","toArray","args","stacksMap","getInternalStack","getScopes","visited","pushScope","stack2","toJSON","builtInTransformers","transformerDecorations","getContext","shiki","meta","normalizePosition","converter","indexToPos","JSON","stringify","posToIndex","createPositionConverter","verifyIntersections","items","foo","bar","isFooHasBarStart","isFooHasBarEnd","isBarHasFooStart","isBarHasFooEnd","splitTokens","breakpoints","sorted","breakpointsInToken","splitToken","offsets","lastOffset","ctx","codeEl","applyLineSection","decoration","lineEl","POSITIVE_INFINITY","alwaysWrap","wrapper","applyDecoration","splice","lineApplies","getTransformers","transformers","namedColors","parseColor","sequence","colorMode","rgb","defaultNamedColorsMap","black","red","green","yellow","blue","magenta","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightMagenta","brightCyan","brightWhite","codeToTokensBase","internal","getLoadedThemes","tokenizeAnsiWithTheme","fileContents","decorations2","colorPalette","createColorPalette","namedColorsMap","colorTable","rgbColor","getColorTable","levels","g","level","colors","parser","parse","position","findResult","findSequence","nextEscape","nextClose","commands","parseSequence","codeInt","styleToken","delete","bg","fg","dimColor","hexMatch","round","cssVarMatch","None","getLanguage","grammarState","tokenizeWithTheme","_tokenizeWithTheme","stateStack","tokenizeMaxLineLength","tokenizeTimeLimit","getGrammarStack","grammarContextCode","actual","final","tokensWithScopes","tokensWithScopesIndex","lineOffset","includeExplanation","resultWithScopes","tokensLength","nextStartIndex","themeSettingsSelectors","setting","selectors","explanation","tokenWithScopes","tokenWithScopesText","explainThemeScopesFull","themeSelectors","themeMatches","explainThemeScope","selectorPieces","matches","matchesOne","selectorParentIndex","parentIndex","codeToTokensWithThemes","themedTokens","tokens2","t","syncThemesTokenization","outThemes","count","outLines","indexes","n","mergedTokens","lineIdx","_token","tokenIdx","mergedToken","variants","themeIdx","__","___","mergedGrammarState","codeToTokens","defaultColor","cssVariablePrefix","themeTokens","themeRegs","getTheme","themesOrder","flatTokenVariants","merged","variantsOrder","styleKeys","mergedStyles","cur","keyName","htmlStyle","themeColorReplacements","codeToHast","transformerContext","_code","input","transformer","preprocess","mergeWhitespaces","mergeSameStyleTokens","newLine","carryOnContent","firstOffset","couldMerge","leading","trailing","expanded","prevToken","prevStyle","currentStyle","isPrevDecorated","isDecorated","contextSource","tokensToHast","structure","tabindex","preNode","codeNode","lineNodes","pre","lineNode","col","tokenNode","htmlAttrs","hastToHtml","tree","options_","VSCODE_FALLBACK_EDITOR_FG","light","dark","VSCODE_FALLBACK_EDITOR_BG","RESOLVED_KEY","normalizeTheme","rawTheme","tokenColors","globalSetting","replacementCount","replacementMap","getReplacementColor","replaceFg","replaceBg","replacement","defineProperty","enumerable","writable","resolveLangs","flat","resolveThemes","resolved","isSpecialTheme","dist_ShikiError","Registry","_resolver","_themes","_langs","_alias","loadTheme","loadLanguages","_resolvedThemes","_resolvedGrammars","_langMap","_langGraph","_textmateThemeCache","_loadedThemesCache","_loadedLanguagesCache","textmateTheme","getGrammar","loadLanguage","embeddedLazilyBy","embeddedLangsLazy","addLanguage","grammarConfig","aliases","alias","resolveEmbeddedLanguages","langsGraphArray","missingLangs","dependents","embeddedLangs","getLoadedLanguages","embeddedLang","Resolver","_scopeToLang","engine","createScanner","createString","getLangRegistration","langIdOrAlias","injectTo","scopeParts","subScopeName","instancesCount","createShikiInternal","warnDeprecated","trace","createShikiInternalSync","_lastTheme","warnings","warn","isDisposed","_registry","langAlias","ensureNotDisposed","loadLanguageSync","langs2","loadThemeSync","themes2","createHighlighterCore","getLastGrammarState","options2","codeToHtml","postprocess","getBundledThemes","getInternalContext","createdBundledHighlighter","bundledLanguages","bundledThemes","resolveLang","resolveTheme","core","createSingletonShorthands","createHighlighter","config","_shiki","getSingletonHighlighter","utils_r","codePointAt","utils_i","utils_o","utils_u","C","T","inCharClass","Z","h","negate","V","neg","o","TextDecoder","ignoreBOM","fatal","decode","TextEncoder","encode","J","$","A","E","I","flags","f","B","O","minStr","maxStr","endsWith","ignoreCase","dotAll","extended","node_utils_y","parse_J","normalizeUnknownPropertyNames","skipBackrefValidation","skipLookbehindValidation","skipPropertyNameValidation","unicodePropertyMap","captureGroup","singleline","M","Y","digitIsAscii","posixIsAscii","spaceIsAscii","wordIsAscii","textSegmentMode","D","S","W","getCurrentModX","at","numOpenGroups","popModX","pushModX","u","replaceCurrentModX","F","K","X","tag","arguments","L","on","off","enable","disable","te","ee","N","nextIndex","parse_b","parse_W","parse_F","parse_X","capturingGroups","hasNumberedRef","parse_k","orphan","sign","namedGroupsByName","parse_m","useLastValid","isCheckingRangeEnd","parse_ee","walk","parse_L","re","parse_C","parse_z","parse_w","parse_Q","parse_R","parse_E","parse_I","parse_te","ie","G","parse_A","atomic","parse_P","parse_K","behind","parse_$","utils_l","isInAbsenceFunction","parse_D","isInLookbehind","isInNegLookbehind","parse_M","oe","parse_","ae","subroutines","parse_O","ref","isSubroutined","parse_V","variableLength","container","remove","traverse_f","removeAllNextSiblings","removeAllPrevSiblings","replaceWith","traverse","replaceWithMultiple","skip","R","enter","exit","noncapturingDelim","Context","DEFAULT","CHAR_CLASS","replaceUnescaped","needle","negated","numCharClassesOpen","$skip","Function","hasUnescaped","execUnescaped","atomicPluginToken","baseQuantifier","possessivePluginToken","gRToken","recursiveToken","namedCaptureDelim","captureDelim","overlappingRecursionMsg","assertMaxInBounds","errMsg","makeRecursive","left","right","reps","isSubpattern","hiddenCaptures","addedHiddenCaptures","numCapturesPassed","namesInRecursed","captureName","repeatWithDepth","getDepthNum","depthNum","unnamed","backref","suffix","addedCaptureNum","src_incrementIfAtLeast","threshold","mapCaptureTransfers","captureTransfers","numCapturesAddedInExpansion","numAddedHiddenCapturesPreExpansion","numCapturesInLeft","recursionDelimCaptureNum","newCaptureTransfers","numCapturesInRight","numCapturesAddedInLeft","newTo","newFrom","cp","fromCodePoint","esm_r","envFlags","flagGroups","unicodeSets","getNewCurrentFlags","getOrInsert","defaultValue","bugFlagVLiteralHyphenIsRange","bugNestedClassIgnoresNegation","EsVersion","ES2025","ES2024","ES2018","Target","auto","getOptions","opts","accuracy","avoidSubclass","global","hasIndices","lazyCompileLength","verbose","allowOrphanBackrefs","asciiWordBoundaries","recursionLimit","CharsWithoutIgnoreCaseExpansion","defaultWordChar","getIgnoreCaseMatchChars","lower","upper","LowerToTitleCaseMap","altLower","LowerToAlternativeLowerCaseMap","altUpper","LowerToAlternativeUpperCaseMap","JsUnicodePropertyMap","titleEntry","titleRange","PosixClassMap","codePoint","range","range2","UnicodePropertiesWithSpecificCase","FirstPassVisitor","AbsenceFunction","innerGroup","outerGroup","setParentDeep","Alternative","flagDirectivesByAlt","flagDirectives","getCombinedFlagModsFromFlagNodes","flagGroup","Assertion","supportedGNodes","parseFragment","sticky","prev","isAlwaysNonZeroLength","types","setParent","strategy","Backreference","jsGroupNameMap","isValidJsGroupName","getAndStoreJsGroupName","CapturingGroup","subroutineRefMap","CharacterClassRange","CharacterSet","minTargetEs2024","setNegate","eBase","emoji","ascii","graph","Directive","firstAlt","topLevel","hasWrapperGroup","lookbehind","Flags","multiline","force","Group","LookaroundAssertion","passedLookbehind","NamedCallout","Quantifier","group","Regex","leadingGs","hasAltWithLeadG","hasAltWithoutLeadG","leadingG","getLeadingG","els","firstToConsider","isLoneGLookaround","isAlwaysZeroLength","gNodesForGroup","Subroutine","SecondPassVisitor","multiplexCapturesToLeftByRef","reffedNodesByReferencer","node2","groupOriginByCopy","groupsByName","openRefs","recursion2","createRecursion","multiplexNodes","multiplex","groupsWithSameName","hasDuplicateNameToRemove","groupInfo","prevFlags","currentFlags","isRecursive","reffed","reffedGroupNode","isGlobalRecursion","expandedSubroutine","cloneCapturingGroup","originMap","up","up2","store","reffedGroupFlagMods","getAllParents","filterFn","reffedGroupFlags","globalFlags","getFlagModsFromFlags","mods","ThirdPassVisitor","highestOrphanBackref","participants","reffedNodes","canParticipateWithNode","rightmostPoint","kid","getKids","isAncestorOf","descendant","numCapturesToLeft","numCapsNeeded","emptyCapture","addParentProperties","jsName","flagNodes","flagProps","combinedFlags","alts","ast","FlagModifierVisitor","isAnyGroup","currentModI","getCurrentModI","pushModI","popModI","setHasCasedChar","Character","charHasCase","getCasesOutsideCharClassRange","firstOnly","generator","gen","useFlagMods","captureMap","transferTo","escaped","getCharEscape","escDigit","lastNode","useFlagV","useAppliedIgnoreCase","cases","CharacterClass","isLiteralHyphen","genClass","negatedChildClasses","groupFirstAlt","newAlt","cc","firstEl","escOpts","extraChars","ranges","chars","codePoints","appliedGlobalFlags","atomic2","contents","getGroupPrefix","flagMods","getQuantifierStr","greedy","lazy","possessive","limit","BaseEscapeChars","CharClassEscapeChars","CharClassEscapeCharsFlagV","CharCodeEscapeMap","casedRe","found","charsOutsideRange","caseOfChar","escapeChars","EmulatedRegExp","_EmulatedRegExp","compiled","nameMap","rawOptions","lazyCompile","transfers","esm_createCaptureMap","useLastIndex","execCore","adjustMatchDetailsForOffset","indices","groupIndices","indicesCopy","matchCopy","mappedNums","createNameMap","numCaptures","JavaScriptScanner","forgiving","regexConstructor","regexps","cached","pending","toResult","indice","regexp","minIndex","createJavaScriptRegexEngine","toRegExp","toRegExpDetails","regexPlusAst","bestEffortTarget","firstPassState","secondPassState","_originMap","_strategy","generated","generate","minTargetEs2025","isInteger","hasCaseInsensitiveNode","hasCaseSensitiveNode","iStack","isIOn","msg","unicodeSetsPlugin","_captureTransfers","_hiddenCaptures","recursionResult","recursion","hasNumberedBackref","groupContentsStartPos","openGroups","hasRecursed","rDepth","gRNameOrNum","gRDepth","isWithinReffedGroup","hasRecursedWithin","startPos","groupContents","getGroupContents","contentsStartPos","contentsEndPos","numGroupsOpen","groupContentsLeft","groupContentsRight","expansion","post","isUnnamedCapture","atomicResult","hasProcessedAG","emulatedAGDelim","captureNumMap","numCapturesBeforeAG","numAGs","aGPos","numGroupsOpenInAG","inAG","capturingStart","noncapturingStart","incrementIfAtLeast","backrefNum","wrappedBackrefNum","bNum","possessiveResult","openGroupIndices","lastGroupIndex","lastCharClassIndex","lastToken","qBase","qMod","invalidQ","charsAdded","oldValue","nodeIndex","details","padRight","whitespace","thing","initPromise","bundledLanguagesInfo","__webpack_require__","bind","bundledLanguagesBase","import","bundledLanguagesAlias","bundledThemesInfo","_emscripten_get_now","performance","alignUp","main","init","wasmMemory","binding","updateGlobalBufferAndViews","buf","HEAPU8","HEAPU32","UTF8Decoder","UTF8ToString","ptr","maxBytesToRead","UTF8ArrayToString","heapOrArray","endIdx","endPtr","subarray","u0","asmLibraryArg","emscripten_get_now","emscripten_memcpy_big","dest","copyWithin","emscripten_resize_heap","requestedSize","oldSize","cutDown","overGrownHeapSize","emscripten_realloc_buffer","grow","fd_write","createWasm","wasi_snapshot_preview1","memory","__defProp","__defNormalProp","configurable","__publicField","onigBinding","UtfString","utf16Length","utf8Length","_utf8ByteLength","computeIndicesMapping","utf16OffsetToUtf8","utf8OffsetToUtf16","utf8Value","i8","i16","charCode","wasSurrogatePair","nextCharCode","utf16Value","codepoint","onigBinding2","omalloc","_OnigString","LAST_ID","_onigBinding","utfString","_sharedPtrInUse","_sharedPtr","convertUtf8OffsetToUtf16","utf8Offset","convertUtf16OffsetToUtf8","utf16Offset","ofree","OnigScanner","strPtrsArr","strLenArr","strPtrsPtr","strLenPtr","scannerPtr","throwLastOnigError","getLastOnigError","_ptr","freeOnigScanner","arg","_findNextMatchSync","debugCall","resultPtr","findNextOnigScannerMatch","beg","_makeArrayBufferLoader","WebAssembly","instantiate","importObject","createOnigurumaEngine","_load","instance","dataOrOptions","instantiator","Response","instantiateStreaming","_makeResponseStreamingLoader","_makeResponseNonStreamingLoader","arrayBuffer","ArrayBuffer","isView","Buffer","isBuffer","SharedArrayBuffer","Module","dist","y6","iX","qn"],"sourceRoot":""}