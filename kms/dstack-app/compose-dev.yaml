services:
  auth-api:
    build:
      context: .
      dockerfile_inline: |
        FROM node:18-alpine@sha256:06f7bbbcec00dd10c21a3a0962609600159601b5004d84aff142977b449168e9
        WORKDIR /app

        RUN apk add --no-cache git
        RUN git clone ${GIT_REPOSITORY} && \
            cd dstack && \
            git checkout ${GIT_REV}
        WORKDIR /app/dstack/kms/auth-eth
        RUN npm install
        RUN npx tsc --project tsconfig.json
        CMD node dist/src/main.js
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - ETH_RPC_URL=${ETH_RPC_URL}
      - KMS_CONTRACT_ADDR=${KMS_CONTRACT_ADDR}
    restart: unless-stopped
    ports:
      - 8001:8000

  kms:
    image: kvin/kms@sha256:ad6a8c5c43aed7278e665cd0960ae5be95060847f7d517633be685cabda95a3d
    volumes:
      - kms-volume:/kms
      - /var/run/dstack.sock:/var/run/dstack.sock
    ports:
      - 8000:8000
    depends_on:
      - auth-api
    restart: unless-stopped
    configs:
      - source: kms_config
        target: /kms/kms.toml
    command: sh -c 'mkdir -p /kms/certs /kms/images && exec dstack-kms -c /kms/kms.toml'

volumes:
  kms-volume:

configs:
  kms_config:
    content: |
      [rpc]
      address = "0.0.0.0"
      port = 8000

      [rpc.tls]
      key = "/kms/certs/rpc.key"
      certs = "/kms/certs/rpc.crt"

      [rpc.tls.mutual]
      ca_certs = "/kms/certs/tmp-ca.crt"
      mandatory = false

      [core]
      cert_dir = "/kms/certs"
      admin_token_hash = "${ADMIN_TOKEN_HASH}"

      [core.image]
      verify = true
      cache_dir = "/kms/images"
      download_url = "${IMAGE_DOWNLOAD_URL}"
      download_timeout = "2m"

      [core.auth_api]
      type = "webhook"

      [core.auth_api.webhook]
      url = "http://auth-api:8000"

      [core.onboard]
      enabled = true
      auto_bootstrap_domain = ""
      quote_enabled = true
      address = "0.0.0.0"
      port = 8000
